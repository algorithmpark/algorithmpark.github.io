<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>yatcpu实验报告</title>
    <link href="/2024/01/31/yatcpu/index/"/>
    <url>/2024/01/31/yatcpu/index/</url>
    
    <content type="html"><![CDATA[<h1>计算机组成原理课程实验报告</h1><p>yatcpu源仓库 <a href="https://github.com/hrpccs/2022-fall-yatcpu-repo">https://github.com/hrpccs/2022-fall-yatcpu-repo</a></p><p>完整的答案代码 <a href="https://github.com/CJL-sysu/2022-fall-yatcpu-repo">https://github.com/CJL-sysu/2022-fall-yatcpu-repo</a></p><h2 id="实验1-单周期CPU">实验1-单周期CPU</h2><h3 id="InstructionFetch取址">InstructionFetch取址</h3><h4 id="填空代码">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// lab1(InstructionFetch)</span><br>pc := pc + <span class="hljs-number">4.</span><span class="hljs-type">U</span>  <span class="hljs-comment">//指令的地址加4</span><br><span class="hljs-comment">//处理jump</span><br>when(io.jump_flag_id) &#123;<br>pc := io.jump_address_id<br>&#125;<br>   <span class="hljs-comment">// la1(InstructionFetch) end</span><br></code></pre></td></tr></table></figure><h4 id="测试用例">测试用例</h4><p>该测试用例测试取址操作的正确性，指定程序入口地址为<code>entry=0x1000</code>，随后进行100次循环，每次循环都随机确定当前指令是否为跳转指令<code>jump</code>。</p><ul><li>如果不是跳转指令，则检查指令地址是否正常+4</li><li>如果是跳转指令，则检查指令地址是否跳转到<code>entry</code></li></ul><h4 id="波形图">波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231029103609402.png" alt="image-20231029103609402"></p><p>可以观察到图中信号<code>io_instruction_address[31:0]</code>的变化，在时钟的上升沿到来时，随机地跳转到<code>0x00001000</code>或比原来的值大4的值，和预期相符</p><h3 id="InstructionDecoder译码">InstructionDecoder译码</h3><h4 id="填空代码-2">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// lab1(InstructionDecode)</span><br><span class="hljs-comment">//补充为 io.ex_aluop2_source、io.memory_read_enable、io.memory_write_enable、io.wb_reg_write_source 四个控制信号赋值的代码</span><br><span class="hljs-comment">//io.ex_aluop2_source</span><br>io.ex_aluop2_source := <span class="hljs-type">Mux</span>(<br>  opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">L</span> || opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">I</span> || opcode === <span class="hljs-type">Instructions</span>.jalr<br>    || opcode === <span class="hljs-type">Instructions</span>.jal || opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">S</span> || opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">B</span> ||<br>    opcode === <span class="hljs-type">Instructions</span>.lui || opcode === <span class="hljs-type">Instructions</span>.auipc,<br>  <span class="hljs-type">ALUOp2Source</span>.<span class="hljs-type">Immediate</span>,<br>  <span class="hljs-type">ALUOp2Source</span>.<span class="hljs-type">Register</span><br>)<br><span class="hljs-comment">//io.memory_read_enable</span><br>io.memory_read_enable := <span class="hljs-type">Mux</span>(<br>  opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">L</span> , <span class="hljs-number">1.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>) , <span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>)<br>)<br><span class="hljs-comment">//io.memory_write_enable</span><br>io.memory_write_enable := <span class="hljs-type">Mux</span>(<br>  opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">S</span> , <span class="hljs-number">1.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>) , <span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>)<br>)<br><span class="hljs-comment">//io.wb_reg_write_source</span><br>io.wb_reg_write_source:=<span class="hljs-type">RegWriteSource</span>.<span class="hljs-type">ALUResult</span> <span class="hljs-comment">//默认等于0</span><br>when(opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">RM</span> || opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">I</span><br>  || opcode === <span class="hljs-type">Instructions</span>.lui || opcode === <span class="hljs-type">Instructions</span>.auipc)&#123;<br>  io.wb_reg_write_source := <span class="hljs-type">RegWriteSource</span>.<span class="hljs-type">ALUResult</span><br>&#125;<br>  .elsewhen(opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">L</span>)&#123;<br>    io.wb_reg_write_source := <span class="hljs-type">RegWriteSource</span>.<span class="hljs-type">Memory</span><br>  &#125;<br>  .elsewhen(opcode === <span class="hljs-type">Instructions</span>.jal || opcode === <span class="hljs-type">Instructions</span>.jalr)&#123;<br>    io.wb_reg_write_source := <span class="hljs-type">RegWriteSource</span>.<span class="hljs-type">NextInstructionAddress</span><br>  &#125;<br><span class="hljs-comment">// lab1(InstructionDecode) end</span><br></code></pre></td></tr></table></figure><h4 id="测试用例-2">测试用例</h4><p>测试用例总共测试了三条不同种类的指令，分别是S型、<code>lui</code>、<code>add</code> 指令</p><h5 id="对于S型指令">对于S型指令</h5><p>测试的指令为<code>0x00a02223L</code>，对应二进制编码<code>00000000101000000010001000100011</code></p><p>期望结果为<code>aluop1_source</code>选<code>Register</code>，<code>aluop2_source</code>选<code>Immediate</code></p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231027073124564.png" alt="image-20231027073124564"></p><table><thead><tr><th>31-25</th><th>24-20</th><th>19-15</th><th>14-12</th><th>11-7</th><th>6-0</th></tr></thead><tbody><tr><td>imm[11:5]</td><td>rs2</td><td>rs1</td><td>func3</td><td>imm[4:0]</td><td>opcode</td></tr><tr><td>0000000</td><td>01010</td><td>00000</td><td>010</td><td>00100</td><td>0100011</td></tr></tbody></table><p>期待<code>regs_reg1_read_address</code>为rs1的编号，即0，<code>regs_reg2_read_address</code>为rs2的编号，即10</p><h5 id="对于lui指令">对于<code>lui</code>指令</h5><p><code>lui</code>指令的功能是将16位立即数填充到目标寄存器的高16位，所以第一个操作数数取零号寄存器，即<code>regs_reg1_read_address</code>取0，<code>ex_aluop1_source</code>取Register，第二个操作数取立即数，<code>ex_aluop2_source</code>取Immediate</p><h5 id="对于add指令">对于<code>add</code>指令</h5><p>该指令属于R型，所以<code>ex_aluop1_source</code>和<code>ex_aluop2_source</code>都选取Register</p><h4 id="波形图-2">波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231029191847038.png" alt="image-20231029191847038"></p><p>入图，2ps,4ps,6ps时分别执行了上述三条指令</p><p>填空部分是为<code>io.ex_aluop2_source</code>、<code>io.memory_read_enable</code>、<code>io.memory_write_enable</code>、<code>io.wb_reg_write_source</code> 四个控制信号赋值的代码</p><ul><li>对于<code>io.ex_aluop2_source</code>，前两条指令<code>aluop2_source</code>选立即数，对应波形图上的高电平。第三条指令<code>aluop2_source</code>选寄存器，对应波形图上的低电平</li><li>对于<code>io.memory_read_enable</code>，三条指令都不需要读内存，波形图上该信号始终为低电平</li><li>对于<code>io.memory_write_enable</code>，只有第一条指令需要写内存，对应波形图上的高电平，另外两条指令不需要写内存，对应波形图上的低电平</li><li>对于<code>io.wb_reg_write_source</code>，第一条指令写寄存器的使能为低电平，不需要考虑该信号的值。第二、三条指令需要写寄存器，而且写寄存器的数据都来自ALU计算结果，该信号都是00</li></ul><h3 id="Execute执行">Execute执行</h3><h4 id="填空代码-3">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// lab1(Execute)</span><br><span class="hljs-comment">//为 ALU 的输入端口赋值</span><br>alu.io.func := alu_ctrl.io.alu_funct<br>alu.io.op1 := <span class="hljs-type">Mux</span>(<br>  io.aluop1_source === <span class="hljs-number">1.</span><span class="hljs-type">U</span>, io.instruction_address, io.reg1_data<br>)<br>alu.io.op2 := <span class="hljs-type">Mux</span>(<br>  io.aluop2_source === <span class="hljs-number">1.</span><span class="hljs-type">U</span>, io.immediate, io.reg2_data<br>)<br><span class="hljs-comment">// lab1(Execute) end</span><br></code></pre></td></tr></table></figure><h4 id="测试用例-3">测试用例</h4><p>测试用例分别执行<code>add</code>和<code>beq</code>两种操作</p><ul><li>对于<code>add</code>，测试程序循环了101次，每次循环都生成两个随机数让ALU执行加法操作，检验运算是否正确</li><li>对于<code>beq</code>，测试程序分别检验了两个寄存器操作数相等和不等时，跳转使能<code>if_jump_flag</code>和跳转地址<code>if_jump_address</code>的值是否正确</li></ul><h4 id="波形图-3">波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231029195723312.png" alt="image-20231029195723312"></p><p>如图，因为<code>alu.io.func</code>和<code>alu_ctrl.io.alu_funct</code>是直接相连的，在波形图中它们的值始终相同</p><p><code>io_op1</code>和<code>io_op2</code>是传递给ALU运算的操作数，图中红色游标处正在执行加法运算，经检验，0EBC9B5C+12856ECB=21420A27,说明ALU的计算是正确的</p><h3 id="RegisterFile寄存器组">RegisterFile寄存器组</h3><h4 id="测试用例-4">测试用例</h4><ol><li>read the written content</li></ol><p>该测试用例先向一号寄存器写入<code>0xDEADBEEFL</code>，然后再从一号寄存器读出数据，检验寄存器组的读写功能</p><ol start="2"><li>x0 always be zero</li></ol><p>该测试用例向0号寄存器写入数据<code>0xDEADBEEFL</code>，然后检验0号寄存器的数据是否保持为0</p><ol start="3"><li>read the writing content</li></ol><p>该测试用例的作用是测试寄存器的赋值是在时钟上升沿到来时进行的，如果没有时钟信号，赋值不会进行</p><p><code>timescope</code>块的意义是测量代码块的执行时间，<code>timescope</code>块外的代码不会被计入性能测试中</p><h3 id="CPUTest">CPUTest</h3><h4 id="填空代码-4">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala">ex.io.instruction := inst_fetch.io.instruction<br>ex.io.instruction_address := inst_fetch.io.instruction_address<br>ex.io.reg1_data := regs.io.read_data1<br>ex.io.reg2_data := regs.io.read_data2<br>ex.io.immediate := id.io.ex_immediate<br>ex.io.aluop1_source := id.io.ex_aluop1_source<br>ex.io.aluop2_source := id.io.ex_aluop2_source<br></code></pre></td></tr></table></figure><h4 id="测试用例-5">测试用例</h4><ol><li>运行<code>fibonacci.asmbin</code>，递归计算斐波那契数列第10个元素的值，检验是否为55</li><li>运行<code>quicksort.asmbin</code>，执行快速排序。如果快排运行成功，内存地址从4开始应当存储了一个长度为10的数组，值为0到9</li><li>运行<code>sb.asmbin</code>，检验寄存器的读写功能是否正确</li></ol><h4 id="波形图-lab1CPUTest">波形图(lab1CPUTest)</h4><h5 id="calculate-recursively-fibonacci-10">calculate recursively fibonacci(10)</h5><p>这个测试用例使用递归算法计算了斐波那契数列第10项</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116092330845.png" alt="image-20240116092330845"></p><p>100003ps时<code>io.mem_debug_read_address</code>设置为4, 读得<code>io.mem_debug_read_data==37H</code></p><p>37H=3*16+7=55, 与期望相符</p><h5 id="quicksort-10-numbers">quicksort 10 numbers</h5><p>这个测试用例使用快速排序将0~9这10个打乱的数从小到大排列</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116092809768.png" alt="image-20240116092809768"></p><p>从100004ps开始, <code>mem_debug_read_data</code>依次输出了按照从小到大排好的0~9, 说明快速排序程序的结果是正确的</p><h5 id="store-and-load-single-byte">store and load single byte</h5><p>这个测试用例检验了寄存器存数,取数的能力</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116093601366.png" alt="image-20240116093601366"></p><p>在2ns时(这时候程序已经运行完毕)读取1,5,6三个寄存器的值,</p><ul><li>1号寄存器为<code>15EFH</code></li><li>5号寄存器为<code>DEADBEEFH</code></li><li>6号寄存器为<code>EFH</code></li></ul><p>和预期相符</p><h3 id="对实验指导的改进建议">对实验指导的改进建议</h3><p>网站实验一的电路图错误</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231029211429761.png" alt="image-20231029211429761"></p><p>图中红圈圈出的<code>Mux</code>有连线错误，0应当接<code>Reg1RD</code>，1应当接<code>InsAddr</code></p><h2 id="实验2-中断">实验2-中断</h2><h3 id="Execute">Execute</h3><h4 id="指令说明">指令说明</h4><p>以下翻译自非特权级手册第九章</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231104213955177.png" alt="image-20231104213955177"></p><p>符号说明：以下用<code>[csr]</code>表示在CSR寄存器组中编号为<code>csr</code>的寄存器中存储的值</p><p><code>(rd)</code>表示在通用寄存器组中编号为<code>rd</code>的寄存器中存储的值</p><ul><li><p>CSRRW (Atomic Read/Write CSR) ：用于交换CSR寄存器的值和通用寄存器的值</p><p>func3=001</p><p>如果<code>rd</code>不是0号寄存器，则先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code>；然后<code>[csr]=(rs1)</code></p><p>如果<code>rd</code>是0号寄存器，则只执行<code>[csr]=(rs1)</code></p></li><li><p>CSRRS (Atomic Read and Set Bits in CSR)：读取CSR寄存器的值</p><p>func3=010</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0号寄存器，执行按位或运算<code>[csr]=[csr]|(rs1)</code></p></li><li><p>CSRRC (Atomic Read and Clear Bits in CSR)：</p><p>func3=011</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0号寄存器，执行按位与运算<code>[csr]=[csr]&amp;~(rs1)</code></p></li><li><p>CSRRWI (Atomic Read/Write CSR Immediate)</p><p>func3=101</p><p>如果<code>rd</code>不是0号寄存器，则先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code>；然后<code>[csr]=(零扩展)rs1</code></p><p>如果<code>rd</code>是0号寄存器，则只执行<code>[csr]=rs1</code></p></li><li><p>CSRRSI (Atomic Read and Set Bits in CSR Immediate)：读取CSR寄存器的值</p><p>func3=110</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0，执行按位或运算<code>[csr]=[csr]|(零扩展)rs1</code></p></li><li><p>CSRRCI (Atomic Read and Clear Bits in CSR Immediate)：</p><p>func3=111</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0，执行按位与运算<code>[csr]=[csr]&amp;~(零扩展)rs1</code></p></li></ul><h4 id="代码填空">代码填空</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// lab2(CLINTCSR)</span><br><span class="hljs-keyword">val</span> rs1 = io.instruction(<span class="hljs-number">19</span>,<span class="hljs-number">15</span>)<br>io.csr_reg_write_data := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>when(opcode === <span class="hljs-type">Instructions</span>.csr)&#123;<br>  when(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrw)&#123;<br>    io.csr_reg_write_data := io.reg1_data<br>  &#125;<br>    .elsewhen(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrs)&#123;<br>      io.csr_reg_write_data := <span class="hljs-type">Mux</span>(rs1 =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>, io.csr_reg_read_data .| (io.reg1_data) ,io.csr_reg_read_data)<br>    &#125;<br>    .elsewhen(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrc)&#123;<br>      io.csr_reg_write_data := <span class="hljs-type">Mux</span>(rs1 =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>, io.csr_reg_read_data .&amp; (~io.reg1_data) ,io.csr_reg_read_data)<br>    &#125;<br>    .elsewhen(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrwi)&#123;<br>      io.csr_reg_write_data := rs1<br>    &#125;<br>    .elsewhen(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrsi)&#123;<br>      io.csr_reg_write_data := <span class="hljs-type">Mux</span>(rs1 =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>, io.csr_reg_read_data .| ((<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">27.</span><span class="hljs-type">W</span>))##rs1) ,io.csr_reg_read_data)<br>    &#125;<br>    .elsewhen(funct3 === <span class="hljs-type">InstructionsTypeCSR</span>.csrrci)&#123;<br>      io.csr_reg_write_data := <span class="hljs-type">Mux</span>(rs1 =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>, io.csr_reg_read_data .&amp; ((<span class="hljs-number">0x7ffffff</span>L.<span class="hljs-type">U</span>(<span class="hljs-number">27.</span><span class="hljs-type">W</span>))##(~rs1)) ,io.csr_reg_read_data)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//lab2 end</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图">测试用例和波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231108202304153.png" alt="image-20231108202304153"></p><p>测试用例检验了其中四条指令<code>csrrci</code>,<code>csrrsi</code>,<code>csrrw</code>,<code>csrrs</code>的功能是否正确</p><ul><li><p>2ps 处：</p><p>func3为111, 对应指令CSRRCI,</p><p>指令为 30047073H ，取其中15~19位为rs1，rs1=01000B，不是0号寄存器，所以执行按位与运算<code>[csr]=[csr]&amp;~(零扩展)rs1</code></p><p>[csr]=00001888H,</p><p>(零扩展)rs1=0000 0000 0000 0000 0000 0000 000 01000 B</p><p>~(零扩展)rs1=1111 1111 1111 1111 1111 1111 111 10111 B= FFFF FFF7H</p><p>[csr]&amp;~(零扩展)rs1=00001880H，与io_csr_reg_write_data相符</p></li><li><p>4ps 处：</p><p>func3为110，对应指令CSRRSI，</p><p>指令为 30046073H，取其中15~19位为rs1，rs1=01000B，不是0号寄存器，执行按位或运算<code>[csr]=[csr]|(零扩展)rs1</code></p><p>[csr]=00001880H,</p><p>(零扩展)rs1=0000 0000 0000 0000 0000 0000 000 01000 B =0000 0008H</p><p>[csr]|(零扩展)rs1= 0000 1888H，与io_csr_reg_write_data相符</p></li><li><p>6ps 处：</p><p>func3为001，对应指令CSRRW，</p><p>指令为 30051073H，取其中15~19位为rs1，rs1=01010B，不是0号寄存器，执行<code>[csr]=(rs1)= 0000 1888H</code>，与io_csr_reg_write_data相符</p></li><li><p>8ps 处：</p><p>func3为010，对应指令CSRRS</p><p>指令为 3000 2573H，取其中15~19位为rs1，rs1=00000B，是0号寄存器，</p><p>所以<code>csr_reg_write_data=csr_reg_read_data=0000 1888H</code>,与io_csr_reg_write_data相符</p></li></ul><h3 id="CSR和CLINT">CSR和CLINT</h3><p>MSTATUS寄存器</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231104172457837.png" alt="image-20231104172457837"></p><h4 id="代码填空-2">代码填空</h4><p><code>CLINT.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//lab2(CLINTCSR)</span><br><span class="hljs-comment">//val interrupt_enable =</span><br>when(io.interrupt_flag =/= <span class="hljs-type">InterruptStatus</span>.<span class="hljs-type">None</span> &amp;&amp; interrupt_enable) &#123;   <span class="hljs-comment">//  =/=表示不等</span><br>  io.csr_bundle.mstatus_write_data := io.csr_bundle.mstatus(<span class="hljs-number">31</span>,<span class="hljs-number">13</span>)### <span class="hljs-number">3.</span><span class="hljs-type">U</span>(<span class="hljs-number">2.</span><span class="hljs-type">W</span>) ### io.csr_bundle.mstatus(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>) ### <span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>) ### io.csr_bundle.mstatus(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">//特权级别设置为M-mode//修改MIE位，关中断</span><br>  io.csr_bundle.mepc_write_data := instruction_address    <span class="hljs-comment">//保存下一条指令的地址</span><br>  io.csr_bundle.mcause_write_data := <span class="hljs-type">Mux</span>(io.interrupt_flag(<span class="hljs-number">0</span>),<span class="hljs-number">0x80000007</span>L.<span class="hljs-type">U</span>,<span class="hljs-number">0x8000000B</span>L.<span class="hljs-type">U</span>)<span class="hljs-comment">//io.interrupt_flag(0)为1表示由timer产生的外部中断，对应mcause的值0x80000007L.U,否则是uart造成的软件中断</span><br>  io.csr_bundle.direct_write_enable := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.interrupt_assert := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.interrupt_handler_address := io.csr_bundle.mtvec<br>&#125;.elsewhen(io.instruction === <span class="hljs-type">InstructionsRet</span>.mret) &#123;<br>  io.csr_bundle.mstatus_write_data := io.csr_bundle.mstatus(<span class="hljs-number">31</span>,<span class="hljs-number">13</span>)### <span class="hljs-number">3.</span><span class="hljs-type">U</span>(<span class="hljs-number">2.</span><span class="hljs-type">W</span>) ### io.csr_bundle.mstatus(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>) ### <span class="hljs-number">1.</span><span class="hljs-type">U</span>(<span class="hljs-number">1.</span><span class="hljs-type">W</span>) ### io.csr_bundle.mstatus(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<span class="hljs-comment">//特权级别设置为M-mode//修改MIE位，开中断</span><br>  io.csr_bundle.mepc_write_data := io.csr_bundle.mepc                              <span class="hljs-comment">//保持原样</span><br>  io.csr_bundle.mcause_write_data := io.csr_bundle.mcause<br>  io.csr_bundle.direct_write_enable := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.interrupt_assert := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.interrupt_handler_address := io.csr_bundle.mepc<br>&#125;.otherwise &#123;<br>  io.csr_bundle.mstatus_write_data := io.csr_bundle.mstatus                         <span class="hljs-comment">//保持原样</span><br>  io.csr_bundle.mepc_write_data := io.csr_bundle.mepc                               <span class="hljs-comment">//保持原样</span><br>  io.csr_bundle.mcause_write_data := io.csr_bundle.mcause<br>  io.csr_bundle.direct_write_enable := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  io.interrupt_assert := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  io.interrupt_handler_address :=io.csr_bundle.mtvec                                 <span class="hljs-comment">//don&#x27;t care</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>CSR.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//以下对应原理图中CSR和CLINT之间的左四根线</span><br><span class="hljs-comment">//lab2(CLINTCSR)</span><br><span class="hljs-comment">//what data should be passed from csr to clint (Note: what should clint see is the next state of the CPU)</span><br>io.clint_access_bundle.mstatus := <span class="hljs-type">Mux</span>(io.reg_write_enable_id &amp;&amp; io.reg_write_address_id===<span class="hljs-type">CSRRegister</span>.<span class="hljs-type">MSTATUS</span>,io.reg_write_data_ex,mstatus)<br>io.clint_access_bundle.mtvec := <span class="hljs-type">Mux</span>(io.reg_write_enable_id &amp;&amp; io.reg_write_address_id===<span class="hljs-type">CSRRegister</span>.<span class="hljs-type">MTVEC</span>,io.reg_write_data_ex,mtvec)<br>io.clint_access_bundle.mcause := <span class="hljs-type">Mux</span>(io.reg_write_enable_id &amp;&amp; io.reg_write_address_id===<span class="hljs-type">CSRRegister</span>.<span class="hljs-type">MCAUSE</span>,io.reg_write_data_ex,mcause)<br>io.clint_access_bundle.mepc := <span class="hljs-type">Mux</span>(io.reg_write_enable_id &amp;&amp; io.reg_write_address_id===<span class="hljs-type">CSRRegister</span>.<span class="hljs-type">MEPC</span>,io.reg_write_data_ex,mepc)<br><span class="hljs-comment">//lab2 end</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图-2">测试用例和波形图</h4><ol><li><p><code>interrupt_flag</code>设置为1，检查<code>interrupt_assert</code>是否为true，<code>interrupt_handler_address</code>是否为<code>MTVEC</code>的值（之前设置为0x1144）</p><p><code>jump_flag</code>设置为false，检查<code>MEPC</code>是否保存了PC+4的值,即0x1904</p><p>检查<code>MCAUSE</code>，因为设置了<code>interrupt_flag=1</code>,<code>MCAUSE</code>应当为<code>0x80000007L</code></p><p>检查<code>MSTATUS</code>是否变为<code>0x1880L</code>（也就是将MIE为由1改为0，关中断）</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240115233213190.png" alt="image-20240115233213190"></p></li><li><p>遇到<code>mret</code>指令，期望<code>interrupt_assert</code>为true</p><p><code>interrupt_handler_address</code>为<code>MEPC</code>的值,即<code>0x1904</code></p><p><code>MSTATUS</code>恢复为<code>0x1888L</code>（也就是将MIE为由0改为1，开中断）</p></li><li><p>然后是检验跳转的时候遇到中断,</p><p><code>interrupt_flag</code>设置为2，检查<code>interrupt_assert</code>是否为true，<code>interrupt_handler_address</code>是否为<code>MTVEC</code>的值（之前设置为0x1144）</p><p><code>jump_flag</code>设置为true，检查<code>MEPC</code>是否保存了<code>jump_address</code>,即<code>0x1990</code></p><p>检查<code>MCAUSE</code>，因为设置了<code>interrupt_flag=2</code>,<code>MCAUSE</code>应当为<code>0x8000000BL</code></p><p>检查<code>MSTATUS</code>是否变为<code>0x1880L</code>（也就是将MIE为由1改为0，关中断）</p></li><li><p>遇到<code>mret</code>指令, 期望<code>interrupt_assert</code>为true</p><p><code>interrupt_handler_address</code>为<code>MEPC</code>的值,即<code>0x1990</code></p><p><code>MSTATUS</code>恢复为<code>0x1888L</code>（也就是将MIE为由0改为1，开中断）</p></li><li><p>最后检查在关中断(<code>MSTATUS=0x1880</code>)的情况下, 尽管<code>interrupt_flag=1</code>, 因为中断被屏蔽, <code>interrupt_assert</code>为<code>false</code></p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240115234507869.png" alt="image-20240115234507869"></p></li></ol><h3 id="Timer">Timer</h3><h4 id="测试用例-6">测试用例</h4><ol><li>首先向内存<code>0x4.U</code>（limit寄存器所对应的内存空间）写入<code>0x990315</code>，然后读<code>limit</code>寄存器的值，检查是不是<code>0x990315</code></li><li>向内存<code>0x8.U</code>（enabled寄存器所对应的内存空间）写入<code>0</code>，然后读<code>enabled</code>寄存器的值，检查是不是<code>false</code></li></ol><h4 id="波形图-4">波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116080220120.png" alt="image-20240116080220120"></p><ul><li>3ps时，io_debug_limit变为0x990315，说明<code>0x4.U</code>（limit寄存器所对应的内存空间）成功写入<code>0x990315</code></li><li>7ps时，io_debug_enabled变为0，说明<code>0x8.U</code>（enabled寄存器所对应的内存空间）成功写入<code>0</code></li></ul><h4 id="代码填空-3">代码填空</h4><p><code>Timer.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//lab2(CLINTCSR)</span><br><span class="hljs-comment">//finish the read-write for count,limit,enabled. And produce appropriate signal_interrupt</span><br><span class="hljs-comment">//读</span><br>io.bundle.read_data := limit<br><br>when(io.bundle.address === <span class="hljs-number">8.</span><span class="hljs-type">U</span>)&#123;<br>  when(enabled)&#123;<br>    io.bundle.read_data:=<span class="hljs-number">1.</span><span class="hljs-type">U</span><br>  &#125;<br>    .otherwise&#123;<br>      io.bundle.read_data:=<span class="hljs-number">0.</span><span class="hljs-type">U</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//写</span><br>when(io.bundle.write_enable)&#123;<br>  when(io.bundle.address === <span class="hljs-number">4.</span><span class="hljs-type">U</span>)&#123;<br>    limit := io.bundle.write_data<br>  &#125;<br>    .elsewhen(io.bundle.address === <span class="hljs-number">8.</span><span class="hljs-type">U</span>)&#123;<br>      enabled := io.bundle.write_data =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//计时</span><br>io.signal_interrupt := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>when(count === limit)<br>&#123;<br>  count := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>  when(enabled)&#123;<br>    io.signal_interrupt := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  &#125;<br>&#125;<br>  .otherwise&#123;<br>    count := count + <span class="hljs-number">1.</span><span class="hljs-type">U</span><br>    io.signal_interrupt := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="CPUTest-2">CPUTest</h3><h4 id="测试用例-7">测试用例</h4><ol><li>运行<code>fibonacci.asmbin</code>，递归计算斐波那契数列第10个元素的值，检验是否为55</li><li>运行<code>quicksort.asmbin</code>，执行快速排序。如果快排运行成功，内存地址从4开始应当存储了一个长度为10的数组，值为0到9</li><li>运行<code>sb.asmbin</code>，检验寄存器的读写功能是否正确</li><li>运行<code>simpletest.asmbin</code>，检验中断功能</li></ol><h4 id="波形图-5">波形图</h4><p>前三个测试的波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>以下是对第四个测试的分析</p><h5 id="jump-to-trap-handler-and-then-return">jump to trap handler and then return</h5><p>根据<code>simpletest.c</code>的代码，这个程序首先往内存<code>0x4</code>写入数据<code>0xDEADBEEF</code>，然后使用函数<code>enable_interrupt()</code>允许中断发生，定义中断处理函数<code>trap_handler</code>，会往内存<code>0x4</code>写入数据<code>0x2022</code></p><ul><li>首先让程序执行1000个周期，读取内存<code>0x4</code>，检查数据是否为<code>0xDEADBEEF</code>，如下图，在2003ps处，得到<code>mem_debug_read_data=0xDEADBEEF</code></li></ul><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121201844023.png" alt="image-20240121201844023"></p><ul><li>随后令interrupt_flag为0x1，进入中断状态，程序会跳转执行函数<code>trap_handler</code>，在1000个周期之后，检查MSTATUS和MCAUSE寄存器的值。（测试代码是有问题的，导致无法在波形图上显示MSTATUS的值，详见改进的建议第3条）。如下图，MCAUSE的值为<code>0x80000007</code>，与预期相符</li></ul><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121203220033.png" alt="image-20240121203220033"></p><ul><li>最后检查内存0x4地址处的值，以检验中断处理函数是否被正确执行，结果是0x2022，与预期相符，如下图</li></ul><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121203357737.png" alt="image-20240121203357737"></p><h3 id="改进的建议">改进的建议</h3><ol><li></li></ol><p>网站实验任务栏Timer的代码位置写错了</p><p>Timer 的代码位于 <code>src/main/scala/riscv/peripheral/Timer.scala</code></p><p>改为<code>src/main/scala/peripheral/Timer.scala</code></p><ol start="2"><li></li></ol><p><code>ExecuteTest.scala</code>中四条指令的注释标错了</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">c.io.instruction.poke(<span class="hljs-number">0x30047073</span>L.<span class="hljs-type">U</span>) <span class="hljs-comment">// csrc mstatus,3  //csrrci</span><br>c.io.instruction.poke(<span class="hljs-number">0x30046073</span>L.<span class="hljs-type">U</span>) <span class="hljs-comment">//csrs mastatus,3  //csrrsi</span><br>c.io.instruction.poke(<span class="hljs-number">0x30051073</span>L.<span class="hljs-type">U</span>) <span class="hljs-comment">//csrw mstatus, a0 //csrrw</span><br>c.io.instruction.poke(<span class="hljs-number">0x30002573</span>L.<span class="hljs-type">U</span>) <span class="hljs-comment">//csrr a0, mstatus //csrrs</span><br></code></pre></td></tr></table></figure><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20231104213955177.png" alt="image-20231104213955177"></p><ol start="3"><li>在测试代码<code>jump to trap handler and then return</code>中，以下代码存在问题</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">c.io.csr_regs_debug_read_address.poke(<span class="hljs-number">0x300</span>.<span class="hljs-type">U</span>) <span class="hljs-comment">// CSRRegister.MSTATUS</span><br>c.io.csr_regs_debug_read_data.expect(<span class="hljs-number">0x1888</span>.<span class="hljs-type">U</span>)<br>c.io.csr_regs_debug_read_address.poke(<span class="hljs-number">0x342</span>.<span class="hljs-type">U</span>) <span class="hljs-comment">// CSRRegister.MCAUSE</span><br>c.io.csr_regs_debug_read_data.expect(<span class="hljs-number">0x80000007</span>L.<span class="hljs-type">U</span>)<br></code></pre></td></tr></table></figure><p>需要在第2行下面加一行代码<code>c.clock.step()</code>，否则在波形图上无法显示MSTATUS的值</p><h2 id="实验3-流水线">实验3-流水线</h2><h3 id="pipeline-Register">pipeline Register</h3><h4 id="填空代码-5">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(PipelineRegister)</span><br><span class="hljs-keyword">val</span> myreg = <span class="hljs-type">RegInit</span>(<span class="hljs-type">UInt</span>(width.<span class="hljs-type">W</span>),defaultValue)<br><span class="hljs-keyword">val</span> out =<span class="hljs-type">RegInit</span>(<span class="hljs-type">UInt</span>(width.<span class="hljs-type">W</span>),defaultValue)<br>when(io.flush)&#123;<br>  out := defaultValue<br>  myreg := defaultValue<br>&#125;<br>  .elsewhen(io.stall)&#123;<br>    out := myreg<br>  &#125;<br>  .otherwise&#123;<br>    myreg := io.in<br>    out := io.in<br>  &#125;<br>io.out := out  <span class="hljs-comment">//在最后一步才给io.out赋值，是为了防止出现组合逻辑环路导致sbt &quot;testOnly riscv.ThreeStageCPUTest&quot;无法通过（sbt &quot;testOnly riscv.PipelineRegisterTest&quot;可以通过）</span><br><span class="hljs-comment">//踩了很多次坑猜测出来的，可能是因为如果在前面的条件判断中就给io.out赋值，硬件就不会理会后面代码对io.out的再次赋值</span><br><span class="hljs-comment">// Lab3(PipelineRegister) End</span><br></code></pre></td></tr></table></figure><h4 id="测试用例-8">测试用例</h4><p>进行1000次循环，每次循环随机决定是阻塞还是复位还是正常</p><ul><li>阻塞的时候<code>stall=true</code>，期望输出为上次输入的值</li><li>复位的时候<code>flush=true</code>，期望输出<code>default value</code></li><li>正常情况下输出<code>in</code></li></ul><h4 id="波形图-6">波形图</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116085436940.png" alt="image-20240116085436940"></p><p>该测试的波形图很长，故只截取一段分析</p><ul><li>319ps, <code>io_flush=1</code>，所以<code>io_out=4ACD92E8H</code>，为随机生成的default_value</li><li>321ps, <code>io_stall=1</code>,  所以<code>io_out</code>保持不变</li><li>323ps, <code>io_flush=io_stall=0</code>, <code>io_out=io_in=1BAC194DH</code></li></ul><h3 id="ThreeStageCPU">ThreeStageCPU</h3><h4 id="填空代码-6">填空代码</h4><p><code>Control.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Flush)</span><br><span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span>&#123;<br>  <span class="hljs-keyword">val</span> <span class="hljs-type">JumpFlag</span> = <span class="hljs-type">Input</span>(<span class="hljs-type">Bool</span>())<br>  <span class="hljs-keyword">val</span> <span class="hljs-type">Flush</span> = <span class="hljs-type">Output</span>(<span class="hljs-type">Bool</span>())<br>&#125;)<br>io.<span class="hljs-type">Flush</span> := io.<span class="hljs-type">JumpFlag</span><br><span class="hljs-comment">// lab3 end</span><br></code></pre></td></tr></table></figure><p><code>CPU.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Flush)</span><br>ctrl.io.<span class="hljs-type">JumpFlag</span> := ex.io.if_jump_flag<br>if2id.io.flush := ctrl.io.<span class="hljs-type">Flush</span><br>id2ex.io.flush := ctrl.io.<span class="hljs-type">Flush</span><br><span class="hljs-comment">// Lab3(Flush) End</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图-lab4ThreeStageCPU">测试用例和波形图(lab4ThreeStageCPU)</h4><p>前三个测试的测试用例和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><h5 id="solve-control-hazards">solve control hazards</h5><p>这个测试用例检验了寄存器和内存存数,取数的能力</p><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240116094157242.png" alt="image-20240116094157242"></p><p>2005ps的时候(程序已经运行结束), 1号寄存器的值为<code>1AH</code>即26, 与预期相符</p><p>读取内存地址为4的空间, 结果为<code>1H</code>, 符合预期</p><p>读取内存地址为8的空间, 结果为<code>3H</code>, 符合预期</p><h3 id="FiveStageCPUStall">FiveStageCPUStall</h3><h4 id="填空代码-7">填空代码</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Stall)</span><br>io.if_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.id_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.pc_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.if_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>when(io.jump_flag)&#123;<br>  io.if_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.id_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;.elsewhen((io.reg_write_enable_ex &amp;&amp; (io.rd_ex === io.rs1_id || io.rd_ex === io.rs2_id) &amp;&amp; io.rd_ex =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br>|| (io.reg_write_enable_mem &amp;&amp; (io.rd_mem === io.rs1_id || io.rd_mem === io.rs2_id) &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)<br>)&#123;<br>  io.id_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.pc_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.if_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;<br><span class="hljs-comment">// Lab3(Stall) End</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图-3">测试用例和波形图</h4><p>前三个测试的测试用例和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>第四个测试的测试用例和波形图和lab3的ThreeStageCPU的第四个波形图相同，这里不再重复分析，<a href="#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%92%8C%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab4ThreeStageCPU)">点击跳转</a></p><h3 id="FiveStageCPUForward">FiveStageCPUForward</h3><h4 id="填空代码-8">填空代码</h4><p><code>control.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Forward)</span><br><span class="hljs-comment">//我们用一个控制单元来处理流水线的阻塞和清空，模块接口已经定义在这里</span><br>io.if_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.id_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.pc_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.if_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>when(io.jump_flag)&#123;<br>  io.if_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.id_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;.elsewhen(io.memory_read_enable_ex &amp;&amp; io.rd_ex =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; (io.rd_ex === io.rs1_id || io.rd_ex === io.rs2_id))&#123;<br>  io.id_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.pc_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.if_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;<br><span class="hljs-comment">// Lab3(Forward) End</span><br></code></pre></td></tr></table></figure><p><code>Forwarding.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Forward)</span><br>  <span class="hljs-comment">//用一个旁路单元来检测数据冒险并发出旁路控制信号，模块接口已经定义在这里</span><br>when(io.reg_write_enable_mem &amp;&amp; io.rs1_ex === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)&#123;<br>    io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>  &#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs1_ex === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)&#123;<br>    io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>  &#125;.otherwise&#123;<br>    io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>  &#125;<br>  when(io.reg_write_enable_mem &amp;&amp; io.rs2_ex === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)&#123;<br>    io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>  &#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs2_ex === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)&#123;<br>    io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>  &#125;.otherwise&#123;<br>    io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>  &#125;<br></code></pre></td></tr></table></figure><p><code>Execute.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Forward)</span><br><span class="hljs-comment">//在执行单元中根据旁路单元的控制信号使用对应的旁路数据</span><br>  <span class="hljs-keyword">val</span> reg1_data = <span class="hljs-type">Mux</span>(io.reg1_forward === <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span>, io.forward_from_mem,<br>    <span class="hljs-type">Mux</span>(io.reg1_forward === <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span>,io.forward_from_wb,io.reg1_data)<br>  )<br>  <span class="hljs-keyword">val</span> reg2_data = <span class="hljs-type">Mux</span>(io.reg2_forward === <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span>,io.forward_from_mem,<br>    <span class="hljs-type">Mux</span>(io.reg2_forward === <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span>,io.forward_from_wb,io.reg2_data)<br>  )<br>  <span class="hljs-comment">// Lab3(Forward) End</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图-4">测试用例和波形图</h4><p>前三个测试的测试用例和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>第四个测试的测试用例和波形图和lab3的ThreeStageCPU的第四个波形图相同，这里不再重复分析，<a href="#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%92%8C%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab4ThreeStageCPU)">点击跳转</a></p><h3 id="FiveStageCPUFinal">FiveStageCPUFinal</h3><h4 id="自制数据冒险的指令序列样例">自制数据冒险的指令序列样例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000: add x1, x0, x0<br>0004: sub x2, x0, x1<br>0008: and x1, x1, x2<br>000C: jalr x4, x1, 0<br>0010: or x5, x3, x4<br></code></pre></td></tr></table></figure><table><thead><tr><th>时钟周期</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>IF</td><td>add</td><td>sub</td><td>and</td><td>jalr</td><td>or</td><td>or</td><td>xor</td><td></td><td></td><td></td><td></td></tr><tr><td>ID</td><td></td><td>add</td><td>sub</td><td>and</td><td>jalr</td><td>jalr</td><td>nop</td><td>xor</td><td></td><td></td><td></td></tr><tr><td>EX</td><td></td><td></td><td>add</td><td>sub</td><td>and</td><td><em>nop</em></td><td>jalr</td><td>nop</td><td>xor</td><td></td><td></td></tr><tr><td>EX2MEM</td><td></td><td></td><td></td><td>add:x1</td><td>sub:x2</td><td>and:x1</td><td></td><td>jalr:x4</td><td></td><td>xor:x6</td><td></td></tr><tr><td>MEM</td><td></td><td></td><td></td><td>add</td><td>sub</td><td>and</td><td>nop</td><td>jalr</td><td>nop</td><td>xor</td><td></td></tr><tr><td>MEM2WB</td><td></td><td></td><td></td><td></td><td>add:x1</td><td>sub:x2</td><td>and:x1</td><td></td><td>jalr:x4</td><td></td><td>xor:x6</td></tr><tr><td>WB</td><td></td><td></td><td></td><td></td><td>add</td><td>sub</td><td>and</td><td>nop</td><td>jalr</td><td>nop</td><td>xor</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0000: lw x1, 4(x1)<br>0004: jalr x4, x1, 0<br>0008: add x1, x4, x1<br></code></pre></td></tr></table></figure><table><thead><tr><th>时钟周期</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>IF</td><td>lw</td><td>jalr</td><td>add</td><td>add</td><td>add</td><td>xor</td><td></td><td></td></tr><tr><td>ID</td><td></td><td>lw</td><td>jalr</td><td>jalr</td><td>jalr</td><td>nop</td><td>xor</td><td></td></tr><tr><td>EX</td><td></td><td></td><td>lw</td><td>nop</td><td>nop</td><td>jalr</td><td>nop</td><td>xor</td></tr><tr><td>EX2MEM</td><td></td><td></td><td></td><td></td><td></td><td></td><td>jalr:x4</td><td></td></tr><tr><td>MEM</td><td></td><td></td><td></td><td>lw</td><td>nop</td><td>nop</td><td>jalr</td><td>nop</td></tr><tr><td>MEM2WB</td><td></td><td></td><td></td><td></td><td>lw:x1</td><td></td><td></td><td>jalr:x4</td></tr><tr><td>WB</td><td></td><td></td><td></td><td></td><td>lw</td><td>nop</td><td>nop</td><td>jalr</td></tr></tbody></table><h4 id="填空代码-9">填空代码</h4><p><code>InstructionDecode.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs scala">  <span class="hljs-comment">// Lab3(Final)</span><br><span class="hljs-comment">//  io.clint_jump_flag := io.interrupt_assert</span><br><span class="hljs-comment">//  io.clint_jump_address := io.interrupt_handler_address</span><br>  <span class="hljs-keyword">val</span> reg1_data = <span class="hljs-type">MuxLookup</span>(<br>    io.reg1_forward,<br>    <span class="hljs-number">0.</span><span class="hljs-type">U</span>,<br>    <span class="hljs-type">IndexedSeq</span>(<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span> -&gt; (io.reg1_data),<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span> -&gt; (io.forward_from_wb),<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span> -&gt; (io.forward_from_mem)<br>    )<br>  )<br>  <span class="hljs-keyword">val</span> reg2_data = <span class="hljs-type">MuxLookup</span>(<br>    io.reg2_forward,<br>    <span class="hljs-number">0.</span><span class="hljs-type">U</span>,<br>    <span class="hljs-type">IndexedSeq</span>(<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span> -&gt; (io.reg2_data),<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span> -&gt; (io.forward_from_wb),<br>      <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span> -&gt; (io.forward_from_mem)<br>    )<br>  )<br>  io.ctrl_jump_instruction := opcode === <span class="hljs-type">Instructions</span>.jal ||<br>    (opcode === <span class="hljs-type">Instructions</span>.jalr) ||<br>    (opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">B</span>)<br><br>  io.if_jump_flag := opcode === <span class="hljs-type">Instructions</span>.jal ||<br>    (opcode === <span class="hljs-type">Instructions</span>.jalr) ||<br>    (opcode === <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">B</span>) &amp;&amp; <span class="hljs-type">MuxLookup</span>(<br>    funct3,<br>    <span class="hljs-literal">false</span>.<span class="hljs-type">B</span>,<br>    <span class="hljs-type">IndexedSeq</span>(<br>      <span class="hljs-type">InstructionsTypeB</span>.beq -&gt; (reg1_data === reg2_data),<br>      <span class="hljs-type">InstructionsTypeB</span>.bne -&gt; (reg1_data =/= reg2_data),<br>      <span class="hljs-type">InstructionsTypeB</span>.blt -&gt; (reg1_data.asSInt &lt; reg2_data.asSInt),<br>      <span class="hljs-type">InstructionsTypeB</span>.bge -&gt; (reg1_data.asSInt &gt;= reg2_data.asSInt),<br>      <span class="hljs-type">InstructionsTypeB</span>.bltu -&gt; (reg1_data.asUInt &lt; reg2_data.asUInt),<br>      <span class="hljs-type">InstructionsTypeB</span>.bgeu -&gt; (reg1_data.asUInt &gt;= reg2_data.asUInt)<br>    )<br>  ) || io.interrupt_assert<br><br>  io.if_jump_address := <span class="hljs-type">Mux</span>(io.interrupt_assert, io.interrupt_handler_address, <span class="hljs-type">MuxLookup</span>(<br>    opcode,<br>    <span class="hljs-number">0.</span><span class="hljs-type">U</span>,<br>    <span class="hljs-type">IndexedSeq</span>(<br>      <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">B</span> -&gt; (io.instruction_address + io.ex_immediate),<br>      <span class="hljs-type">Instructions</span>.jal -&gt; (io.instruction_address + io.ex_immediate),<br>      <span class="hljs-type">Instructions</span>.jalr -&gt; (reg1_data + io.ex_immediate)<br>    )<br>  ))<br>  io.clint_jump_flag := io.ctrl_jump_instruction<br>  io.clint_jump_address := <span class="hljs-type">MuxLookup</span>(<br>    opcode,<br>    <span class="hljs-number">0.</span><span class="hljs-type">U</span>,<br>    <span class="hljs-type">IndexedSeq</span>(<br>      <span class="hljs-type">InstructionTypes</span>.<span class="hljs-type">B</span> -&gt; (io.instruction_address + io.ex_immediate),<br>      <span class="hljs-type">Instructions</span>.jal -&gt; (io.instruction_address + io.ex_immediate),<br>      <span class="hljs-type">Instructions</span>.jalr -&gt; (reg1_data + io.ex_immediate)<br>    )<br>  )<br>  <span class="hljs-comment">// Lab3(Final) End</span><br></code></pre></td></tr></table></figure><p><code>control.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Final)</span><br>io.if_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.id_flush := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.pc_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>io.if_stall := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>when(((io.jump_instruction_id || io.memory_read_enable_ex) &amp;&amp; io.rd_ex =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; (io.rd_ex === io.rs1_id || io.rd_ex === io.rs2_id))||<br>  (io.jump_instruction_id &amp;&amp; io.memory_read_enable_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span> &amp;&amp; (io.rd_mem === io.rs1_id || io.rd_mem === io.rs2_id))) &#123;<br>  io.id_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.pc_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  io.if_stall := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;.elsewhen(io.jump_flag)&#123;<br>  io.if_flush := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>&#125;<br><span class="hljs-comment">// Lab3(Final) End</span><br></code></pre></td></tr></table></figure><p><code>Forwarding.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// Lab3(Final)</span><br><span class="hljs-comment">//io.reg1_forward_ex</span><br>when(io.reg_write_enable_mem &amp;&amp; io.rs1_ex === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>&#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs1_ex === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>&#125;.otherwise &#123;<br>  io.reg1_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>&#125;<br><span class="hljs-comment">//io.reg2_forward_ex</span><br>when(io.reg_write_enable_mem &amp;&amp; io.rs2_ex === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>&#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs2_ex === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>&#125;.otherwise &#123;<br>  io.reg2_forward_ex := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>&#125;<br><span class="hljs-comment">//io.reg1_forward_id</span><br>when(io.reg_write_enable_mem &amp;&amp; io.rs1_id === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>)&#123;<br>  io.reg1_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>&#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs1_id === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg1_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>&#125;.otherwise &#123;<br>  io.reg1_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>&#125;<br><span class="hljs-comment">//io.reg2_forward_id</span><br>when(io.reg_write_enable_mem &amp;&amp; io.rs2_id === io.rd_mem &amp;&amp; io.rd_mem =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg2_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromMEM</span><br>&#125;.elsewhen(io.reg_write_enable_wb &amp;&amp; io.rs2_id === io.rd_wb &amp;&amp; io.rd_wb =/= <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>  io.reg2_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">ForwardFromWB</span><br>&#125;.otherwise &#123;<br>  io.reg2_forward_id := <span class="hljs-type">ForwardingType</span>.<span class="hljs-type">NoForward</span><br>&#125;<br><span class="hljs-comment">// Lab3(Final) End</span><br></code></pre></td></tr></table></figure><h4 id="测试用例和波形图-5">测试用例和波形图</h4><p>前三个测试的测试用例和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>第四个测试的测试用例和波形图和lab3的ThreeStageCPU的第四个波形图相同，这里不再重复分析，<a href="#%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E5%92%8C%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab4ThreeStageCPU)">点击跳转</a></p><h3 id="改进的建议-2">改进的建议</h3><p>“扩展：使用旁路减少阻塞”  的表格有问题</p><table><thead><tr><th>时钟周期</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>IF</td><td>addi</td><td>sub</td><td>and</td><td>lw</td><td>or</td><td></td><td></td><td></td></tr><tr><td>ID</td><td></td><td>addi</td><td>sub</td><td>and</td><td>lw</td><td>or</td><td>==or==</td><td></td></tr><tr><td>EX</td><td></td><td></td><td>addi</td><td>sub</td><td>and</td><td>lw</td><td>==nop==</td><td>or</td></tr><tr><td>EX2MEM</td><td></td><td></td><td></td><td>addi:x1</td><td>sub:x2</td><td>and:x2</td><td></td><td></td></tr><tr><td>MEM</td><td></td><td></td><td></td><td>addi</td><td>sub</td><td>and</td><td>lw</td><td>nop</td></tr><tr><td>MEM2WB</td><td></td><td></td><td></td><td></td><td>addi:x1</td><td>sub:x2</td><td>and:x2</td><td>lw:x2</td></tr><tr><td>WB</td><td></td><td></td><td></td><td></td><td>addi</td><td>sub</td><td>and</td><td>lw</td></tr></tbody></table><p>区别在第6个时钟</p><p>如果按照网站上的表格，在<code>control.scala</code>必须使用<code>id_stall</code>，实际上，<code>control.scala</code>中只有<code>if_flush</code>,<code>id_flush</code>,<code>pc_stall</code>和<code>if_stall</code></p><p>使用本改进的表格，只需要使用<code>pc_stall</code>，<code>if_stall</code>和<code>id_flush</code>使<code>or</code>暂停一个周期</p><h2 id="实验4-总线">实验4-总线</h2><h3 id="填空代码-10">填空代码</h3><p>Master</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//lab4(BUS)</span><br>io.channels.read_address_channel.<span class="hljs-type">ARADDR</span> := addr<br>io.channels.write_address_channel.<span class="hljs-type">AWADDR</span> := addr<br>when(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span>) &#123; <span class="hljs-comment">//空闲</span><br>  read_valid := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  write_valid := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">ARVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">RREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">AWVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">WVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">BREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  when(io.bundle.read) &#123;<br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadAddr</span><br>    addr := io.bundle.address<br>    io.channels.read_address_channel.<span class="hljs-type">ARADDR</span> := io.bundle.address<br>  &#125;.elsewhen(io.bundle.write) &#123;<br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteAddr</span><br>    write_strobe := io.bundle.write_strobe<br>    addr := io.bundle.address<br>    write_data := io.bundle.write_data<br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadAddr</span>) &#123; <span class="hljs-comment">//发送读地址</span><br>  io.channels.read_address_channel.<span class="hljs-type">ARADDR</span> := addr<br>  <span class="hljs-type">ARVALID</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.read_address_channel.<span class="hljs-type">ARREADY</span>) &#123;<br>    io.channels.read_address_channel.<span class="hljs-type">ARADDR</span> := addr<br>    <span class="hljs-type">ARVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadData</span><br>    <span class="hljs-comment">//RREADY := true.B</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadData</span>) &#123; <span class="hljs-comment">//接收读数据</span><br>  when(io.channels.read_data_channel.<span class="hljs-type">RVALID</span>) &#123;<br>    <span class="hljs-type">RREADY</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>    read_data := io.channels.read_data_channel.<span class="hljs-type">RDATA</span><br>    io.bundle.read_data := io.channels.read_data_channel.<span class="hljs-type">RDATA</span><br>    read_valid := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteAddr</span>) &#123; <span class="hljs-comment">//发送写地址</span><br>  io.channels.write_address_channel.<span class="hljs-type">AWADDR</span> := addr<br>  <span class="hljs-type">AWVALID</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.write_address_channel.<span class="hljs-type">AWREADY</span>) &#123;<br>    <span class="hljs-type">AWVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteData</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteData</span>) &#123; <span class="hljs-comment">//发送写数据</span><br>  io.channels.write_data_channel.<span class="hljs-type">WDATA</span> := io.bundle.write_data<br>  <span class="hljs-type">WVALID</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.write_data_channel.<span class="hljs-type">WREADY</span>) &#123;<br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteResp</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteResp</span>) &#123; <span class="hljs-comment">//接收写回复</span><br>  <span class="hljs-type">BREADY</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.write_response_channel.<span class="hljs-type">BVALID</span>) &#123;<br>    <span class="hljs-type">WVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    write_valid := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//lab4(BUS)end</span><br></code></pre></td></tr></table></figure><p>Slave</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">//lab4(BUS)</span><br>when(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span>) &#123; <span class="hljs-comment">//空闲</span><br>  read := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  write := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">ARREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">RVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">AWREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">WREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  <span class="hljs-type">BVALID</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  when(io.channels.read_address_channel.<span class="hljs-type">ARVALID</span>) &#123; <span class="hljs-comment">//读地址有效</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadAddr</span><br>    addr := io.channels.read_address_channel.<span class="hljs-type">ARADDR</span><br>    <span class="hljs-comment">//ARREADY := true.B //告诉主机读准备//改</span><br>  &#125;.elsewhen(io.channels.write_address_channel.<span class="hljs-type">AWVALID</span>) &#123; <span class="hljs-comment">//写地址有效</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteAddr</span><br>    <span class="hljs-comment">//      AWREADY := true.B</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadAddr</span>) &#123; <span class="hljs-comment">//接收读地址</span><br>  read := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.read_address_channel.<span class="hljs-type">ARREADY</span>) &#123;<br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadData</span><br>  &#125;<br>  <span class="hljs-type">ARREADY</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.read_data_channel.<span class="hljs-type">RREADY</span>) &#123;<br>    <span class="hljs-type">ARREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteAddr</span>) &#123; <span class="hljs-comment">//接收写地址</span><br>  addr := io.channels.write_address_channel.<span class="hljs-type">AWADDR</span><br>  <span class="hljs-type">AWREADY</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteData</span><br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">ReadData</span>) &#123; <span class="hljs-comment">//发送读数据</span><br>  when(io.bundle.read_valid) &#123;<br>    io.channels.read_data_channel.<span class="hljs-type">RDATA</span> := io.bundle.read_data<br>    <span class="hljs-type">RVALID</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>    when(io.channels.read_data_channel.<span class="hljs-type">RREADY</span>) &#123;<br>      state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span><br>      <span class="hljs-type">ARREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    &#125;<br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteData</span>) &#123; <span class="hljs-comment">//接收写数据</span><br>  <span class="hljs-type">WREADY</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.write_data_channel.<span class="hljs-type">WVALID</span>) &#123;<br>    <span class="hljs-type">AWREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    write_data := io.channels.write_data_channel.<span class="hljs-type">WDATA</span><br>    write_strobe := io.channels.write_data_channel.<span class="hljs-type">WSTRB</span>.asBools<br>    write := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteResp</span><br>  &#125;<br>&#125;.elsewhen(state === <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">WriteResp</span>) &#123; <span class="hljs-comment">//发送写回复</span><br>  <span class="hljs-type">BVALID</span> := <span class="hljs-literal">true</span>.<span class="hljs-type">B</span><br>  when(io.channels.write_response_channel.<span class="hljs-type">BREADY</span>) &#123;<br>    <span class="hljs-type">WREADY</span> := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>    state := <span class="hljs-type">AXI4LiteStates</span>.<span class="hljs-type">Idle</span><br>    write := <span class="hljs-literal">false</span>.<span class="hljs-type">B</span><br>  &#125;<br>&#125;<br><span class="hljs-comment">//lab4(BUS)</span><br></code></pre></td></tr></table></figure><h3 id="测试用例和波形图-6">测试用例和波形图</h3><h4 id="Timer-read-and-write-the-limit">Timer read and write the limit</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121162737649.png" alt="image-20240121162737649"></p><p>该测试用例往地址0x4先写后读，检验了读写数据的正确性和总线运行占用时钟周期数的正确性</p><p>首先测试写操作的正确性</p><ul><li>令写使能为true，address设置为0x4，写数据为0x990315，一个时钟周期之后（4ps)，关闭写使能、写数据和地址清零，观察到busy变为true，符合预期</li><li>8个时钟周期之后（20ps），观察到busy变为false，write_valid变为true，io_limit变为0x990315，说明数据成功写到从设备中，并且主设备的状态回到idle，符合预期</li></ul><p>然后测试读操作的正确性</p><ul><li>从20ps开始，设置读使能为true，读地址为0x4，一个时钟周期之后（22ps），观察到busy变为true，符合预期</li><li>再6个时钟之后（33ps）,观察到busy变为false，read_valid变为true，read_data变为0x990315，说明数据被成功读取，并且主设备的状态回到idle，数据的内容是正确的，和先前往0x4写的内容一致，符合预期</li></ul><h4 id="Memory-perform-read-and-write">Memory perform read and write</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121172426698.png" alt="image-20240121172426698"></p><p>首先测试写操作的正确性</p><ul><li>令写使能为true，address设置为0x4，write_strobe设置为0xF，写数据为0xDEADBEEF，一个时钟周期之后（4ps)，关闭写使能、写数据和地址清零，观察到busy变为true，符合预期</li><li>8个时钟周期之后（20ps），观察到busy变为false，write_valid变为true，说明写数据执行完毕，并且主设备的状态回到idle，符合预期</li></ul><p>然后测试读操作的正确性</p><ul><li>从20ps开始，设置读使能为true，读地址为0x4，一个时钟周期之后（22ps），观察到busy变为true，符合预期</li><li>再6个时钟之后（33ps）,观察到busy变为false，read_valid变为true，read_data变为0xDEADBEEF，说明数据被成功读取，并且主设备的状态回到idle，数据的内容是正确的，和先前往0x4写的内容一致，符合预期</li></ul><h4 id="ROMLoader-load-program">ROMLoader load program</h4><p><img src="./%E8%AE%A1%E7%BB%84%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A.assets/image-20240121174710643.png" alt="image-20240121174710643"></p><p>总线写一次数据需要9个时钟周期，读一次数据需要7个时钟周期</p><p>该测试用例测试总线从ROM中读取数据写到主存的功能</p><ul><li>首先设定load_address为0x100，load_start为true，1个时钟后(4ps)，令load_start为false，rom_address为0x0，说明现在正在读取ROM地址为0x0的数据，符合预期</li><li>8个时钟周期后(20ps)，bundle_write变为true，bundle.address变为0x100，说明现在正在往主存0x100写数据</li><li>4个时钟周期后(28ps)，rom_address为0x1，说明当前正在ROM的下一个地址单元读取数据</li><li>7个时钟周期后(42ps)，rom_address为0x1，bundle.write为true，bundle.address变为0x104，表明当前正在往主存0x104写数据</li><li>1个周期后(44ps)，检查rom_adress是否保持为0x1，3个周期后(49ps)，读取数据结束，检查load_finished为true</li></ul><h4 id="threeStageCPUTest">threeStageCPUTest</h4><p>第1、2、4个测试和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>第3个测试用例代码存在问题：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scala">c.io.regs_debug_read_address.poke(<span class="hljs-number">5.</span><span class="hljs-type">U</span>)<br>c.io.regs_debug_read_data.expect(<span class="hljs-number">100000000.</span><span class="hljs-type">U</span>)<br>c.io.regs_debug_read_address.poke(<span class="hljs-number">6.</span><span class="hljs-type">U</span>)<br>c.io.regs_debug_read_data.expect(<span class="hljs-number">0xBEEF</span>.<span class="hljs-type">U</span>)<br></code></pre></td></tr></table></figure><p>poke和expect缺少c.clock.step()语句，在波形图中无法从regs_debug_read_data得到期望数据</p><h4 id="fiveStageCPUTest">fiveStageCPUTest</h4><p>第1、2、4个测试和波形图和lab1的CPUTest的三个波形图相同，这里不再重复分析，<a href="#%E6%B3%A2%E5%BD%A2%E5%9B%BE(lab1CPUTest)">点击跳转</a></p><p>第三个测试用例同threeStageCPUTest</p>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pytorch</title>
    <link href="/2024/01/30/language/pytorch/index/"/>
    <url>/2024/01/30/language/pytorch/index/</url>
    
    <content type="html"><![CDATA[<h1>pytorch教程</h1><p>阅读该教程，您需要python基础的预备知识</p><p><a href="https://www.bilibili.com/video/BV1hE411t7RN?vd_source=0746909e8642dc821f4dc86699071129">参考视频</a></p><h2 id="conda管理环境">conda管理环境</h2><p>打开anaconda prompt</p><p>创建环境</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">conda create -n pytorch <span class="hljs-keyword">python</span>=<span class="hljs-number">3.11</span><br>       创建      环境名称  <span class="hljs-keyword">python</span>版本号<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs ruby">(base) <span class="hljs-symbol">C:</span>\<span class="hljs-title class_">Users</span>\<span class="hljs-variable constant_">CJL</span>&gt;conda create -n pytorch python=<span class="hljs-number">3.11</span><br><span class="hljs-title class_">Collecting</span> package metadata (current_repodata.json): done<br><span class="hljs-title class_">Solving</span> <span class="hljs-symbol">environment:</span> done<br><br><br>==&gt; <span class="hljs-variable constant_">WARNING</span>: A newer version of conda exists. &lt;==<br>  current <span class="hljs-symbol">version:</span> <span class="hljs-number">23.7</span>.<span class="hljs-number">4</span><br>  latest <span class="hljs-symbol">version:</span> <span class="hljs-number">23.9</span>.<span class="hljs-number">0</span><br><br><span class="hljs-title class_">Please</span> update conda by running<br><br>    <span class="hljs-variable">$ </span>conda update -n base -c defaults conda<br><br><span class="hljs-title class_">Or</span> to minimize the number of packages updated during conda update use<br><br>     conda install conda=<span class="hljs-number">23.9</span>.<span class="hljs-number">0</span><br><br><br><br><span class="hljs-comment">## Package Plan ##</span><br><br>  environment <span class="hljs-symbol">location:</span> <span class="hljs-symbol">D:</span>\<span class="hljs-variable constant_">AI</span>\anaconda\envs\pytorch<br><br>  added / updated <span class="hljs-symbol">specs:</span><br>    - python=<span class="hljs-number">3.11</span><br><br><br><span class="hljs-title class_">The</span> following packages will be <span class="hljs-symbol">downloaded:</span><br><br>    package                    |<span class="hljs-params">            build</span><br><span class="hljs-params">    ---------------------------</span>|-----------------<br>    openssl-<span class="hljs-number">3.0</span>.<span class="hljs-number">11</span>             |<span class="hljs-params">       h2bbff1b_2         7.4 MB</span><br><span class="hljs-params">    wheel-0.41.2               </span>|  py311haa95532_0         <span class="hljs-number">163</span> <span class="hljs-variable constant_">KB</span><br>    ------------------------------------------------------------<br>                                           <span class="hljs-title class_">Total</span>:         <span class="hljs-number">7.6</span> <span class="hljs-variable constant_">MB</span><br><br><span class="hljs-title class_">The</span> following <span class="hljs-variable constant_">NEW</span> packages will be <span class="hljs-variable constant_">INSTALLED</span>:<br><br>  bzip2              pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:bzip2-</span><span class="hljs-number">1.0</span>.<span class="hljs-number">8</span>-he774522_0<br>  ca-certificates    pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:ca-certificates-</span><span class="hljs-number">2023.08</span>.<span class="hljs-number">22</span>-haa95532_0<br>  libffi             pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:libffi-</span><span class="hljs-number">3.4</span>.<span class="hljs-number">4</span>-hd77b12b_0<br>  openssl            pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:openssl-</span><span class="hljs-number">3.0</span>.<span class="hljs-number">11</span>-h2bbff1b_2<br>  pip                pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:pip-</span><span class="hljs-number">23.2</span>.<span class="hljs-number">1</span>-py311haa95532_0<br>  python             pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:python-</span><span class="hljs-number">3.11</span>.<span class="hljs-number">5</span>-he1021f5_0<br>  setuptools         pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:setuptools-</span><span class="hljs-number">68.0</span>.<span class="hljs-number">0</span>-py311haa95532_0<br>  sqlite             pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:sqlite-</span><span class="hljs-number">3.41</span>.<span class="hljs-number">2</span>-h2bbff1b_0<br>  tk                 pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:tk-</span><span class="hljs-number">8.6</span>.<span class="hljs-number">12</span>-h2bbff1b_0<br>  tzdata             pkgs/main/noarch::tzdata-2023c-h04d1e81_0<br>  vc                 pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:vc-</span><span class="hljs-number">14.2</span>-h21ff451_1<br>  vs2015_runtime     pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:vs2015_runtime-</span><span class="hljs-number">14.27</span>.<span class="hljs-number">29016</span>-h5e58377_2<br>  wheel              pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:wheel-</span><span class="hljs-number">0.41</span>.<span class="hljs-number">2</span>-py311haa95532_0<br>  xz                 pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:xz-</span><span class="hljs-number">5.4</span>.<span class="hljs-number">2</span>-h8cc25b3_0<br>  zlib               pkgs/main/win-<span class="hljs-number">64</span><span class="hljs-symbol">:</span><span class="hljs-symbol">:zlib-</span><span class="hljs-number">1.2</span>.<span class="hljs-number">13</span>-h8cc25b3_0<br><br><br><span class="hljs-title class_">Proceed</span> ([y]/n)? y<br><br><br><span class="hljs-title class_">Downloading</span> <span class="hljs-keyword">and</span> <span class="hljs-title class_">Extracting</span> <span class="hljs-title class_">Packages</span><br><br><span class="hljs-title class_">Preparing</span> <span class="hljs-symbol">transaction:</span> done<br><span class="hljs-title class_">Verifying</span> <span class="hljs-symbol">transaction:</span> done<br><span class="hljs-title class_">Executing</span> <span class="hljs-symbol">transaction:</span> done<br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To activate this environment, use</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     $ conda activate pytorch</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># To deactivate an active environment, use</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#     $ conda deactivate</span><br></code></pre></td></tr></table></figure><p>打开名为pytorch的环境</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">conda <span class="hljs-built_in">activate</span> pytorch<br></code></pre></td></tr></table></figure><p>使用<code>pip list</code>查看当前安装的所有包</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">conda <span class="hljs-keyword">install</span> pytorch torchvision torchaudio cpuonly -c pytorch<br></code></pre></td></tr></table></figure><p>输入<code>jupyter notebook</code>打开jupyter</p><p>shift+enter自动执行当前语句</p><h2 id="Dataset类代码实践">Dataset类代码实践</h2><h3 id="读取文件夹中的文件列表：">读取文件夹中的文件列表：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os             <span class="hljs-comment">#python中关于系统的库</span><br>dir_path=<span class="hljs-string">&quot;D:\\AI\\doc\\TrainData\\hymenoptera_data\\hymenoptera_data\\train\\ants&quot;</span><br>imp_path_list=os.listdir(dir_path)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;路径dir_path中的文件列表为<span class="hljs-subst">&#123;imp_path_list&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">路径dir_path中的文件列表为[&#x27;<span class="hljs-number">001303</span>5.jpg&#x27;, &#x27;<span class="hljs-number">1030023514</span>_aad5c608f9.jpg&#x27;, &#x27;<span class="hljs-number">1095476100</span>_<span class="hljs-number">3906</span>d8afde.jpg&#x27;, &#x27;<span class="hljs-number">1099452230</span>_d<span class="hljs-number">1949</span>d<span class="hljs-number">3250</span>.jpg&#x27;, &#x27;<span class="hljs-number">11657082</span>7_e9c<span class="hljs-number">126745</span>d.jpg&#x27;, &#x27;<span class="hljs-number">1225872729</span>_6f<span class="hljs-number">085658</span>8f.jpg&#x27;, .....(手动加的省略号), &#x27;VietnameseAntMimicSpider.jpg&#x27;]<br></code></pre></td></tr></table></figure><h3 id="导入图片">导入图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>img_path=<span class="hljs-string">&quot;D:/AI/doc/TrainData/hymenoptera_data/hymenoptera_data/train/ants/0013035.jpg&quot;</span><br>img=Image.<span class="hljs-built_in">open</span>(img_path)<br>img.show() <span class="hljs-comment">#打开图片</span><br></code></pre></td></tr></table></figure><h3 id="实现类">实现类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> Dataset<br><span class="hljs-keyword">import</span> os             <span class="hljs-comment">#python中关于系统的库</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,root_dir,label_dir</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        构造函数</span><br><span class="hljs-string">        :param root_dir: 数据集根目录</span><br><span class="hljs-string">        :param label_dir: 图片的路径（相对根目录）</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        self.root_dir=root_dir<br>        self.label_dir=label_dir<br>        self.path=os.path.join(self.root_dir,self.label_dir)  <span class="hljs-comment">#组合两个路径</span><br>        self.img_path=os.listdir(self.path)   <span class="hljs-comment">#获取路径中的文件列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        img_name=self.img_path[idx]<br>        img_item_path=os.path.join(self.root_dir,self.label_dir,img_name)<br>        img=Image.<span class="hljs-built_in">open</span>(img_item_path)<span class="hljs-comment"># 读取图片</span><br>        label=self.label_dir<br>        <span class="hljs-keyword">return</span> img,label<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        返回文件列表中的文件个数</span><br><span class="hljs-string">        :return: 文件个数</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.img_path)<br><br><span class="hljs-comment"># 蚂蚁</span><br>root_dir=<span class="hljs-string">&quot;D:\\AI\\doc&quot;</span><br>label_dir=<span class="hljs-string">&quot;TrainData\\hymenoptera_data\\hymenoptera_data\\train\\ants&quot;</span><br>ants_dataset=MyData(root_dir,label_dir)<br>img,path=ants_dataset[<span class="hljs-number">0</span>]<br>img.show()  <span class="hljs-comment"># 会打开图片</span><br><span class="hljs-built_in">print</span>(path)<br><br><span class="hljs-comment">#蜜蜂</span><br>bees_label_dir=<span class="hljs-string">&quot;TrainData\\hymenoptera_data\\hymenoptera_data\\train\\bees&quot;</span><br>bees_dataset=MyData(root_dir,bees_label_dir)<br>img,path=bees_dataset[<span class="hljs-number">0</span>]<br>img.show()  <span class="hljs-comment"># 会打开图片</span><br><span class="hljs-built_in">print</span>(path)<br><br><span class="hljs-comment">#数据集拼接</span><br>train_dataset=ants_dataset+bees_dataset<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;蚂蚁数据集长度<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(ants_dataset)&#125;</span>,蜜蜂数据集长度<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(bees_dataset)&#125;</span>,拼接后长度<span class="hljs-subst">&#123;<span class="hljs-built_in">len</span>(train_dataset)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">TrainData\hymenopter<span class="hljs-built_in">a_data</span>\hymenopter<span class="hljs-built_in">a_data</span>\train\ants<br>TrainData\hymenopter<span class="hljs-built_in">a_data</span>\hymenopter<span class="hljs-built_in">a_data</span>\train\bees<br>蚂蚁数据集长度<span class="hljs-number">124</span>,蜜蜂数据集长度<span class="hljs-number">121</span>,拼接后长度<span class="hljs-number">245</span><br></code></pre></td></tr></table></figure><h2 id="tensorboard的使用">tensorboard的使用</h2><h3 id="基础使用">基础使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer=SummaryWriter(<span class="hljs-string">&quot;logs&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    writer.add_scalar(<span class="hljs-string">&quot;y=x^2&quot;</span>,i**<span class="hljs-number">2</span>,i)<br>writer.close()<br></code></pre></td></tr></table></figure><p>在控制台输入<code>tensorboard --logdir=20231011/logs --port=6007</code>查看绘图结果</p><h3 id="导入图片-2">导入图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">image_path=<span class="hljs-string">&quot;D:\\AI\\doc\\TrainData\\data\\train\\ants_image\\0013035.jpg&quot;</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-comment"># 导入图片</span><br>img=Image.<span class="hljs-built_in">open</span>(image_path)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img))<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 将图片的类型转化为numpy，以便使用下面的函数</span><br>img_array=np.array(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer=SummaryWriter(<span class="hljs-string">&quot;ants1&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;test01&quot;</span>,img_array,<span class="hljs-number">1</span>,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)  <span class="hljs-comment"># 1表示step</span><br><span class="hljs-comment"># 打开第二张图</span><br>image_path=<span class="hljs-string">&quot;D:\\AI\\doc\\TrainData\\data\\train\\ants_image\\6240329_72c01e663e.jpg&quot;</span><br>img=Image.<span class="hljs-built_in">open</span>(image_path)<br>img_array=np.array(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(img_array))<br><span class="hljs-built_in">print</span>(img_array.shape)<br>writer.add_image(<span class="hljs-string">&quot;test01&quot;</span>,img_array,<span class="hljs-number">2</span>,dataformats=<span class="hljs-string">&#x27;HWC&#x27;</span>)  <span class="hljs-comment"># 2表示step</span><br><br>writer.close()<br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;PIL.JpegImagePlugin.JpegImageFile&#x27;</span>&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;numpy.ndarray&#x27;</span>&gt;<br>(<span class="hljs-number">512</span>, <span class="hljs-number">768</span>, <span class="hljs-number">3</span>)    <span class="hljs-meta">#注：(H,W,C)(高度，宽度，通道),3通道在最后一位</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;numpy.ndarray&#x27;</span>&gt;<br>(<span class="hljs-number">369</span>, <span class="hljs-number">500</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>在console中输入<code>tensorboard --logdir=20231011/ants1 --port=6007</code>，打开网站，滑动滑块，可以看见两张不同的图像</p><h2 id="transforms的使用">transforms的使用</h2><h3 id="基础使用-2">基础使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br>image_path=<span class="hljs-string">&quot;D:\\AI\\doc\\TrainData\\data\\train\\ants_image\\0013035.jpg&quot;</span><br>img=Image.<span class="hljs-built_in">open</span>(image_path)<br><br>tensor_trans=transforms.ToTensor() <span class="hljs-comment"># 定义一个转换的方法</span><br>tensor_img=tensor_trans(img)  <span class="hljs-comment">#  使用转换的方法处理img</span><br><br><span class="hljs-built_in">print</span>(tensor_img)<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs inform7">tensor(<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[0.3137, 0.3137, 0.3137,  ..., 0.3176, 0.3098, 0.2980]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.3176, 0.3176, 0.3176,  ..., 0.3176, 0.3098, 0.2980]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.3216, 0.3216, 0.3216,  ..., 0.3137, 0.3098, 0.3020]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         ...,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.3412, 0.3412, 0.3373,  ..., 0.1725, 0.3725, 0.3529]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.3412, 0.3412, 0.3373,  ..., 0.3294, 0.3529, 0.3294]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.3412, 0.3412, 0.3373,  ..., 0.3098, 0.3059, 0.3294]</span>]</span>,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        <span class="hljs-comment">[<span class="hljs-comment">[0.5922, 0.5922, 0.5922,  ..., 0.5961, 0.5882, 0.5765]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.5961, 0.5961, 0.5961,  ..., 0.5961, 0.5882, 0.5765]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.6000, 0.6000, 0.6000,  ..., 0.5922, 0.5882, 0.5804]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         ...,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.6275, 0.6275, 0.6235,  ..., 0.3608, 0.6196, 0.6157]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.6275, 0.6275, 0.6235,  ..., 0.5765, 0.6275, 0.5961]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.6275, 0.6275, 0.6235,  ..., 0.6275, 0.6235, 0.6314]</span>]</span>,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        <span class="hljs-comment">[<span class="hljs-comment">[0.9137, 0.9137, 0.9137,  ..., 0.9176, 0.9098, 0.8980]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.9176, 0.9176, 0.9176,  ..., 0.9176, 0.9098, 0.8980]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.9216, 0.9216, 0.9216,  ..., 0.9137, 0.9098, 0.9020]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         ...,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.9294, 0.9294, 0.9255,  ..., 0.5529, 0.9216, 0.8941]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.9294, 0.9294, 0.9255,  ..., 0.8863, 1.0000, 0.9137]</span>,</span></span><br><span class="hljs-comment"><span class="hljs-comment">         <span class="hljs-comment">[0.9294, 0.9294, 0.9255,  ..., 0.9490, 0.9804, 0.9137]</span>]</span>]</span>)<br></code></pre></td></tr></table></figure><p>tensor数据类型包装了 神经网络所需理论基础的一些参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br>image_path=<span class="hljs-string">&quot;D:\\AI\\doc\\TrainData\\data\\train\\ants_image\\0013035.jpg&quot;</span><br>img=Image.<span class="hljs-built_in">open</span>(image_path)<br><br>tensor_trans=transforms.ToTensor() <span class="hljs-comment"># 定义一个转换的方法</span><br>tensor_img=tensor_trans(img)  <span class="hljs-comment">#  使用转换的方法处理img</span><br><span class="hljs-comment"># 白嫖上一段代码来</span><br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer=SummaryWriter(<span class="hljs-string">&quot;test02&quot;</span>)<br>writer.add_image(<span class="hljs-string">&quot;Tensor.jpg&quot;</span>,tensor_img)<br>writer.close()<br></code></pre></td></tr></table></figure><p>在console输入<code>tensorboard --logdir=20231011/test02</code>,可以在网页上看到图片</p><h3 id="常见transforms-1-normalize">常见transforms(1:normalize)</h3><p>归一化操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br>writer=SummaryWriter(<span class="hljs-string">&quot;test03&quot;</span>)<br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;CJL.jpg&quot;</span>)<br><br><span class="hljs-comment"># Totensor</span><br>trans_totensor=transforms.ToTensor()<br>img_tensor=trans_totensor(img)<br>writer.add_image(<span class="hljs-string">&quot;ToTensor&quot;</span>,img_tensor)<br><br><span class="hljs-comment">#normalize</span><br>trans_norm=transforms.Normalize([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])  <span class="hljs-comment">#分别是三个通道的均值、三个通道的标准差 ，output[channel] = (input[channel] - mean[channel]) / std[channel]</span><br>img_norm=trans_norm(img_tensor)<br>writer.add_image(<span class="hljs-string">&quot;Normalize&quot;</span>,img_norm,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>使用Compose组合多个操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><br>writer=SummaryWriter(<span class="hljs-string">&quot;test04&quot;</span>)<br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;CJL.jpg&quot;</span>)<br><br><span class="hljs-comment"># Totensor</span><br>trans_totensor=transforms.ToTensor()<br><span class="hljs-comment"># resize</span><br>trans_resize=transforms.Resize([<span class="hljs-number">300</span>,<span class="hljs-number">500</span>])  <span class="hljs-comment">#(h, w)</span><br><span class="hljs-comment"># 组合</span><br>combine=transforms.Compose([trans_resize,trans_totensor])<span class="hljs-comment">#使用Compose组合多个操作</span><br><br>img_1=combine(img)<br>writer.add_image(<span class="hljs-string">&quot;img_1&quot;</span>,img_1,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>可以观察到图片被压缩了</p><h3 id="使用公开的数据集">使用公开的数据集</h3><p>这里使用手写数字作为示范</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>dataset_transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor()])<span class="hljs-comment"># 定义transform</span><br><br>train_set= torchvision.datasets.MNIST(root=<span class="hljs-string">&quot;D:\\AI\\doc\\20231011\\MNIST_data&quot;</span>,train=<span class="hljs-literal">True</span>,transform=dataset_transform,download=<span class="hljs-literal">True</span>)<br>test_set=torchvision.datasets.MNIST(root=<span class="hljs-string">&quot;D:\\AI\\doc\\20231011\\MNIST_data&quot;</span>,train=<span class="hljs-literal">False</span>,transform=dataset_transform,download=<span class="hljs-literal">True</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;分类列表&quot;</span>,test_set.classes)<br>img,target=test_set[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;img所属分类&quot;</span>,test_set.classes[target])<br><br><span class="hljs-comment"># writer</span><br>writer=SummaryWriter(<span class="hljs-string">&quot;test05&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    img,idx=test_set[i]<br>    writer.add_image(<span class="hljs-string">&quot;test&quot;</span>,img,i)<br>writer.close()<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">分类列表 <span class="hljs-selector-attr">[<span class="hljs-string">&#x27;0 - zero&#x27;</span>, <span class="hljs-string">&#x27;1 - one&#x27;</span>, <span class="hljs-string">&#x27;2 - two&#x27;</span>, <span class="hljs-string">&#x27;3 - three&#x27;</span>, <span class="hljs-string">&#x27;4 - four&#x27;</span>, <span class="hljs-string">&#x27;5 - five&#x27;</span>, <span class="hljs-string">&#x27;6 - six&#x27;</span>, <span class="hljs-string">&#x27;7 - seven&#x27;</span>, <span class="hljs-string">&#x27;8 - eight&#x27;</span>, <span class="hljs-string">&#x27;9 - nine&#x27;</span>]</span><br><span class="hljs-selector-tag">img</span>所属分类 <span class="hljs-number">7</span> - seven<br></code></pre></td></tr></table></figure><h2 id="DataLoader的使用">DataLoader的使用</h2><p>在DataLoader中num_works表示同时进行的任务数，默认为0（只使用主进程），据说在windows下如果设置为大于0的值会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>test_data = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, download=<span class="hljs-literal">True</span>, train=<span class="hljs-literal">False</span>,<br>                                         transform=torchvision.transforms.ToTensor())<br>test_loader = DataLoader(dataset=test_data, batch_size=<span class="hljs-number">4</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">0</span>, drop_last=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 测试数据集中第一张图片及target</span><br>img, target = test_data[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(img.shape)<br><span class="hljs-built_in">print</span>(target)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;dataloader&quot;</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    step = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_loader:<br>        imgs, targets = data<br>        writer.add_images(<span class="hljs-string">&quot;Epoch:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(epoch), imgs, step)<br>        step += <span class="hljs-number">1</span><br><br><br>writer.close()<br></code></pre></td></tr></table></figure><h2 id="神经网络基本骨架-nn-module的使用">神经网络基本骨架- nn.module的使用</h2><p><code>torch.nn</code>是<code>torch.nn.functional</code>的封装，前者包含后者，前者更容易使用</p><p>类<code>torch.nn.Module</code>是所有神经网络的骨架，所有搭建的神经网络都应当基础这个类</p><p><a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module">官方文档</a></p><p>定义神经网络的基本模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-comment"># 定义一个Model类继承自nn.Module</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(nn.Module):<br>    <span class="hljs-comment"># 实现下面两个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>().__init__() <span class="hljs-comment">#这个是必须的</span><br>        self.conv1 = nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>)<br>        self.conv2 = nn.Conv2d(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># 前向传播</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># x先卷积(conv1)，再经过非线性处理(relu)</span><br>        x = F.relu(self.conv1(x))<br>        <span class="hljs-comment"># x再卷积(conv2)，再经过非线性处理(relu)</span><br>        <span class="hljs-keyword">return</span> F.relu(self.conv2(x))<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph LR;id1(input) ---&gt; id2&#123;forward&#125;id2 ---&gt; id3(output)</code></pre><p>可以使用pycharm的code generate功能(在菜单栏code/generate…)，选择<code>Override Methods</code>自动补全代码</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = <span class="hljs-built_in">input</span> + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> output<br><br><span class="hljs-comment"># 创建一个神经网络</span><br>tudui = Tudui()<br>x = torch.tensor(<span class="hljs-number">1.0</span>)<br>output = tudui(x)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">2</span>.)</span></span><br></code></pre></td></tr></table></figure><h2 id="卷积操作">卷积操作</h2><p><a href="https://pytorch.org/docs/stable/nn.html#convolution-layers">官方文档</a></p><p>这里主要学习<code>nn.Conv2d</code></p><p><img src="./pytorch.assets/image-20240127173803485.png" alt="卷积"></p><p>Stride的意义是卷积核单次移动的距离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]])<br>kernel = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>],<br>                       [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>],<br>                       [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]])<br><span class="hljs-comment"># 调整input和kernel的尺寸（要求有四个数字,分别是minibatch,in_channels,iH,iW）</span><br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br>kernel = torch.reshape(kernel, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><span class="hljs-built_in">print</span>(kernel.shape)<br><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stride=1\n&quot;</span>,output)<br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;stride=2\n&quot;</span>,output)<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7">torch.Size(<span class="hljs-comment">[1, 1, 5, 5]</span>)<br>torch.Size(<span class="hljs-comment">[1, 1, 3, 3]</span>)<br>stride=1<br> tensor(<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[10, 12, 12]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[18, 16, 16]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[13,  9,  3]</span>]</span>]</span>]</span>)<br>stride=2<br> tensor(<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[10, 12]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[13,  3]</span>]</span>]</span>]</span>)<br></code></pre></td></tr></table></figure><h3 id="设置padding">设置padding</h3><p><img src="./pytorch.assets/image-20240127205358423.png" alt="卷积设置padding"></p><p>padding默认为0，当把padding设置为1时，输入图像周围增加一圈，数值填0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input 和 kernel代码同上</span><br>output = F.conv2d(<span class="hljs-built_in">input</span>, kernel, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs inform7">tensor(<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[<span class="hljs-comment">[ 1,  3,  4, 10,  8]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[ 5, 10, 12, 12,  6]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[ 7, 18, 16, 16,  8]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[11, 13,  9,  3,  4]</span>,</span></span></span><br><span class="hljs-comment"><span class="hljs-comment"><span class="hljs-comment">          <span class="hljs-comment">[14, 13,  9,  7,  4]</span>]</span>]</span>]</span>)<br></code></pre></td></tr></table></figure><h2 id="神经网络-卷积层">神经网络-卷积层</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.conv1 = Conv2d(in_channels=<span class="hljs-number">3</span>, out_channels=<span class="hljs-number">6</span>, kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">1</span>, padding=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/nn_conv2d_logs&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-comment"># imgs: torch.Size([64,3,32,32])</span><br>    output = tudui(imgs)<br>    <span class="hljs-comment"># output: torch.Size([64,6,30,30])</span><br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    <span class="hljs-comment"># 这里reshape的原因是原output有6个通道，无法直接显示，所以这里不严谨地将output改为3通道</span><br>    output = torch.reshape(output, (-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>, <span class="hljs-number">30</span>))<br>    <span class="hljs-comment"># -1是占位符，表示让pytorch自动计算某一维度的大小</span><br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br><br>writer.close()<br><br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/nn_conv2d_logs</code>查看结果</p><h2 id="神经网络-最大池化">神经网络-最大池化</h2><p><img src="./pytorch.assets/image-20240128075503778.png" alt="最大池化考虑不同Ceil_model"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],<br>                      [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>                      [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]], dtype=torch.float32)<br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>, (-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">input</span>.shape)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ceil_mode, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=ceil_mode)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><span class="hljs-comment"># ceil_mode = True</span><br>tudui1 = Tudui(<span class="hljs-literal">True</span>)<br>output1 = tudui1(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output1)<br><span class="hljs-comment"># ceil_mode = False</span><br>tudui2 = Tudui(<span class="hljs-literal">False</span>)<br>output2 = tudui2(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output2)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">torch.Size([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>])<br>tensor(<span class="hljs-string">[[[[2., 3.],</span><br><span class="hljs-string">          [5., 1.]]]]</span>)<br>tensor(<span class="hljs-string">[[[[2.]]]]</span>)<br></code></pre></td></tr></table></figure><p>最大池化的一个作用是有损压缩文件，比如将1080P的视频转为720P的</p><p>在神经网络的训练中很常用，可以减少计算量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, ceil_mode, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.maxpool1 = MaxPool2d(kernel_size=<span class="hljs-number">3</span>, ceil_mode=ceil_mode)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.maxpool1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>tudui2 = Tudui(<span class="hljs-literal">False</span>)<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/nn_maxpool&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui2(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/nn_maxpool</code>查看效果</p><p><img src="./pytorch.assets/image-20240128083145540.png" alt="最大池化效果"></p><p>可以看出，图片被模糊了</p><h2 id="神经网络-非线性激活">神经网络-非线性激活</h2><p>这里举例ReLU和sigmoid两个函数，实现功能是将图像每个元素的值映射为新的函数值</p><p>ReLU:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d, ReLU<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-built_in">input</span> = torch.tensor([[<span class="hljs-number">1</span>,-<span class="hljs-number">0.5</span>],<br>                      [-<span class="hljs-number">1</span>,<span class="hljs-number">3</span>]])<br><span class="hljs-built_in">input</span> = torch.reshape(<span class="hljs-built_in">input</span>,(-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.relu=ReLU()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.relu(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>tudui2 = Tudui()<br>output = tudui2(<span class="hljs-built_in">input</span>)<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">tensor(<span class="hljs-string">[[[[1., 0.],</span><br><span class="hljs-string">          [0., 3.]]]]</span>)<br></code></pre></td></tr></table></figure><p>可以看出，ReLU执行的是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">x=max(x,0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>的操作</p><p>Sigmoid:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d, ReLU, Sigmoid<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.relu=Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.relu(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>tudui2 = Tudui()<br><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/nn_relu&quot;</span>)<br>step = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    writer.add_images(<span class="hljs-string">&quot;input&quot;</span>, imgs, step)<br>    output = tudui2(imgs)<br>    writer.add_images(<span class="hljs-string">&quot;output&quot;</span>, output, step)<br>    step += <span class="hljs-number">1</span><br>writer.close()<br><br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/nn_relu</code>查看结果</p><p><img src="./pytorch.assets/image-20240128094540908.png" alt="Sigmoid"></p><h2 id="神经网络-线性层及其他层介绍">神经网络-线性层及其他层介绍</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> MaxPool2d, ReLU, Sigmoid, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.linear1 = Linear(<span class="hljs-number">196608</span>, <span class="hljs-number">10</span>)<br>        <span class="hljs-comment"># 64*3*32*32 = 196608</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        output = self.linear1(<span class="hljs-built_in">input</span>)<br>        <span class="hljs-keyword">return</span> output<br><br><br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    <span class="hljs-built_in">print</span>(imgs.shape)<br>    output = torch.flatten(imgs)  <span class="hljs-comment"># 将imgs变为一维的</span><br>    <span class="hljs-built_in">print</span>(output.shape)<br>    output = tudui(output)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[64, 3, 32, 32]</span>)<br>torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[196608]</span>)<br>torch<span class="hljs-selector-class">.Size</span>(<span class="hljs-selector-attr">[10]</span>)<br>...<br></code></pre></td></tr></table></figure><h2 id="神经网络-搭建实战和Sequential的使用">神经网络-搭建实战和Sequential的使用</h2><p>CIFAR10的模型结构</p><p><img src="./pytorch.assets/image-20240128175050976.png" alt="CIFAR10模型结构"></p><p>Conv2d的输入和输出大小计算公式为</p><p><img src="./pytorch.assets/image-20240128180245904.png" alt="Conv2d shape"></p><p>对于模型的第一步，输入满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>32</mn></mrow><annotation encoding="application/x-tex">H_{in}=W_{in}=32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">32</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">N=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">C_{in}=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">in</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>k</mi><mi>e</mi><mi>r</mi><mi>n</mi><mi>e</mi><mi>l</mi><mi mathvariant="normal">_</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">kernel\_size[0]=kernel\_size[1]=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.06em;vertical-align:-0.31em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord" style="margin-right:0.02778em;">_</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">5</span></span></span></span>，未知参数为padding和stride</p><p>stride不为1时，padding过大而不合理，所以设置<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">stride[0]=stride[1]=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">padding[0]=padding[1]=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">dd</span><span class="mord mathnormal">in</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.conv1 = Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool1 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv2 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool2 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.conv3 = Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>)<br>        self.maxpool3 = MaxPool2d(<span class="hljs-number">2</span>)<br>        self.flatten = Flatten()<br>        self.linear1 = Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>)<br>        self.linear2 = Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.conv1(x)<br>        x = self.maxpool1(x)<br>        x = self.conv2(x)<br>        x = self.maxpool2(x)<br>        x = self.conv3(x)<br>        x = self.maxpool3(x)<br>        x = self.flatten(x)<br>        x = self.linear1(x)<br>        x = self.linear2(x)<br>        <span class="hljs-keyword">return</span> x<br><br>tudui = Tudui()<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>,<span class="hljs-number">3</span>,<span class="hljs-number">32</span>,<span class="hljs-number">32</span>))<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-comment"># 检查网络参数是否正确</span><br><span class="hljs-built_in">print</span>((output.shape))<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">torch</span>.Size([<span class="hljs-number">64</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><p>使用Sequential简化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>tudui = Tudui()<br><span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>output = tudui(<span class="hljs-built_in">input</span>)<br><span class="hljs-comment"># 检查网络参数是否正确</span><br><span class="hljs-built_in">print</span>((output.shape))<br><span class="hljs-comment"># 可视化查看网络</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/mm_seq&quot;</span>)<br>writer.add_graph(tudui,<span class="hljs-built_in">input</span>)<br>writer.close()<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">torch</span>.Size([<span class="hljs-number">64</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/mm_seq </code>，可以可视化查看网络</p><p><img src="./pytorch.assets/image-20240128183704401.png" alt="可视化查看网络"></p><h2 id="损失函数和反向传播">损失函数和反向传播</h2><h3 id="损失函数举例">损失函数举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> *<br><br>inputs = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], dtype=torch.float32)<br>targets = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>], dtype=torch.float32)<br><br>inputs = torch.reshape(inputs, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>targets = torch.reshape(targets, (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br><br>loss1 = L1Loss(reduction=<span class="hljs-string">&#x27;sum&#x27;</span>)<br>result = loss1(inputs, targets)<br><span class="hljs-built_in">print</span>(result)<br>loss2 = L1Loss(reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br>result = loss2(inputs, targets)<br><span class="hljs-built_in">print</span>(result)<br>loss3 = MSELoss()<br>result = loss3(inputs,targets)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">2</span>.)</span></span><br><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">0.6667</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">1.3333</span>)</span></span><br></code></pre></td></tr></table></figure><p>inputs对于运行的结果，targets对应期望的结果，损失的作用是对网络进行打分，结果loss越小，网络的效果越优秀</p><p>该代码中用到了三种损失函数</p><p>对于<code>L1Loss(reduction='sum')</code>，计算过程为<code>abs(1-1)+abs(2-2)+abs(3-5)=2</code></p><p>对于<code>L1Loss(reduction='mean')</code>，计算过程为<code>(abs(1-1)+abs(2-2)+abs(3-5)=2)/3=0.6667</code></p><p>对于<code>MSELoss()</code>，计算过程为<code>((1-1)**2+(2-2)**2+(3-5)**2)/3=1.3333</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br><br>x = torch.tensor([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>])<br>y = torch.tensor([<span class="hljs-number">1</span>])<br>x = torch.reshape(x, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>))<br>loss = CrossEntropyLoss()<br>result = loss(x, y)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-built_in">print</span>(-<span class="hljs-number">0.2</span> + log(exp(<span class="hljs-number">0.1</span>) + exp(<span class="hljs-number">0.2</span>) + exp(<span class="hljs-number">0.3</span>)))<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">tensor</span>(<span class="hljs-number">1</span>.<span class="hljs-number">1019</span>)<br><span class="hljs-attribute">1</span>.<span class="hljs-number">1019428482292442</span><br></code></pre></td></tr></table></figure><p>第四种损失函数相对复杂，可以参考官方文档</p><h3 id="给网络加上损失函数和反向传播">给网络加上损失函数和反向传播</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(<span class="hljs-title class_ inherited__">Module</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>    imgs, targets = data<br>    outputs = tudui(imgs)<br>    <span class="hljs-comment"># print(imgs)</span><br>    <span class="hljs-comment"># print(targets)</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    imgs:</span><br><span class="hljs-string">    tensor([[[[0.6196, 0.6235, 0.6471,  ..., 0.5373, 0.4941, 0.4549],</span><br><span class="hljs-string">           [0.5961, 0.5922, 0.6235,  ..., 0.5333, 0.4902, 0.4667],</span><br><span class="hljs-string">           [0.5922, 0.5922, 0.6196,  ..., 0.5451, 0.5098, 0.4706],</span><br><span class="hljs-string">           ...,</span><br><span class="hljs-string">        ...</span><br><span class="hljs-string">    targets:</span><br><span class="hljs-string">    tensor([3, 8, 8, 0, 6, 6, 1, 6, 3, 1, 0, 9, 5, 7, 9, 8, 5, 7, 8, 6, 7, 0, 4, 9,</span><br><span class="hljs-string">        5, 2, 4, 0, 9, 6, 6, 5, 4, 5, 9, 2, 4, 1, 9, 5, 4, 6, 5, 6, 0, 9, 3, 9,</span><br><span class="hljs-string">        7, 6, 9, 8, 0, 3, 8, 8, 7, 7, 4, 6, 7, 3, 6, 3])</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    result_loss = loss(outputs, targets)<br>    <span class="hljs-built_in">print</span>(result_loss)<br>    <span class="hljs-comment"># 反向传播</span><br>    result_loss.backward()<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">2.3176</span>, grad_fn=&lt;NllLossBackward0&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">2.2948</span>, grad_fn=&lt;NllLossBackward0&gt;)</span></span><br><span class="hljs-function"><span class="hljs-title">tensor</span><span class="hljs-params">(<span class="hljs-number">2.3078</span>, grad_fn=&lt;NllLossBackward0&gt;)</span></span><br>...<br></code></pre></td></tr></table></figure><h3 id="优化器">优化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br>writer=SummaryWriter(<span class="hljs-string">&quot;logs/nn_optim&quot;</span>)<br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&quot;./dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(<span class="hljs-title class_ inherited__">Module</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br>loss = CrossEntropyLoss()<br>tudui = Tudui()<br><span class="hljs-comment"># 创建优化器</span><br>optim = torch.optim.SGD(tudui.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):  <span class="hljs-comment"># 为了更好的学习效果，循环学习60轮</span><br>    running_loss = <span class="hljs-number">0.0</span>  <span class="hljs-comment"># 这一轮的loss</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)<br>        result_loss = loss(outputs, targets)<br>        <span class="hljs-comment"># print(result_loss)</span><br>        <span class="hljs-comment"># 梯度清零，因为上次循环的梯度数据对这次循环没有用</span><br>        optim.zero_grad()<br>        <span class="hljs-comment"># 反向传播，求出每个结点的梯度</span><br>        result_loss.backward()<br>        <span class="hljs-comment"># 对模型参数调优</span><br>        optim.step()<br>        <span class="hljs-comment"># 更新running_loss</span><br>        running_loss += result_loss<br>    <span class="hljs-built_in">print</span>(running_loss)<br>    writer.add_scalar(<span class="hljs-string">&quot;loss&quot;</span>,running_loss,epoch)<br>writer.close()<br><br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/nn_optim</code>查看训练效果</p><p><img src="./pytorch.assets/image-20240129164954693.png" alt="训练效果"></p><h2 id="现有网络模型的使用和修改">现有网络模型的使用和修改</h2><p>下面的代码使用训练好的模型vgg16，修改并训练后可用于分类CIFAR10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> CrossEntropyLoss<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># 使用预训练好的模型</span><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">True</span>)<br>dataset = torchvision.datasets.CIFAR10(<span class="hljs-string">&#x27;./dataset&#x27;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                       download=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 增加一层，将分1000类变为分10类</span><br>vgg16.classifier.add_module(<span class="hljs-string">&#x27;add_linear&#x27;</span>, nn.Linear(<span class="hljs-number">1000</span>, <span class="hljs-number">10</span>))<br>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">64</span>)<br>writer = SummaryWriter(<span class="hljs-string">&quot;logs/model_pretrained&quot;</span>)<br>loss = CrossEntropyLoss()<br>optim = torch.optim.SGD(vgg16.parameters(), lr=<span class="hljs-number">0.01</span>)<br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):  <span class="hljs-comment"># 训练的时间很长，所以这里设置的数字小</span><br>    running_loss = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> dataloader:<br>        imgs, targets = data<br>        outputs = vgg16(imgs)<br>        result_loss = loss(outputs, targets)<br>        optim.zero_grad()<br>        result_loss.backward()<br>        optim.step()<br>        running_loss += result_loss<br>    <span class="hljs-built_in">print</span>(epoch, <span class="hljs-string">&#x27;  &#x27;</span>, running_loss)<br>    writer.add_scalar(<span class="hljs-string">&quot;loss&quot;</span>, running_loss, epoch)<br><span class="hljs-comment"># 保存训练好的模型</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br>writer.close()<br><br></code></pre></td></tr></table></figure><p>输入<code>tensorboard --logdir=logs/model_pretrained</code>查看训练效果</p><h2 id="模型的保存和读取">模型的保存和读取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><br>vgg16 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># 保存模型</span><br><span class="hljs-comment"># 保存方式1，模型结构+模型参数</span><br>torch.save(vgg16, <span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><br><span class="hljs-comment"># 保存方式2，模型参数（官方推荐）</span><br>torch.save(vgg16.state_dict(), <span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>)<br><span class="hljs-comment"># 保存方式1对应的加载模型方式</span><br>model1 = torch.load(<span class="hljs-string">&quot;vgg16_method1.pth&quot;</span>)<br><span class="hljs-built_in">print</span>(model1)<br><span class="hljs-comment"># 保存方式2对应的加载模型方式</span><br>model2 = torchvision.models.vgg16(pretrained=<span class="hljs-literal">False</span>)<br>model2.load_state_dict(torch.load(<span class="hljs-string">&quot;vgg16_method2.pth&quot;</span>))<br><span class="hljs-built_in">print</span>(model2)<br></code></pre></td></tr></table></figure><h2 id="完整的模型训练套路">完整的模型训练套路</h2><p>该示例训练CIFAR10</p><p><img src="./pytorch.assets/image-20240128175050976.png" alt="CIFAR10模型结构"></p><p>首先建立模型框架，定义在<code>model.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Conv2d, MaxPool2d, Flatten, Linear, Sequential<br><br><br><span class="hljs-comment"># 这里复制了 # 神经网络-搭建实战和Sequential的使用 的代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-comment"># 用于测试网络是否正确</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    tudui = Tudui()<br>    <span class="hljs-built_in">input</span> = torch.ones((<span class="hljs-number">64</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>    output = tudui(<span class="hljs-built_in">input</span>)<br>    <span class="hljs-built_in">print</span>(output.shape)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">torch</span>.Size([<span class="hljs-number">64</span>, <span class="hljs-number">10</span>])<br></code></pre></td></tr></table></figure><p><code>train.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><br><span class="hljs-comment"># 引入Tudui模型框架</span><br><span class="hljs-keyword">from</span> model <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># len()可以获得数据集的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(train_data)))  <span class="hljs-comment"># ctrl+d复制当前行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(test_data)))<br><span class="hljs-comment"># 利用DataLoader来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><span class="hljs-comment"># 创建网络模型</span><br>tudui = Tudui()<br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># 学习速率</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)  <span class="hljs-comment"># SGD是随机梯度下降</span><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">100</span>  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/train&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------第&#123;&#125;轮训练开始--------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        <span class="hljs-comment"># 梯度清零，因为上次循环的梯度数据对这次循环没有用</span><br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># 反向传播，求出每个结点的梯度</span><br>        loss.backward()<br>        <span class="hljs-comment"># 对模型参数调优</span><br>        optimizer.step()<br><br>        total_train_step += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))  <span class="hljs-comment"># .item的作用是把tensor数据类型转为纯数字</span><br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():  <span class="hljs-comment"># 在测试的过程中不进行调优，所以设置无梯度</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss += loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy += accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / <span class="hljs-built_in">len</span>(test_data)))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / <span class="hljs-built_in">len</span>(test_data), total_test_step)<br>    total_test_step += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存训练结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;./train_save/tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>writer.close()<br><br></code></pre></td></tr></table></figure><p>运行<code>train.py</code>，输入<code>tensorboard --logdir=logs/train</code>查看训练效果</p><p><img src="./pytorch.assets/image-20240130100916121.png" alt="train1"></p><p><img src="./pytorch.assets/image-20240130100954253.png" alt="train2"></p><h2 id="使用GPU训练">使用GPU训练</h2><p>修改以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-keyword">if</span> torch.cuda.is_available(): <span class="hljs-comment"># 测试和训练都要修改</span><br>    imgs = imgs.cuda()<br>    targets = targets.cuda()<br></code></pre></td></tr></table></figure><p>使用google的免费GPU计算资源<a href="https://colab.research.google.com/">https://colab.research.google.com/</a></p><p>在修改-笔记本设置，可以选择硬件加速器为T4GPU，就能使用GPU运行python代码</p><p>验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-built_in">print</span>(torch.__version__)<br><span class="hljs-built_in">print</span>(torch.cuda.is_available())<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>+cu121<br><span class="hljs-attribute">True</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">!nvidia-smi<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">Tue Jan 30 02:57:01 2024       </span><br><span class="hljs-section">+---------------------------------------------------------------------------------------+</span><br>| NVIDIA-SMI 535.104.05             Driver Version: 535.104.05   CUDA Version: 12.2     |<br>|-----------------------------------------<span class="hljs-code">+----------------------+</span>----------------------+<br>| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |<br>| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |<br>|                                         |                      |               MIG M. |<br>|=========================================<span class="hljs-code">+======================+</span>======================|<br>|   0  Tesla T4                       Off | 00000000:00:04.0 Off |                    0 |<br>| N/A   44C    P8              10W /  70W |      3MiB / 15360MiB |      0%      Default |<br><span class="hljs-section">|                                         |                      |                  N/A |</span><br><span class="hljs-section">+-----------------------------------------+----------------------+----------------------+</span><br><span class="hljs-section">                                                                                         </span><br><span class="hljs-section">+---------------------------------------------------------------------------------------+</span><br>| Processes:                                                                            |<br>|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |<br>|        ID   ID                                                             Usage      |<br>|=======================================================================================|<br><span class="hljs-section">|  No running processes found                                                           |</span><br><span class="hljs-section">+---------------------------------------------------------------------------------------+</span><br></code></pre></td></tr></table></figure><p>有16GB的显存，配置很好</p><p>在colab上用GPU运行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision.datasets<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> Sequential, Conv2d, MaxPool2d, Flatten, Linear<br><span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader<br><span class="hljs-keyword">from</span> torch.utils.tensorboard <span class="hljs-keyword">import</span> SummaryWriter<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-comment"># 引入Tudui模型框架</span><br><br><span class="hljs-comment"># 准备数据集</span><br>train_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">True</span>, transform=torchvision.transforms.ToTensor(),<br>                                          download=<span class="hljs-literal">True</span>)<br>test_data = torchvision.datasets.CIFAR10(root=<span class="hljs-string">&quot;dataset&quot;</span>, train=<span class="hljs-literal">False</span>, transform=torchvision.transforms.ToTensor(),<br>                                         download=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># len()可以获得数据集的长度</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(train_data)))  <span class="hljs-comment"># ctrl+d复制当前行</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;测试数据集的长度为:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">len</span>(test_data)))<br><span class="hljs-comment"># 利用DataLoader来加载数据集</span><br>train_dataloader = DataLoader(train_data, batch_size=<span class="hljs-number">64</span>)<br>test_dataloader = DataLoader(test_data, batch_size=<span class="hljs-number">64</span>)<br><span class="hljs-comment"># 创建网络模型</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br>tudui = Tudui()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    tudui = tudui.cuda()<br><span class="hljs-comment"># 损失函数</span><br>loss_fn = nn.CrossEntropyLoss()<br><span class="hljs-keyword">if</span> torch.cuda.is_available():<br>    loss_fn = loss_fn.cuda()<br><span class="hljs-comment"># 优化器</span><br>learning_rate = <span class="hljs-number">0.01</span>  <span class="hljs-comment"># 学习速率</span><br>optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)  <span class="hljs-comment"># SGD是随机梯度下降</span><br><span class="hljs-comment"># 设置训练网络的一些参数</span><br><span class="hljs-comment"># 记录训练的次数</span><br>total_train_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 记录测试的次数</span><br>total_test_step = <span class="hljs-number">0</span><br><span class="hljs-comment"># 训练的轮数</span><br>epoch = <span class="hljs-number">100</span>  <span class="hljs-comment"># 10</span><br><br><span class="hljs-comment"># 添加tensorboard</span><br>writer = SummaryWriter(<span class="hljs-string">&quot;./logs/train&quot;</span>)<br>start_time = time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(epoch):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--------第&#123;&#125;轮训练开始--------&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br><br>    <span class="hljs-comment"># 训练步骤开始</span><br>    tudui.train()<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> train_dataloader:<br>        imgs, targets = data<br>        <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>            imgs = imgs.cuda()<br>            targets = targets.cuda()<br>        outputs = tudui(imgs)<br>        loss = loss_fn(outputs, targets)<br><br>        <span class="hljs-comment"># 优化器优化模型</span><br>        <span class="hljs-comment"># 梯度清零，因为上次循环的梯度数据对这次循环没有用</span><br>        optimizer.zero_grad()<br>        <span class="hljs-comment"># 反向传播，求出每个结点的梯度</span><br>        loss.backward()<br>        <span class="hljs-comment"># 对模型参数调优</span><br>        optimizer.step()<br><br>        total_train_step += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> total_train_step % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            end_time = time()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;训练时间<span class="hljs-subst">&#123;end_time-start_time&#125;</span>s&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练次数:&#123;&#125;, Loss:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_train_step, loss.item()))  <span class="hljs-comment"># .item的作用是把tensor数据类型转为纯数字</span><br>            writer.add_scalar(<span class="hljs-string">&quot;train_loss&quot;</span>, loss.item(), total_train_step)<br><br>    <span class="hljs-comment"># 测试步骤开始</span><br>    tudui.<span class="hljs-built_in">eval</span>()<br>    total_test_loss = <span class="hljs-number">0</span><br>    total_accuracy = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():  <span class="hljs-comment"># 在测试的过程中不进行调优，所以设置无梯度</span><br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> test_dataloader:<br>            imgs, targets = data<br>            <span class="hljs-keyword">if</span> torch.cuda.is_available():<br>                imgs = imgs.cuda()<br>                targets = targets.cuda()<br>            outputs = tudui(imgs)<br>            loss = loss_fn(outputs, targets)<br>            total_test_loss += loss.item()<br>            accuracy = (outputs.argmax(<span class="hljs-number">1</span>) == targets).<span class="hljs-built_in">sum</span>()<br>            total_accuracy += accuracy<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的Loss:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_test_loss))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;整体测试集上的正确率:&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(total_accuracy / <span class="hljs-built_in">len</span>(test_data)))<br>    writer.add_scalar(<span class="hljs-string">&quot;test_loss&quot;</span>, total_test_loss, total_test_step)<br>    writer.add_scalar(<span class="hljs-string">&quot;test_accuracy&quot;</span>, total_accuracy / <span class="hljs-built_in">len</span>(test_data), total_test_step)<br>    total_test_step += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 保存训练结果</span><br>    torch.save(tudui, <span class="hljs-string">&quot;./tudui_&#123;&#125;.pth&quot;</span>.<span class="hljs-built_in">format</span>(i + <span class="hljs-number">1</span>))<br>writer.close()<br><br></code></pre></td></tr></table></figure><p>或者换一种写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span> <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;cpu&quot;</span>)<br><span class="hljs-comment"># if torch.cuda.is_available():</span><br><span class="hljs-comment">#     tudui = tudui.cuda()</span><br>tudui = tudui.to(device)<br><span class="hljs-comment"># if torch.cuda.is_available():</span><br><span class="hljs-comment">#     loss_fn = loss_fn.cuda()</span><br>loss_fn = loss_fn.to(device)<br><span class="hljs-comment"># if torch.cuda.is_available():</span><br><span class="hljs-comment">#     imgs = imgs.cuda()</span><br><span class="hljs-comment">#     targets = targets.cuda()</span><br>imgs = imgs.to(device)<br>targets = targets.to(device)<br></code></pre></td></tr></table></figure><h2 id="完整的模型验证思路">完整的模型验证思路</h2><p><img src="./pytorch.assets/image-20240130125858787.png" alt="类别"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torchvision.transforms<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> torch<br><br>image_path = <span class="hljs-string">&quot;./imgs/frog.png&quot;</span><br>image = Image.<span class="hljs-built_in">open</span>(image_path)<br>image.show()<br>transform = torchvision.transforms.Compose([torchvision.transforms.Resize((<span class="hljs-number">32</span>, <span class="hljs-number">32</span>)),<br>                                            torchvision.transforms.ToTensor()])<br>image = transform(image)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tudui</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">super</span>().__init__(*args, **kwargs)<br>        self.model1 = Sequential(<br>            Conv2d(<span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Conv2d(<span class="hljs-number">32</span>, <span class="hljs-number">64</span>, <span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>),<br>            MaxPool2d(<span class="hljs-number">2</span>),<br>            Flatten(),<br>            Linear(<span class="hljs-number">1024</span>, <span class="hljs-number">64</span>),<br>            Linear(<span class="hljs-number">64</span>, <span class="hljs-number">10</span>)<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.model1(x)<br>        <span class="hljs-keyword">return</span> x<br><br>classify = &#123;<span class="hljs-number">0</span>:<span class="hljs-string">&#x27;airplane&#x27;</span>,<span class="hljs-number">1</span>:<span class="hljs-string">&#x27;automoble&#x27;</span>,<span class="hljs-number">2</span>:<span class="hljs-string">&#x27;bird&#x27;</span>,<span class="hljs-number">3</span>:<span class="hljs-string">&#x27;cat&#x27;</span>,<span class="hljs-number">4</span>:<span class="hljs-string">&#x27;deer&#x27;</span>,<span class="hljs-number">5</span>:<span class="hljs-string">&#x27;dog&#x27;</span>,<span class="hljs-number">6</span>:<span class="hljs-string">&#x27;frog&#x27;</span>,<span class="hljs-number">7</span>:<span class="hljs-string">&#x27;horse&#x27;</span>,<span class="hljs-number">8</span>:<span class="hljs-string">&#x27;ship&#x27;</span>,<span class="hljs-number">9</span>:<span class="hljs-string">&#x27;truck&#x27;</span>&#125;<br>model = torch.load(<span class="hljs-string">&quot;./train_save/tudui_40.pth&quot;</span>)<br>image = torch.reshape(image, (<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>))<br>model.<span class="hljs-built_in">eval</span>()<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    output = model(image)<br><span class="hljs-built_in">print</span>(output)<br><span class="hljs-built_in">print</span>(classify[output.argmax(<span class="hljs-number">1</span>).item()])<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">tensor(<span class="hljs-string">[[ -5.6745,  -6.9874,   2.7819,   4.9582,   9.3090,   3.5353,  11.1875,</span><br><span class="hljs-string">          -2.3855,  -6.4177, -11.6776]]</span>)<br>frog<br></code></pre></td></tr></table></figure><p>测试了几张图，除了分不清狗和猫，模型总体表现是不错的</p><p>注意：如果模型是在GPU上训练的，但是检验模型的环境不支持GPU，load函数要这么写：<code>model = torch.load(&quot;./train_save/tudui_40.pth&quot;,map_location=torch.device('cpu'))</code></p>]]></content>
    
    
    <categories>
      
      <category>programing languages</category>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统笔记</title>
    <link href="/2024/01/19/operating-system/index/"/>
    <url>/2024/01/19/operating-system/index/</url>
    
    <content type="html"><![CDATA[<h1>操作系统笔记</h1><p>参考视频：王道操作系统考研</p><h2 id="2-1-进程与线程">2.1 进程与线程</h2><h3 id="进程的概念、组成、特征">进程的概念、组成、特征</h3><ul><li><p>程序: 是<strong>静态的</strong>,就是个存放在磁盘里的可执行文件,就是一系列的指令集合。</p></li><li><p>进程(Process) :是<strong>动态的</strong>,是程序的一次执行过程</p><p>同一个程序多次执行会对应多个进程</p></li></ul><p>进程实体的组成</p><ul><li><p>PCB ：以下信息都被保存在一个数据结构PCB (Process Control Block)中,即进程控制块, 操作系统需要对各个并发运行的进程进行管理，但凡管理时所需要的信息，都会被放在PCB中</p><ul><li><p><strong>进程描述信息</strong>：操作系统要记录进程标识符(PID)、进程所属用户ID（UID)</p></li><li><p>**资源分配清单：**还要记录给进程分配了哪些资源（如：分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件）</p></li><li><p>**进程控制和管理信息：**还要记录进程的运行情况（如：CPU使用时间、磁盘使用情况、网络流量使用情况等）,</p><p>进程当前状态：就绪态/阻塞态/运行态…</p></li><li><p>**处理机相关信息：**处理机相关信息如PSW、PC等等各种寄存器的值（用于实现进程切换）</p></li></ul></li><li><p>程序段：程序的代码（指令序列）</p></li><li><p>数据段：运行过程中产生的各种数据（程序中定义的变量）</p></li></ul><p>进程的特征</p><ul><li>动态性：进程是程序的一次执行过程，是动态地产生、变化和消亡的</li><li>并发性：内存中有多个进程实体,各进程可并发执行</li><li>独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位</li><li>异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供&quot;进程同步机制&quot;来解决异步问题</li><li>结构性：每个进程都会配置一个PCB,结构上看,进程由程序段、数据段、PCB组成</li></ul><h3 id="进程的状态">进程的状态</h3><p>状态包括：（前三个是三种基本状态）</p><ul><li>运行状态(Running)</li><li>就绪状态(Ready)</li><li>阻塞状态(Waiting/Blocked)(等待态)</li><li>创建状态(New)(新建态)</li><li>终止状态(Terminated)(结束态)</li></ul><p>状态间的转换</p><ul><li>就绪态—&gt;运行态</li><li>运行态—&gt;就绪态</li><li>运行态—&gt;阻塞态</li><li>阻塞态—&gt;就绪态</li></ul><p>进程状态的转换：丁字裤模型</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240117115154996.png" alt="进程状态的转换"></p><p>进程PCB中，会有一个变量 state 来表示进程的当前状态。如：</p><ul><li>1表示创建态</li><li>2表示就绪态</li><li>3表示运行态…</li></ul><p>为了对同一个状态下的各个进程进行统一的管理,操作系统会将各个进程的PCB组织起来。</p><p>进程的组织：</p><ul><li>链接方式：类似于链表（大多数操作系统用这个）</li></ul><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240117115650220.png" alt="进程的组织：链表方式"></p><ul><li>索引方式</li></ul><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240117115757671.png" alt="进程的组织：索引方式"></p><h3 id="进程控制">进程控制</h3><p>进程的控制使用原语</p><p>原语的执行具有原子性,即执行过程只能一气呵成,期间不允许被中断。可以用“关中断指令”和“开中断指令”这两个特权指令实现原子性</p><h4 id="进程的创建">进程的创建</h4><p>创建原语</p><ul><li>申请空白PCB</li><li>为新进程分配所需资源</li><li>初始化PCB</li><li>将PCB插入就绪队列</li></ul><p>引起进程创建的事件</p><ul><li>用户登录：分时系统中，用户登录成功，系统会建立为其建立一个新的进程</li><li>作业调度：多道批处理系统中,有新的作业放入内存时,会为其建立一个新的进程</li><li>提供服务：用户向操作系统提出某些请求时，会新建一个进程处理该请求</li><li>应用请求：由用户进程主动请求创建一个子进程</li></ul><h4 id="进程的终止">进程的终止</h4><p>撤销原语</p><ul><li>从PCB集合中找到终止进程的PCB</li><li>若进程正在运行，立即剥夺CPU，将CPU分配给其他进程</li><li>终止其所有子进程</li><li>将该进程拥有的所有资源归还给父进程或操作系统</li><li>删除PCB</li></ul><p>引起进程终止的事件</p><ul><li>正常结束</li><li>异常结束</li><li>外界干预</li></ul><h4 id="进程的阻塞">进程的阻塞</h4><p>阻塞原语</p><ul><li>找到要阻塞的进程对应的PCB</li><li>保护进程运行现场，将PCB状态信息设置为“阻塞态&quot;，暂时停止进程运行</li><li>将PCB插入相应事件的等待队列</li></ul><p>引起进程阻塞的事件</p><ul><li>需要等待系统分配某种资源</li><li>需要等待相互合作的其他进程完成工作</li></ul><h4 id="进程的唤醒">进程的唤醒</h4><p>唤醒原语</p><ul><li>在事件等待队列中找到PCB</li><li>将PCB从等待队列移除,设置进程为就绪态</li><li>将PCB插入就绪队列，等待被调度</li></ul><p>引起进程唤醒的事件：等待的事件发生</p><h4 id="进程的切换">进程的切换</h4><p>切换原语</p><ul><li>将运行环境信息存入PCB</li><li>PCB移入相应队列</li><li>切换原语选择另一个进程执行，并更新其PCB</li><li>根据PCB恢复新进程所需的运行环境</li></ul><p>引起进程切换的事件</p><ul><li>当前进程时间片到</li><li>有更高优先级的进程到达</li><li>当前进程主动阻塞</li><li>当前进程终止</li></ul><h3 id="进程通信">进程通信</h3><ul><li>共享存储<ul><li>设置一个共享内存区域，并映射到进程的虚拟地址空间</li><li>要互斥地访问共享空间(由通信进程自己负责实现互斥)</li><li>两种方式<ul><li>基于数据结构（低级）</li><li>基于存储区的共享（高级）</li></ul></li></ul></li><li>消息传递<ul><li>传递结构化的消息(消息头/消息体)</li><li>系统提供“发送/接受原语”</li><li>两种方式<ul><li>直接通信方式：消息直接挂到接收进程的消息队列里</li><li>间接（信箱）通信方式：消息先发到中间体（信箱）</li></ul></li></ul></li><li>管道通信<ul><li>1,管道只能采用半双工通信,某一时间段内只能实现单向的传输。如果要实现双向同时通信,则需要设置两个管道。</li><li>2,各进程要互斥地访问管道(由操作系统实现)</li><li>3,当管道写满时，写进程将阻塞，直到读进程将管道中的数据取走，即可唤醒写进程。</li><li>4,当管道读空时,读进程将阻塞,直到写进程往管道中写入数据,即可唤醒读进程。</li><li>5,管道中的数据一旦被读出,就彻底消失。因此,当多个进程读同一个管道时,可能会错乱。对此,通常有两种解决方案:<ul><li>①一个管道允许多个写进程,一个读进程(2014年408真题高教社官方答案)</li><li>②允许有多个写进程,多个读进程,但系统会让各个读进程轮流从管道中读数据(Linux的方案)</li></ul></li></ul></li></ul><h3 id="线程的概念">线程的概念</h3><p>引入线程后带来的变化</p><ul><li>资源分配、调度<ul><li>传统进程机制中，进程是资源分配、调度的基本单位</li><li>引入线程后，进程是资源分配的基本单位，线程是调度的基本单位</li></ul></li><li>并发性<ul><li>传统进程机制中，只能进程间并发</li><li>引入线程后,各线程间也能并发,提升了并发度</li></ul></li><li>系统开销<ul><li>传统的进程间并发,需要切换进程的运行环境,系统开销很大</li><li>线程间并发,如果是同一进程内的线程切换,则不需要切换进程环境,系统开销小</li><li>引入线程后,并发所带来的系统开销减小</li></ul></li></ul><p>线程的属性</p><ul><li>线程是处理机调度的单位</li><li>多CPU计算机中,各个线程可占用不同的CPU</li><li>每个线程都有一个线程ID、线程控制块(TCB)</li><li>线程也有就绪、阻塞、运行三种基本状态</li><li>线程几乎不拥有系统资源</li><li>同一进程的不同线程间共享进程的资源</li><li>由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预</li><li>同一进程中的线程切换，不会引起进程切换</li><li>不同进程中的线程切换,会引起进程切换</li><li>切换同进程内的线程,系统开销很小</li><li>切换进程，系统开销较大</li></ul><h3 id="线程的实现方式和多线程模型">线程的实现方式和多线程模型</h3><p>线程的实现方式</p><ul><li>用户级线程：从用户视角能看到的线程，由线程库实现</li><li>内核级线程：从操作系统视角看到的线程，由操作系统实现（内核级线程才是处理机分配的单位)</li><li>组合方式：上述两种方式的结合</li></ul><p>多线程模型</p><ul><li>一对一模型：<ul><li>一个用户级线程映射到一个内核级线程</li><li>优:各个线程可分配到多核处理机并行执行,并发度高</li><li>缺:线程管理都需要操作系统支持,开销大</li></ul></li><li>多对一模型：<ul><li>多个用户级线程映射到一个内核级线程</li><li>优：线程管理开销小效率高</li><li>缺:一个线程阻塞会导致整个进程都被阻塞(并发度低)</li></ul></li><li>多对多模型<ul><li>n个用户级线程映射到m个内核级线程(n≥m)</li><li>集二者之所长</li></ul></li></ul><h3 id="线程的状态与转换">线程的状态与转换</h3><pre><code class=" mermaid">graph LR;id1(就绪) --3 被调度程序选中--&gt; id2(运行);id2 --2 时间用完--&gt; id1;id3(阻塞) --4 等待的事件发生--&gt;id1;id2 --1 等待某事件--&gt;id3;</code></pre><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240117164701085.png" alt="线程的组织与控制"></p><h2 id="2-2-处理机调度">2.2 处理机调度</h2><h3 id="调度的概念、层次">调度的概念、层次</h3><p>调度的三个层次</p><table><thead><tr><th></th><th>要做什么</th><th>调度发生在</th><th>发生频率</th><th>对进程状态的影响</th></tr></thead><tbody><tr><td>高级调度(作业调度)</td><td>按照某种规则，从后备队列中选择合适的作业将其调入内存,并为其创建进程</td><td>外存→内存（面向作业）</td><td>最低</td><td>无→创建态→就绪态</td></tr><tr><td>中级调度(内存调度)</td><td>按照某种规则,从挂起队列中选择合适的进程将其数据调回内存</td><td>外存→内存（面向进程）</td><td>中等</td><td>挂起态→就绪态（阻塞挂起→阻塞态）</td></tr><tr><td>低级调度(进程调度/处理机调度)</td><td>按照某种规则,从就绪队列中选择一个进程为其分配处理机</td><td>内存→CPU</td><td>最高</td><td>就绪态→运行态</td></tr></tbody></table><p>进程的挂起态与七状态模型</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240117195010258.png" alt="进程的挂起态与七状态模型"></p><h3 id="进程调度的时机、切换与过程调度方式">进程调度的时机、切换与过程调度方式</h3><p>进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机。</p><p>需要进行进程调度与切换的情况</p><ul><li>当前运行的进程主动放弃处理机<ul><li>进程正常终止</li><li>运行过程中发生异常而终止</li><li>进程主动请求阻塞(如等待I/O)</li></ul></li><li>当前运行的进程被动放弃处理机<ul><li>分给进程的时间片用完</li><li>有更紧急的事需要处理(如I/O中断)</li><li>有更高优先级的进程进入就绪队列</li></ul></li></ul><p>不能进行进程调度与切换的情况</p><ul><li>在处理中断的过程中。中断处理过程复杂，与硬件密切相关,很难做到在中断处理过程中进行进程切换。</li><li>进程在操作系统内核程序临界区中。</li><li>在原子操作过程中(原语)。原子操作不可中断,要一气呵成(如之前讲过的修改PCB中进程状态标志，并把PCB放到相应队列)</li></ul><p>进程调度的方式</p><ul><li><strong>非剥夺调度方式</strong>,又称非抢占方式。即,只允许进程主动放弃处理机。在运行过程中即便有更紧迫的任务到达,当前进程依然会继续使用处理机,直到该进程终止或主动要求进入阻塞态。</li><li><strong>剥夺调度方式</strong>,又称抢占方式。当一个进程正在处理机上执行时,如果有一个更重要或更紧迫的进程需要使用处理机,则立即暂停正在执行的进程,将处理机分配给更重要紧迫的那个进程。</li></ul><p>切换的过程</p><ul><li>对原来运行进程各种数据的保存</li><li>对新的进程各种数据的恢复</li></ul><h3 id="调度器和闲逛进程">调度器和闲逛进程</h3><h4 id="调度器">调度器</h4><pre><code class=" mermaid">graph LR;id1(就绪) --3 被调度程序选中--&gt; id2(运行);id2 --2 时间用完--&gt; id1;id3(阻塞) --4 等待的事件发生--&gt;id1;id2 --1 等待某事件--&gt;id3;</code></pre><p>其中2和3由调度程序引起</p><ul><li>非抢占式调度策略,只有运行进程阻塞或退出才触发调度程序工作</li><li>抢占式调度策略，每个时钟中断或k个时钟中断会触发调度程序工作</li></ul><h4 id="闲逛进程-idle">闲逛进程(idle)</h4><p>调度程序永远的备胎,没有其他就绪进程时,运行闲逛进程</p><ul><li>优先级最低</li><li>可以是0地址指令,占一个完整的指令周期(指令周期末尾例行检查中断)</li><li>能耗低</li></ul><h3 id="调度算法的评价指标">调度算法的评价指标</h3><ul><li>CPU利用率</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><mi>P</mi><mi>U</mi><mtext>利用率</mtext><mo>=</mo><mfrac><mtext>忙碌的时间</mtext><mtext>总时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">CPU利用率=\frac{忙碌的时间}{总时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">CP</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mord cjk_fallback">利用率</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">总时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">忙碌的时间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>对于多道程序并发执行的情况，可以用甘特图辅助计算</p><ul><li>系统吞吐量</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>系统吞吐量</mtext><mo>=</mo><mfrac><mtext>总共完成了多少道作业</mtext><mtext>总共花了多少时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">系统吞吐量=\frac{总共完成了多少道作业}{总共花了多少时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">系统吞吐量</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">总共花了多少时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">总共完成了多少道作业</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li>周转时间</li></ul><p>从作业被提交给系统开始,到作业完成为止的这段时间间隔。</p><p>它包括四个部分:</p><ul><li><ul><li>作业在外存后备队列上等待作业调度(高级调度)的时间</li><li>进程在就绪队列上等待进程调度(低级调度)的时间</li><li>进程在CPU上执行的时间</li><li>进程等待I/O操作完成的时间</li></ul></li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>平均周转时间</mtext><mo>=</mo><mfrac><mtext>各作业周转时间之和</mtext><mtext>作业数</mtext></mfrac></mrow><annotation encoding="application/x-tex">平均周转时间=\frac{各作业周转时间之和}{作业数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">平均周转时间</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">作业数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">各作业周转时间之和</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>带权周转时间</mtext><mo>=</mo><mfrac><mtext>作业周转时间</mtext><mtext>作业实际运行的时间</mtext></mfrac><mo>=</mo><mfrac><mrow><mtext>作业完成时间</mtext><mo>−</mo><mtext>作业提交时间</mtext></mrow><mtext>作业实际运行的时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">带权周转时间=\frac{作业周转时间}{作业实际运行的时间}=\frac{作业完成时间-作业提交时间}{作业实际运行的时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">带权周转时间</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">作业实际运行的时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">作业周转时间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">作业实际运行的时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">作业完成时间</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cjk_fallback">作业提交时间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ul><li><ul><li>对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多,带权周转时间更小，用户满意度更高。</li><li>对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小,用户满意度更高。</li></ul></li><li><p>等待时间</p></li></ul><p>指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低。</p><ul><li><ul><li>对于进程来说,等待时间就是指进程建立后等待被服务的时间之和,在等待I/O完成的期间其实进程也是在被服务的,所以不计入等待时间。</li><li>对于作业来说,不仅要考虑建立进程后的等待时间,还要加上作业在外存后备队列中等待的时间。</li></ul></li><li><p>响应时间</p></li></ul><p>从用户提交请求到首次产生响应所用的时间</p><h3 id="调度算法">调度算法</h3><h4 id="（1）适用于早期的批处理系统">（1）适用于早期的批处理系统</h4><table><thead><tr><th>算法</th><th>思想</th><th>规则</th><th>可抢占？</th><th>优点</th><th>缺点</th><th>考虑到等待时间&amp;运行时间？</th><th>会导致饥饿？</th></tr></thead><tbody><tr><td>FCFS(First Come First Serve)先来先服务</td><td>公平</td><td>按照作业/进程到达的先后顺序进行服务</td><td>否</td><td>公平、算法实现简单</td><td>缺点：排在长作业（进程）后面的短作业需要等待很长时间,带权周转时间很大,对短作业来说用户体验不好。</td><td>等待时间√，运行时间×</td><td>不会</td></tr><tr><td>SJF(Shortest Job First)短作业优先 / SPF(Shortest Process First)短进程优先</td><td>追求最少的平均等待时间,最少的平均周转时间、最少的平均平均带权周转时间</td><td>最短的作业/进程优先得到服务(所谓“最短”,是指要求服务时间最短）</td><td>SJF和SPF是非抢占式的算法。但是也有抢占式的版本——最短剩余时间优先算法（SRTN, Shortest Remaining Time Next)</td><td>“最短的”平均等待时间、平均周转时间</td><td>缺点:不公平。对短作业有利,对长作业不利。可能产生饥饿现象。另外,作业/进程的运行时间是由用户提供的，并不一定真实,不一定能做到真正的短作业优先</td><td>等待时间×，运行时间√</td><td>会</td></tr><tr><td>HRRN(Highest Response Ratio Next)高相应比优先</td><td>要综合考虑作业/进程的等待时间和要求服务的时间</td><td>在每次调度时先计算各个作业/进程的响应比,选择响应比最高的作业/进程为其服务</td><td>否</td><td>综合考虑了等待时间和运行时间(要求服务时间)。等待时间相同时,要求服务时间短的优先(SJF的优点)，要求服务时间相同时，等待时间长的优先（FCFS的优点）。对于长作业来说,随着等待时间越来越久,其响应比也会越来越大，从而避免了长作业饥饿的问题</td><td>无</td><td>等待时间√，运行时间√</td><td>不会</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>响应比</mtext><mo>=</mo><mfrac><mrow><mtext>等待时间</mtext><mo>+</mo><mtext>要求服务时间</mtext></mrow><mtext>要求服务时间</mtext></mfrac></mrow><annotation encoding="application/x-tex">响应比=\frac{等待时间+要求服务时间}{要求服务时间}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">响应比</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">要求服务时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">等待时间</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cjk_fallback">要求服务时间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h4 id="（2）适用于交互式操作系统">（2）适用于交互式操作系统</h4><ul><li><p>时间片轮转调度算法(RR，Round-Robin)</p><ul><li><p>算法思想：公平地、轮流地为各个进程服务,让每个进程在一定时间间隔内都可以得到响应</p></li><li><p>算法规则：按照各进程到达就绪队列的顺序,轮流让各个进程执行一个时间片(如100ms)。若进程未在一个时间片内执行完,则剥夺处理机,将进程重新放到就绪队列队尾重新排队。</p></li><li><p>用于作业/进程调度：用于进程调度(只有作业放入内存建立了相应的进程后,才能被分配处理机时间片)</p></li><li><p>是否可抢占？若进程未能在时间片内运行完,将被强行剥夺处理机使用权，因此时间片轮转调度算法属于抢占式的算法。由时钟装置发出时钟中断来通知CPU时间片已到</p></li><li><p>优缺点：</p><p>优点：公平;响应快,适用于分时操作系统;</p><p>缺点:   由于高频率的进程切换,因此有一定开销;不区分任务的紧急程度。</p></li><li><p>是否会导致饥饿？不会</p></li></ul></li><li><p>优先级调度算法</p><ul><li><p>算法思想：随着计算机的发展,特别是实时操作系统的出现,越来越多的应用场景需要根据任务的紧急程度来决定处理顺序</p></li><li><p>算法规则：调度时选择优先级最高的作业/进程</p></li><li><p>用于作业/进程调度：既可用于作业调度,也可用于进程调度。甚至,还会用于在之后会学习的I/O调度中</p></li><li><p>是否可抢占？抢占式、非抢占式都有。做题时的区别在于:非抢占式只需在进程主动放弃处理机时进行调度即可,而抢占式还需在就绪队列变化时,检查是否会发生抢占。</p></li><li><p>优缺点：优点：用优先级区分紧急程度、重要程度,适用于实时操作系统。可灵活地调整对各种作业/进程的偏好程度。缺点:若源源不断地有高优先级进程到来,则可能导致饥饿</p></li><li><p>是否会导致饥饿？会</p></li></ul></li><li><p>多级反馈队列调度算法</p><ul><li>算法思想：对其他调度算法的折中权衡</li><li>算法规则：<ol><li>设置多级就绪队列,各级队列优先级从高到低,时间片从小到大</li><li>新进程到达时先进入第1级队列,按FCFS原则排队等待被分配时间片,若用完时间片进程还未结束,则进程进入下一级队列队尾,如果此时已经是在最下级的队列,则重新放回该队列队尾</li><li>只有第k级队列为空时,才会为k+1级队头的进程分配时间片</li></ol></li><li>用于用于作业/进程调度：用于进程调度</li><li>是否可抢占？**抢占式的算法。**在k级队列的进程运行过程中,若更上级的队列（1~k-1级）中进入了一个新进程，则由于新进程处于优先级更高的队列中,因此新进程会抢占处理机,原来运行的进程放回k级队列队尾。</li><li>优缺点：<ul><li>对各类型进程相对公平(FCFS的优点)</li><li>每个新到达的进程都可以很快就得到响应(RR的优点)</li><li>短进程只用较少的时间就可完成(SPF的优点)</li><li>不必实现估计进程的运行时间（避免用户作假)</li><li>可灵活地调整对各类进程的偏好程度，比如CPU密集型进程、I/O密集型进程(拓展:可以将因1/0而阻塞的进程重新放回原队列,这样I/0型进程就可以保持较高优先级)</li></ul></li><li>是否会导致饥饿？会</li></ul></li><li><p>多级队列调度算法</p></li></ul><p>按照优先级从高到低的队列分别为：</p><p>系统进程（如内存管理进程）</p><p>交互式进程（如游戏,打字软件）</p><p>批处理进程（如AI模型训练）</p><p>队列之间可采取固定优先级,或时间片划分固定优先级：高优先级空时低优先级进程才能被调度时间片划分：如三个队列分配时间50%、40%、10%</p><p>各队列可采用不同的调度策略，如系统进程队列采用优先级调度，交互式队列采用RR，批处理队列采用FCFS</p><h2 id="2-3-进程同步与互斥">2.3 进程同步与互斥</h2><h3 id="进程同步、进程互斥">进程同步、进程互斥</h3><p><strong>进程同步：</strong></p><p>同步亦称直接制约关系,它是指为完成某种任务而建立的两个或多个进程,这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作。</p><p><strong>进程互斥：</strong></p><pre><code class=" mermaid">graph LR;id1[两种资源共享方式] ---&gt;id2(互斥共享方式)id1 ---&gt;id3(同时共享方式)id2 ---&gt;id4[一个时间段内只允许一个进程访问该资源]id3 ---&gt;id5[允许一个时间段内由多个进程同时对它们进行访问]</code></pre><p>我们把一个时间段内只允许一个进程使用的资源称为临界资源。许多物理设备(比如摄像头、打印机)都属于临界资源。此外还有许多变量、数据、内存缓冲区等都属于临界资源。</p><p>对临界资源的访问,必须互斥地进行。互斥,亦称间接制约关系。进程互斥指当一个进程访问某临界资沙时,另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束,释放该资源之后,另一个进程才能去访问临界资源。</p><p><strong>访问临界资源的代码逻辑：</strong></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">do</span> <br>&#123;<br>    entry section; <span class="hljs-comment">//进入区,进入区负责检查是否可进入临界区,若可进入,则应设置正在访问临界资源的标志(可理解为&quot;上锁&quot;)，以阻止其他进程同时进入临界区</span><br>    critical section; <span class="hljs-comment">//临界区,临界区是进程中访问临界资源的代码段，也可称为“临界段”。</span><br>    <span class="hljs-built_in">exit</span> section; <span class="hljs-comment">//退出区,退出区负责解除正在访问临界资源的标志（可理解为“解锁”）</span><br>    remainder section;<span class="hljs-comment">//剩余区</span><br>&#125; <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p>进入区和退出区是负责实现互斥的代码段</p><p>为了实现对临界资源的互斥访问,同时保证系统整体性能,需要遵循以下原则:</p><ol><li>空闲让进。临界区空闲时,可以允许一个请求进入临界区的进程立即进入临界区;</li><li>忙则等待。当已有进程进入临界区时，其他试图进入临界区的进程必须等待</li><li>有限等待。对请求访问的进程,应保证能在有限时间内进入临界区(保证不会饥饿)</li><li>让权等待。当进程不能进入临界区时,应立即释放处理机,防止进程忙等待。</li></ol><h3 id="进程互斥的软件实现方法">进程互斥的软件实现方法</h3><h4 id="单标志法">单标志法</h4><p>算法思想：两个进程在<strong>访问完临界区后</strong>会把使用临界区的权限转交给另一个进程。也就是说<strong>每个进程进入临界区的权限只能被另一个进程赋予</strong></p><p>实现代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> turn = <span class="hljs-number">0</span>; <span class="hljs-comment">//turn 表示当前允许进入临界区的进程号</span><br></code></pre></td></tr></table></figure><p>P0进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(turn != <span class="hljs-number">0</span>);<br>critical section;<br>turn = <span class="hljs-number">1</span>;<br>remainder section;<br></code></pre></td></tr></table></figure><p>P1进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(turn != <span class="hljs-number">1</span>);<br>critical section;<br>turn = <span class="hljs-number">0</span>;<br>remainder section;<br></code></pre></td></tr></table></figure><p>该算法可以实现“同一时刻最多只允许一个进程访问临界区”</p><p>只能按<code>P0→P1→P0→P1→...</code> 这样轮流访问。这种必须“轮流访问”带来的问题是,如果此时允许进入临界区的进程是P0,而P0一直不访问临界区,那么虽然此时临界区空闲,但是并不允许P1访问。因此,单标志法存在的主要问题是:违背“空闲让进”原则。</p><h4 id="双标志先检查法">双标志先检查法</h4><p>算法思想：设置一个布尔型数组flag[]，数组中各个元素用来<strong>标记各进程想进入临界区的意愿</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> flag[<span class="hljs-number">2</span>];<br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>P0进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//1</span><br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//2</span><br>critical section;<span class="hljs-comment">//3</span><br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>; <span class="hljs-comment">//4</span><br>remainder section;<br></code></pre></td></tr></table></figure><p>P1进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//5</span><br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//6</span><br>critical section; <span class="hljs-comment">//7</span><br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//8</span><br>remainder section;<br></code></pre></td></tr></table></figure><p>按照152637执行，P0和P1会同时访问临界区</p><p>双标志先检查法的主要问题是:违反“忙则等待”原则。原因在于,进入区的“检查”和“上锁”两个处理不是一气呵成的。“检查”后, “上锁”前可能发生进程切换。</p><h4 id="双标志后检查法">双标志后检查法</h4><p>算法思想:双标志先检查法的改版。前一个算法的问题是先“检查”后“上锁” ,但是这两个操作又无法一气呵成,因此导致了两个进程同时进入临界区的问题。因此,人们又想到先“上锁”后“检查”的方法,来避免上述问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> flag[<span class="hljs-number">2</span>];<br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure><p>P0进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">//1</span><br><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">1</span>]);  <span class="hljs-comment">//2</span><br>critical section;<span class="hljs-comment">//3</span><br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>; <span class="hljs-comment">//4</span><br>remainder section;<br></code></pre></td></tr></table></figure><p>P1进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;   <span class="hljs-comment">//5</span><br><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//6</span><br>critical section; <span class="hljs-comment">//7</span><br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">//8</span><br>remainder section;<br></code></pre></td></tr></table></figure><p>按照1526的顺序执行，P0和P1都无法进入临界区</p><p>双标志后检查法虽然解决了“忙则等待”的问题,但是又违背了“空闲让进”和“有限等待原则,会因各进程都长期无法访问临界资源而产生“饥饿”现象。两个进程都争着想进入临界区,但是谁也不让谁,最后谁都无法进入临界区。</p><h4 id="Peterson算法">Peterson算法</h4><p>算法思想:结合双标志法、单标志法的思想。如果双方都争着想进入临界区,那可以让进程尝试“孔融让梨” (谦让)。做一个有礼貌的进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> flag[<span class="hljs-number">2</span>];<br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br><span class="hljs-type">int</span> turn = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>P0进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br>turn = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">1</span>] &amp;&amp; turn ==<span class="hljs-number">1</span>);<br>critical section;<br>flag[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>remainder section;<br></code></pre></td></tr></table></figure><p>P1进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br>turn = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(flag[<span class="hljs-number">0</span>] &amp;&amp; turn == <span class="hljs-number">0</span>);<br>critical section;<br>flag[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>remainder section;<br></code></pre></td></tr></table></figure><p>Peterson 算法用软件方法解决了进程互斥问题,遵循了空闲让进、忙则等待、有限等待三个原则,但是依然未遵循让权等待的原则（进不了临界区就卡在while循环，而不是让出处理机）。</p><h3 id="进程互斥的硬件实现方法">进程互斥的硬件实现方法</h3><h4 id="中断屏蔽方法">中断屏蔽方法</h4><p>利用“开/关中断指令”实现(与原语的实现思想相同,即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况)</p><p>优点：简单、高效</p><p>缺点:不适用于多处理机; 只适用于操作系统内核进程,不适用于用户进程(因为开/关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险)</p><h4 id="TestAndSet指令">TestAndSet指令</h4><p>简称TS指令，或TSL指令</p><p>简称TS指令,也有地方称为TestAndSetLock指令,或TSL指令TSL指令是用硬件实现的,执行的过程不允许被中断,只能一气呵成。以下是用c语言描述的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//布尔型共享变量 lock 表示当前临界区是否被加锁</span><br><span class="hljs-comment">//true 表示已加锁，false 表示未加锁</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">TestAndSet</span> <span class="hljs-params">(<span class="hljs-type">bool</span> *lock)</span>&#123;<br>    <span class="hljs-type">bool</span> old;<br>    old = *lock; <span class="hljs-comment">//old用来存放lock原来的值</span><br>    *lock = <span class="hljs-literal">true</span>;<span class="hljs-comment">//无论之前是否已加锁，都将lock设为true</span><br>    <span class="hljs-keyword">return</span> old;<span class="hljs-comment">//返回lock原来的值</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//以下是使用 TSL 指令实现互斥的算法逻辑</span><br><span class="hljs-keyword">while</span> (TestAndSet (&amp;lock)); <span class="hljs-comment">//&quot;上锁&quot;并&quot;检查”</span><br>临界区代码段..<br>lock = <span class="hljs-literal">false</span>;<span class="hljs-comment">//“解锁”</span><br>剩余区代码段...<br></code></pre></td></tr></table></figure><p>优点:</p><p>实现简单,无需像软件实现方法那样严格检查是否会有逻辑漏洞</p><p>适用于多处理机环境</p><p>缺点:</p><p>不满足“让权等待”原则,暂时无法进入临界区的进程会占用CPU并循环执行TSL指令,从而导致“忙等”。</p><h4 id="Swap指令">Swap指令</h4><p>也称为XCHG指令</p><p>Swap 指令是用硬件实现的，执行的过程不允许被中断，只能一气呵成。以下是用C语言描述的逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//以下是用 Swap 指令实现互斥的算法逻辑</span><br><span class="hljs-comment">//lock 表示当前临界区是否被加锁</span><br><span class="hljs-type">bool</span> old = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">while</span> (old== <span class="hljs-literal">true</span>)<br>    Swap (&amp;lock, &amp;old);<br>临界区代码段...<br>lock = <span class="hljs-literal">false</span>;<br>剩余区代码段…..<br></code></pre></td></tr></table></figure><p>优缺点同<a href="#TestAndSet%E6%8C%87%E4%BB%A4">TestAndSet指令</a></p><h3 id="互斥锁">互斥锁</h3><p>互斥锁mutex lock，也称为自旋锁spin lock</p><p>特性：</p><ul><li>需忙等，进程时间片用完才下处理机,违反“让权等待”</li><li>优点:等待期间不用切换进程上下文,多处理器系统中,若上锁的时间短,则等待代价很低</li><li>常用于多处理器系统,一个核忙等,其他核照常工作,并快速释放临界区</li><li>不太适用于单处理机系统，忙等的过程中不可能解锁</li></ul><h3 id="信号量机制">信号量机制</h3><p><strong>信号量</strong>其实就是一个变量(可以是一个整数，也可以是更复杂的记录型变量)，可以用一个信号量来表示系统中某种资源的数量,比如:“系统中只有一台打印机,就可以设置一个初值为1的信号量。</p><p><strong>原语</strong>是一种特殊的程序段,其执行只能一气呵成,不可被中断。原语是由关中断/开中断指令实现的。软件解决方案的主要问题是由“进入区的各种操作无法一气呵成”,因此如果能把进入区、退出区的操作都用“原语”实现,使这些操作能“一气呵成”就能避免问题。</p><p>一对原语: wait(S)原语和signal(S)原语,可以把原语理解为我们自己写的函数,函数名分别为wait和 signal，括号里的信号量 S 其实就是函数调用时传入的一个参数。</p><p>wait、signal原语常简称为P、V操作(来自荷兰语proberen和verhogen)。因此，做题的时候常把wait(S)、 signal(S)两个操作分别写为P(S)、V(S)</p><h4 id="整型信号量">整型信号量</h4><ul><li>用一个整数型变量作为信号量，数值表示某种资源数</li><li>整型信号量与普通整型变量的区别：对信号量只能执行 初始化、P、V 三种操作</li><li>整型信号量存在的问题：不满足让权等待原则</li></ul><h4 id="记录型信号量">记录型信号量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*记录型信号量的定义*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<span class="hljs-comment">//剩余资源数</span><br>    Struct process *L; <span class="hljs-comment">//等待队列</span><br>&#125; semaphore;<br><span class="hljs-comment">/*某进程需要使用资源时,通过 wait 原语申请*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">wait</span> <span class="hljs-params">(semaphore S)</span> &#123;<br>    S.value--;<br>    <span class="hljs-keyword">if</span> (S.value &lt; <span class="hljs-number">0</span> ) &#123; <br>        block (S.L);<span class="hljs-comment">//自我阻塞，将当前运行的进程从运行态变为阻塞态</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*进程使用完资源后,通过 signal 原语释放*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">signal</span> <span class="hljs-params">(semaphore S)</span>&#123;<br>    S.value++;<br>    <span class="hljs-keyword">if</span> (S.value &lt;= <span class="hljs-number">0</span>) &#123;<br>        wakeup(S.L);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//进程代码</span><br>...<br>wait(S);<br>使用打印机<br>signal(S);<br>...<br></code></pre></td></tr></table></figure><h3 id="用信号量实现进程互斥、同步、前驱关系">用信号量实现进程互斥、同步、前驱关系</h3><h4 id="实现进程互斥">实现进程互斥</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore mutex=<span class="hljs-number">1</span>;<span class="hljs-comment">//初始化信号量</span><br>P1()&#123;<br>    P(mutex);<span class="hljs-comment">//使用临界资源前加锁</span><br>    临界区代码;<br>    V(mutex);<span class="hljs-comment">//使用临界资源后解锁</span><br>&#125;<br>P2()&#123;<br>    P(mutex);<br>    临界区代码;<br>    V(mutex);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="实现进程同步">实现进程同步</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*信号量机制实现同步*/</span><br>semaphore S=<span class="hljs-number">0</span>; <span class="hljs-comment">//初始化同步信号量，初始值为0</span><br>P1()&#123;<br>    代码<span class="hljs-number">1</span>;<br>    代码<span class="hljs-number">2</span>;<br>    V(S);<br>    代码<span class="hljs-number">3</span>;<br>&#125;<br>P2()&#123;<br>    P(S);<br>    代码<span class="hljs-number">4</span>;<br>    代码<span class="hljs-number">5</span>;<br>    代码<span class="hljs-number">6</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以保证代码4一定在代码2之后执行</p><h4 id="实现前驱关系">实现前驱关系</h4><pre><code class=" mermaid">graph TD;id1(S1)--a--&gt;id2(S2)id1 --b--&gt; id3(S3)id2--c--&gt;id4(S4)id2 --d--&gt; id5(S5)id4--e--&gt;id6(S6)id5--f--&gt;id6id3--g--&gt;id6</code></pre><p>实现方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c">P1()&#123;<br>    S1;<br>    V(a);<br>    V(b);<br>&#125;<br>P2()&#123;<br>    P(a);<br>    S2;<br>    V(c);<br>    V(d);<br>&#125;<br>P3()&#123;<br>    P(b);<br>    S3;<br>    V(g);<br>&#125;<br>P4()&#123;<br>    P(c);<br>    S4;<br>    V(e);<br>&#125;<br>P5()&#123;<br>    P(d);<br>    S5;<br>    V(f);<br>&#125;<br>P6()&#123;<br>    P(e);<br>    P(f);<br>    P(g);<br>    S6;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者-消费者问题">生产者-消费者问题</h3><p>系统中有一组生产者进程和一组消费者进程,生产者进程每次生产一个产品放入缓冲区,消费者进程每次从缓冲区中取出一个产品并使用。(注:这里的“产品”理解为某种数据)</p><p>生产者、消费者共享一个初始为空、大小为n的缓冲区。</p><ul><li><p>只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待。</p></li><li><p>只有缓冲区不空时,消费者才能从中取出产品,否则必须等待。</p></li><li><p>缓冲区是临界资源，各进程必须互斥地访问。</p></li></ul><pre><code class=" mermaid">graph LR;id1[有产品,缓冲区没空,V]--full--&gt;id2[P,消费者消费];id3[缓冲区没满,V]--empty--&gt;id4[P,生产者生产]</code></pre><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore mutex = <span class="hljs-number">1</span>; <span class="hljs-comment">//互斥信号量,实现对缓冲区的互斥访问</span><br>semaphore empty = n; <span class="hljs-comment">//同步信号量,表示空闲缓冲区的数量</span><br>semaphore full = <span class="hljs-number">0</span>;<span class="hljs-comment">//同步信号量,表示产品的数量,也即非空缓冲区的数量</span><br>producer()&#123;<span class="hljs-comment">//生产者</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    生产一个产品;<br>    P(empty);<span class="hljs-comment">//消耗一个空闲缓冲区</span><br>    P(mutex);<br>    把产品放入缓冲区;<br>    V(mutex);<br>    V(full);<span class="hljs-comment">//增加一个产品</span><br>    &#125;<br>&#125;<br>consumer()&#123;<span class="hljs-comment">//消费者</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(full);<span class="hljs-comment">//消耗一个产品</span><br>        P(mutex);<br>        从缓冲区取出一个产品;<br>        V(mutex);<br>        V(empty);<span class="hljs-comment">//增加一个空闲缓冲区</span><br>        使用产品;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了避免死锁，实现互斥的P操作一定要在实现同步的P操作之后。</p><p>上面的例子中，如果颠倒<code>P(empty);</code>和<code>P(mutex);</code>的顺序就会造成死锁</p><p>但是<code>V(mutex);</code>和<code>V(full);</code>的顺序可以交换</p><p>生产产品和使用产品的代码可以放在PV操作之间，但是为了让临界区的代码尽可能短，一般不会将这些代码放在PV操作之间</p><h3 id="多生产者-多消费者问题">多生产者-多消费者问题</h3><p>桌子上有一只盘子,每次只能向其中放入一个水果。</p><p>爸爸专向盘子中放苹果,妈妈专向盘子中放橘子,儿子专等着吃盘子中的橘子,女儿专等着吃盘子中的苹果。</p><p>只有盘子空时,爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时,儿子或女儿可以从盘子中取出水果。</p><p>互斥关系：对缓冲区(盘子)的访问要互斥地进行</p><p>同步关系（一前一后）：</p><ol><li><p>父亲将苹果放入盘子后,女儿才能取苹果</p></li><li><p>母亲将橘子放入盘子后,儿子才能取橘子</p></li><li><p>只有盘子为空时,父亲或母亲才能放入水果</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore mutex = <span class="hljs-number">1</span>; <span class="hljs-comment">//实现互斥访问盘子(缓冲区)</span><br>semaphore apple = <span class="hljs-number">0</span>; <span class="hljs-comment">//盘子中有几个苹果</span><br>semaphore orange = <span class="hljs-number">0</span>; <span class="hljs-comment">//盘子中有几个橘子</span><br>semaphore plate = <span class="hljs-number">1</span>;<span class="hljs-comment">//盘子中还可以放多少个水果</span><br>dad()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        准备一个🍎;<br>        P(plate);<br>        P(mutex);<br>        把🍎放入盘子;<br>        V(mutex);<br>        V(apple);<br>    &#125;<br>&#125;<br>mom&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        准备一个🍊;<br>        P(plate);<br>        P(mutex);<br>        把🍊放入盘子;<br>        V(mutex);<br>        V(orange);<br>    &#125;<br>&#125;<br>daughter&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(apple);<br>        P(mutex);<br>        从盘中取走🍎;<br>        V(mutex);<br>        V(plate);<br>        吃掉🍎;<br>    &#125;<br>&#125;<br>son&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(orange);<br>        P(mutex);<br>        从盘中取走🍊;<br>        V(mutex);<br>        V(plate);<br>        吃掉🍊;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，不用mutex，也可以实现对盘子的互斥访问</p><h3 id="吸烟者问题">吸烟者问题</h3><p>假设一个系统有三个抽烟者进程和一个供应者进程。每个抽烟者不停地卷烟并抽掉它,但是要卷起并抽掉一支烟,抽烟者需要有三种材料:烟草、纸和胶水。</p><p>三个抽烟者中,第一个拥有烟草、第二个拥有纸、第三个拥有胶水。</p><p>供应者进程无限地提供三种材料,供应者每次将两种材料放桌子上, 拥有剩下那种材料的抽烟者卷一根烟并抽掉它,并给供应者进程一个信号告诉完成了,供应者就会放另外两种材料再桌上，这个过程一直重复（让三个抽烟者轮流地抽烟）</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240123153351132.png" alt="image-20240123153351132"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore offer1 = <span class="hljs-number">0</span>; <span class="hljs-comment">//桌上组合一的数量</span><br>semaphore offer2 = <span class="hljs-number">0</span>; <span class="hljs-comment">//桌上组合二的数量</span><br>semaphore offer3 = <span class="hljs-number">0</span>; <span class="hljs-comment">//桌上组合三的数量</span><br>semaphore finish = <span class="hljs-number">0</span>; <span class="hljs-comment">//抽烟是否完成</span><br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<span class="hljs-comment">//用于实现“三个抽烟者轮流抽烟”</span><br>provider()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>            把组合一放在桌儿上;<br>            V(offer1);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;<br>            把组合二放在桌儿上;<br>            V(offer2);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            把组合三放在桌儿上;<br>            V(offer3);<br>        &#125;<br>    &#125;<br>    i=(i+<span class="hljs-number">1</span>)%<span class="hljs-number">3</span>;<br>    P(finish);<br>&#125;<br>smoker1()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(offer1);<br>        从桌上拿走组合一;卷烟;抽掉;<br>        V(finish);<br>    &#125;<br>&#125;<br>smoker2()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(offer2);<br>        从桌上拿走组合二;卷烟;抽掉;<br>        V(finish);<br>    &#125;<br>&#125;<br>smoker3()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(offer3);<br>        从桌上拿走组合三;卷烟;抽掉;<br>        V(finish);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读者写者问题">读者写者问题</h3><p>有读者和写者两组并发进程,共享一个文件。</p><p>当两个或两个以上的读进程同时访问共享数据时不会产生副作用,但若某个写进程和其他进程(读进程或写进程)同时访问共享数据时则可能导致数据不一致的错误。</p><p>因此要求:</p><ol><li><p>允许多个读者可以同时对文件执行读操作;</p></li><li><p>只允许一个写者往文件中写信息</p></li><li><p>任一写者在完成写操作之前不允许其他读者或写者工作</p></li><li><p>写者执行写操作前,应让已有的读者和写者全部退出。</p></li></ol><p>实现代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c">semaphore rw=<span class="hljs-number">1</span>;<span class="hljs-comment">//用于实现对共享文件的互斥访问</span><br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<span class="hljs-comment">//记录当前有几个读进程在访问文件</span><br>semaphore mutex = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于保证对count变量的互斥访问</span><br>semaphore w = <span class="hljs-number">1</span>;<span class="hljs-comment">//用于实现“读写公平”</span><br>writer()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(w);<br>        P(rw);<br>        写文件;<br>        V(rw);<br>        V(w);<br>    &#125;<br>&#125;<br>reader()&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        P(w);<br>        P(mutex);<br>        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>)<br>            P(rw);<br>        count++;<br>        V(mutex);<br>        V(w);<br>        读文件;<br>        P(mutex);<br>        count--;<br>        <span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>)<br>            V(rw);<br>        V(mutex);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="哲学家进餐问题">哲学家进餐问题</h3><p>一张圆桌上坐着5名哲学家,每两个哲学家之间的桌上摆一根筷子,桌子的中间是一碗米饭。</p><p>哲学家们倾注毕生的精力用于思考和进餐,哲学家在思考时,并不影响他人。只有当哲学家饥饿时,才试图拿起左、右两根筷子(一根一根地拿起)。</p><p>如果筷子已在他人手上,则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐,当进餐完毕后,放下筷子继续思考。</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240124160526493.png" alt="哲学家进餐"></p><p>要求：避免死锁</p><p>解决方案</p><p>①可以对哲学家进程施加一些限制条件，比如最多允许四个哲学家同时进餐。这样可以保证至少有一个哲学家是可以拿到左右两只筷子的</p><p>②要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子,而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一只筷子,另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况。</p><p>③仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子。</p><h3 id="管程">管程</h3><p>为什么要引入管程？</p><p>解决信号量机制编程麻烦、易出错的问题</p><p>组成：</p><ul><li>共享数据结构</li><li>组成对数据结构初始化的语句</li><li>一组用来访问数据结构的过程（函数)</li></ul><p>基本特征：</p><ul><li>各外部进程/线程只能通过管程提供的特定“入口&quot;才能访问共享数据</li><li>每次仅允许一个进程在管程内执行某个内部过程</li></ul><p>补充：</p><ul><li>各进程必须互斥访问管程的特性是由编译器实现的</li><li>可在管程中设置条件变量及等待/唤醒操作以解决同步问题</li></ul><h2 id="2-4-死锁">2.4 死锁</h2><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126163425186.png" alt="死锁"></p><h3 id="预防死锁">预防死锁</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126171410797.png" alt="image-20240126171410797"></p><h4 id="破坏互斥条件">破坏互斥条件</h4><p>如果把只能互斥使用的资源改造为允许共享使用,则系统不会进入死锁状态。</p><p>比如:<code>SPOOLing</code>技术。操作系统可以采用<code>SPOOLing</code>技术把独占设备在逻辑上改造成共享设备。比如,用<code>SPOOLing</code>技术将打印机改造为共享设备…</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126165335095.png" alt="image-20240126165335095"></p><p>该策略的缺点：并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性。因此，很多时候都无法破坏互斥条件。</p><h4 id="破坏不剥夺条件">破坏不剥夺条件</h4><p><strong>不剥夺条件:</strong></p><p>进程所获得的资源在未使用完之前,不能由其他进程强行夺走,只能主动释放。</p><p><strong>破坏不剥夺条件：</strong></p><p>方案一:</p><p>当某个进程请求新的资源得不到满足时,它必须立即释放保持的所有资源,待以后需要时再重新申请。也就是说,即使某些资源尚未使用完,也需要主动释放,从而破坏了不可剥夺条件。</p><p>方案二:</p><p>当某个进程需要的资源被其他进程所占有的时候,可以由操作系统协助,将想要的资源强行剥夺。这种方式一般需要考虑各进程的优先级(比如:剥夺调度方式,就是将处理机资源强行剥夺给优先级更高的进程使用)</p><p><strong>该策略的缺点：</strong></p><ol><li>实现起来比较复杂。</li><li>释放已获得的资源可能造成前一阶段工作的失效。因此这种方法一般只适用于易保存和恢复状态的资源，如CPU。</li><li>反复地申请和释放资源会增加系统开销,降低系统吞吐量</li><li>若采用方案一,意味着只要暂时得不到某个资源,之前获得的那些资源就都需要放弃,以后再重新申请。如果一直发生这样的情况,就会导致进程饥饿。</li></ol><h4 id="破坏请求和保持条件">破坏请求和保持条件</h4><p><strong>请求和保持条件：</strong></p><p>进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放。</p><p>可以采用<strong>静态分配方法</strong>,即进程在运行前一次申请完它所需要的全部资源,在它的资源未满足前,不让它投入运行。一旦投入运行后,这些资源就一直归它所有,该进程就不会再请求别的任何资源了。</p><p>该策略实现起来简单,但也有明显的<strong>缺点</strong>:</p><p>有些资源可能只需要用很短的时间，因此如果进程的整个运行期间都一直保持着所有资源，就会造成严重的资源浪费,资源利用率极低。另外,该策略也有可能导致某些进程饥饿。</p><pre><code class=" mermaid">graph LR;id1(A类进程) ---&gt; id2[资源1]id5(C类进程) ---&gt; id2id5 ---&gt;id4id3(B类进程) ---&gt; id4[资源2]</code></pre><h4 id="破坏循环等待条件">破坏循环等待条件</h4><p>循环等待条件:</p><p>存在一种进程资源的循环等待链,链中的每一个进程已获得的资源同时被下一个进程所请求。</p><p>可采用顺序资源分配法。首先给系统中的资源编号,规定每个进程必须按编号递增的顺序请求资源,同类资源(即编号相同的资源)一次申请完。</p><p>原理分析:一个进程只有已占有小编号的资源时,才有资格申请更大编号的资源。按此规则,已持有大编号资源的进程不可能逆向地回来申请小编号的资源,从而就不会产生循环等待的现象。</p><p>该策略的缺点：</p><ol><li>不方便增加新的设备,因为可能需要重新分配所有的编号</li><li>进程实际使用资源的顺序可能和编号递增顺序不一致,会导致资源浪费</li><li>必须按规定次序申请资源,用户编程麻烦。</li></ol><h3 id="避免死锁">避免死锁</h3><p>银行家算法</p><p>银行家算法是荷兰学者Dijkstra为银行系统设计的,以确保银行在发放现金贷款时,不会发生不能满足所有客户需要的情况。后来该算法被用在操作系统中，用于避免死锁。</p><p>核心思想:在进程提出资源申请时,先预判此次分配是否会导致系统进入不安全状态。如果会进入不安全状态,就暂时不答应这次请求,让该进程先阻塞等待。</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126173222368.png" alt="银行家算法"></p><p>银行家算法步骤:</p><p>①检查此次申请是否超过了之前声明的最大需求数</p><p>②检查此时系统剩余的可用资源是否还能满足这次请求</p><p>③试探着分配，更改各数据结构</p><p>④用安全性算法检查此次分配是否会导致系统进入不安全状态</p><h3 id="死锁的检测和解除">死锁的检测和解除</h3><p><strong>检测死锁的算法：</strong></p><p>数据结构: 资源分配图</p><p>1)在资源分配图中,找出既不阻塞又不是孤点的进程Pi (即找出一条有向边与它相连,且该有向边对应资源的申请数量小于等于系统中已有空闲资源数量。若所有的连接该进程的边均满足上述条件,则这个进程能继续运行直至完成,然后释放它所占有的所有资源)。消去它所有的请求边和分配边,使之称为孤立的结点。</p><p>2)进程Pi所释放的资源,可以唤醒某些因等待这些资源而阻塞的进程,原来的阻塞进程可能变为非阻塞进程。根据 1)中的方法进行一系列简化后,若能消去途中所有的边,则称该图是可完全简化的。</p><p>死锁定理:如果某时刻系统的资源分配图是不可完全简化的，那么此时系统死锁</p><p><strong>死锁的解除</strong></p><ol><li><p>资源剥夺法。挂起(暂时放到外存上)某些死锁进程,并抢占它的资源,将这些资源分配给其他的死锁进程。但是应防止被挂起的进程长时间得不到资源而饥饿。</p></li><li><p>撤销进程法(或称终止进程法)。强制撤销部分、甚至全部死锁进程,并剥夺这些进程的资源。这种方式的优点是实现简单，但所付出的代价可能会很大。因为有些进程可能已经运行了很长时间,已经接近结束了,一旦被终止可谓功亏一篑,以后还得从头再来。</p></li><li><p>进程回退法。让一个或多个死锁进程回退到足以避免死锁的地步。这就要求系统要记录进程的历史信息，设置还原点。</p></li></ol><p><strong>决定对哪个进程动手</strong></p><ol><li>进程优先级</li><li>已执行多长时间</li><li>还要多久能完成</li><li>进程已经使用了多少资源</li><li>进程是交互式的还是批处理式的</li></ol><h2 id="3-1-内存">3.1 内存</h2><h3 id="基础知识">基础知识</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126180906116.png" alt="内存基础知识"></p><h3 id="内存管理">内存管理</h3><p>内存保护:</p><p>方法一：在CPU中设置一对上、下限寄存器，存放进程的上、下限地址。进程的指令要访问某个地址时，CPU检查是否越界。</p><p>方法二:采用重定位寄存器(又称基址寄存器)和界地址寄存器（又称限长寄存器）进行越界检查。重定位寄存器中存放的是进程的起始物理地址。界地址寄存器中存放的是进程的最大逻辑地址。</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240126181656279.png" alt="内存管理"></p><h3 id="覆盖与交换">覆盖与交换</h3><p>解决内存大小不够的问题</p><h4 id="覆盖技术">覆盖技术</h4><p>覆盖技术的思想:将程序分为多个段(多个模块)。常用的段常驻内存,不常用的段在需要时调入内存。</p><p>内存中分为一个“固定区”和若干个“覆盖区”。</p><p>需要常驻内存的段放在“固定区”中,调入后就不再调出（除非运行结束）</p><p>不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存</p><p>必须由程序员声明覆盖结构,操作系统完成自动覆盖。缺点: 对用户不透明,增加了用户编程负担。覆盖技术只用于早期的操作系统中，现在已成为历史。</p><h4 id="交换技术">交换技术</h4><p>交换(对换)技术的设计思想:内存空间紧张时,系统将内存中某些进程暂时换出外存,把外存中某些已具备运行条件的进程换入内存(进程在内存与磁盘间动态调度)</p><p>等同于 <a href="#%E8%B0%83%E5%BA%A6%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%B1%82%E6%AC%A1">中级调度</a></p><ol><li>具有对换功能的操作系统中,通常把磁盘空间分为文件区和对换区两部分。文件区主要用于存放文件,主要追求存储空间的利用率,因此对文件区空间的管理采用离散分配方式；对换区空间只占磁盘空间的小部分，被换出的进程数据就存放在对换区。由于对换的速度直接影响到系统的整体速度,因此对换区空间的管理主要追求换入换出速度,因此通常对换区采用连续分配方式(学过文件管理章节后即可理解)。总之,对换区的I/O速度比文件区的更快。</li><li>交换通常在许多进程运行且内存吃紧时进行,而系统负荷降低就暂停。例如:在发现许多进程运行时经常发生缺页,就说明内存紧张,此时可以换出一些进程；如果缺页率明显下降,就可以暂停换出。</li><li>可优先换出阻塞进程;可换出优先级低的进程;为了防止优先级低的进程在被调入内存后很快又被换出,有的系统还会考虑进程在内存的驻留时间……</li></ol><p>(注意: PCB会常驻内存,不会被换出外存)</p><h3 id="连续内存分配">连续内存分配</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240128215535781.png" alt="连续内存分配"></p><h3 id="动态分区分配算法">动态分区分配算法</h3><table><thead><tr><th>算法</th><th>算法思想</th><th>分区排列顺序</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>首次适应</td><td>优先使用更小的分区,以保留更多大分区空闲分区</td><td>以容量递增次序排列</td><td>会有更多的大分区被保留下来，更能满足大进程需求</td><td>会产生很多太小的、难以利用的碎片；算法开销大，回收分区后可能需要对空闲分区队列重新排序</td></tr><tr><td>最佳适应</td><td>优先使用更小的分区,以保留更多大分区</td><td>空闲分区以容量递增次序排列</td><td>会有更多的大分区被保留下来，更能满足大进程需求</td><td>会产生很多太小的、难以利用的碎片；算法开销大，回收分区后可能需要对空闲分区队列重新排序</td></tr><tr><td>最坏适应</td><td>优先使用更大的分区，以防止产生太小的不可用的碎片</td><td>空闲分区以容量递减次序排列</td><td>可以减少难以利用的小碎片</td><td>大分区容易被用完，不利于大进程；算法开销大（原因同上）</td></tr><tr><td>邻近适应</td><td>由首次适应演变而来，每次从上次查找结束位置开始查找</td><td>空闲分区以地址递增次序排列（可排列成循环链表）</td><td>不用每次都从低地址的小分区开始检索。算法开销小（原因同首次适应算法)</td><td>会使高地址的大分区也被用完</td></tr></tbody></table><h3 id="基本分页存储管理">基本分页存储管理</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240128220441376.png" alt="分页存储管理"></p><h3 id="两级页表">两级页表</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240129075910196.png" alt="两级页表"></p><h2 id="4-1-文件">4.1 文件</h2><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240129083459473.png" alt="初识文件管理"></p><h3 id="文件的逻辑结构">文件的逻辑结构</h3><ul><li>无结构文件<ul><li>由二进制流或字符流组成,无明显的逻辑结构</li></ul></li><li>有结构文件<ul><li>由记录组成,分为定长记录、可变长记录</li></ul></li></ul><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240129085449954.png" alt="有结构文件"></p><h3 id="文件目录">文件目录</h3><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240130210910236.png" alt="文件目录"></p><h3 id="文件物理结构">文件物理结构</h3><p>用户给出要访问的逻辑块号,操作系统找到该文件对应的目录项(FCB) …</p><p><img src="./%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.assets/image-20240130223624530.png" alt="文件物理结构"></p><h4 id="连续分配">连续分配</h4><p>物理块号=起始块号+逻辑块号</p><p>当然,还需要检查用户提供的逻辑块号是否合法(逻辑块号≥长度就不合法)</p><p>优点：可以随机访问磁盘块</p><p>缺点：</p><ol><li>物理上采用连续分配，存储空间利用率低，会产生难以利用的磁盘碎片可以用紧凑来处理碎片，但是需要耗费很大的时间代价。</li><li>物理上采用连续分配的文件不方便拓展。</li></ol><h4 id="隐式链接分配">隐式链接分配</h4><p>从目录项中找到起始块号(即0号块) ,将0号逻辑块读入内存，由此知道1号逻辑块存放的物理块号,于是读入1号逻辑块,再找到2号逻辑块的存放位置…以此类推。因此,读入i号逻辑块,总共需要i+1次磁盘I/O</p><p>优点:很方便文件拓展,不会有碎片问题,外存利用率高。</p><p>缺点:只支持顺序访问,不支持随机访问,查找效率低,指向下一个盘块的指针也需要耗费少量的存储空间。</p><h4 id="显式链接分配">显式链接分配</h4><p>把用于链接文件各物理块的指针显式地存放在一张表中，即文件分配表(FAT， File Allocation Table)。一个磁盘只会建立一张文件分配表。开机时文件分配表放入内存,并常驻内存。</p><p>优点:很方便文件拓展,不会有碎片问题,外存利用率高,并且支持随机访问。相比于隐式链接来说,地址转换时不需要访问磁盘,因此文件的访问效率更高。</p><p>缺点:文件分配表的需要占用一定的存储空间。</p><h4 id="索引分配">索引分配</h4><p>索引分配允许文件离散地分配在各个磁盘块中,系统会为每个文件建立一张索引表,索引表中记录了文件的各个逻辑块对应的物理块</p><p>（索引表的功能类似于内存管理中的页表—-建立逻辑页面到物理页之间的映射关系)。索引表存放的磁盘块称为索引块。文件数据存放的磁盘块称为数据块。</p><p>索引分配方式可以支持<strong>随机访问</strong>。<strong>文件拓展</strong>也很容易实现（只需要给文件分配一个空闲块,并增加一个索引表项即可)</p><p>若文件太大,索引表项太多,可以采取以下<strong>三种方法解决</strong>:</p><ol><li><p><strong>链接方案</strong>:如果索引表太大,一个索引块装不下,那么可以将多个索引块链接起来存放。</p><p>缺点:若文件很大,索引表很长,就需要将很多个索引块链接起来。想要找到i号索引块,必须先依次读入0~i-1号索引块,这就导致磁盘I/O次数过多,查找效率低下。</p></li><li><p><strong>多层索引</strong>：建立多层索引（原理类似于多级页表）。使第一层索引块指向第二层的索引块。还可根据文件大小的要求再建立第三层、第四层索引块。采用K层索引结构,且顶级索引表未调入内存,则访问一个数据块只需要K+1次读磁盘操作。</p><p>缺点:即使是小文件,访问一个数据块依然需要K+1次读磁盘</p></li><li><p><strong>混合索引</strong>:多种索引分配方式的结合。例如,一个文件的顶级索引表中,既包含直接地址索引(直接指向数据块),又包含一级间接索引(指向单层索引表)、还包含两级间接索引(指向两层索引表) 。</p><p>优点:对于小文件来说,访问一个数据块所需的读磁盘次数更少。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>probability-and-statistics</title>
    <link href="/2023/11/25/probability-and-statistics/"/>
    <url>/2023/11/25/probability-and-statistics/</url>
    
    <content type="html"><![CDATA[<h1>概率论与数理统计</h1><h2 id="高数预备知识">高数预备知识</h2><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><msup><mi>e</mi><mrow><mo>−</mo><msup><mi>x</mi><mn>2</mn></msup></mrow></msup><mi>d</mi><mi>x</mi><mo>=</mo><msqrt><mi>π</mi></msqrt></mrow><annotation encoding="application/x-tex">\int_{-\infin}^{+\infin}e^{-x^2}dx=\sqrt\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4915em;vertical-align:-0.9703em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0369em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1908em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;padding-left:0.833em;">π</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span></span></span></span></span></p><p>伽马函数</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><msup><mi>x</mi><mrow><mi>α</mi><mo>−</mo><mn>1</mn></mrow></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup><mi>d</mi><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>α</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\Gamma(\alpha)=\int_0^{+\infin}x^{\alpha-1}e^{-x}dx=(\alpha-1)\Gamma(\alpha-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4332em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8213em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">)</mo><mo>=</mo><msqrt><mi>π</mi></msqrt></mrow><annotation encoding="application/x-tex">\Gamma(\frac 12)=\sqrt\pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1908em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;padding-left:0.833em;">π</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span></span></span></span></span></p><p>贝塔函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><mi>q</mi><mo>&gt;</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(p&gt;0,q&gt;0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>B</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">Γ</mi><mo stretchy="false">(</mo><mi>p</mi><mo>+</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></mfrac><mo>=</mo><msubsup><mo>∫</mo><mn>0</mn><mn>1</mn></msubsup><msup><mi>x</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>x</mi><msup><mo stretchy="false">)</mo><mrow><mi>q</mi><mo>−</mo><mn>1</mn></mrow></msup><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">B(p,q)=\frac{\Gamma(p)\Gamma(q)}{\Gamma(p+q)}=\int _0^1x^{p-1}(1-x)^{q-1}dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span><span class="mord">Γ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.476em;vertical-align:-0.9119em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.564em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></p><h2 id="分布函数">分布函数</h2><h3 id="0-1分布">0-1分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>b</mi><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim b(1,p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mo>−</mo><mi>k</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">P\{X=k\}=p^k(1-p)^{1-k},k=0,1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi></mrow><annotation encoding="application/x-tex">E(X)=p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(X)=p(1-p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><h3 id="二项分布">二项分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>b</mi><mo stretchy="false">(</mo><mi>n</mi><mo separator="true">,</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim b(n,p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><msubsup><mi>C</mi><mi>n</mi><mi>k</mi></msubsup><msup><mi>p</mi><mi>k</mi></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><msup><mo stretchy="false">)</mo><mrow><mi>n</mi><mo>−</mo><mi>k</mi></mrow></msup><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">P\{X=k\}=C_n^kp^k(1-p)^{n-k},k=0,1,...,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1491em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">E(X)=np</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><mi>p</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D(X)=np(1-p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span></span></p><h3 id="泊松分布">泊松分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>π</mi><mo stretchy="false">(</mo><mi>λ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim \pi(\lambda)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>X</mi><mo>=</mo><mi>k</mi><mo stretchy="false">}</mo><mo>=</mo><mfrac><mrow><msup><mi>λ</mi><mi>k</mi></msup><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi></mrow></msup></mrow><mrow><mi>k</mi><mo stretchy="false">!</mo></mrow></mfrac><mo separator="true">,</mo><mi>k</mi><mo>=</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">P\{X=k\}=\frac{\lambda^ke^{-\lambda}}{k!},k=0,1,2,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2121em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>λ</mi></mrow><annotation encoding="application/x-tex">E(X)=\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>λ</mi></mrow><annotation encoding="application/x-tex">D(X)=\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">λ</span></span></span></span></span></p><h3 id="均匀分布">均匀分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>U</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim U(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mfrac><mn>1</mn><mrow><mi>b</mi><mo>−</mo><mi>a</mi></mrow></mfrac></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo separator="true">,</mo><mi>b</mi><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>a</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo separator="true">,</mo><mi>e</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(x)=\begin{cases}\begin{aligned}\frac 1{b-a}&amp;,b&lt;x&lt;a\\0&amp;,else\end{aligned}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.8908em;vertical-align:-1.6954em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1954em;"><span style="top:-4.1954em;"><span class="pstrut" style="height:4.1954em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1954em;"><span style="top:-4.1954em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.2861em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6954em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1954em;"><span style="top:-4.1954em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">a</span></span></span><span style="top:-2.2861em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">se</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6954em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6954em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>a</mi><mo>+</mo><mi>b</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">E(X)=\frac{a+b}2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mn>12</mn></mfrac></mrow><annotation encoding="application/x-tex">D(X)=\frac{(b-a)^2}{12}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">12</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="指数分布">指数分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mi>x</mi><mi>θ</mi></mfrac></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo separator="true">,</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo separator="true">,</mo><mi>e</mi><mi>l</mi><mi>s</mi><mi>e</mi></mrow></mstyle></mtd></mtr></mtable></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f(x)=\begin{cases}\begin{aligned}\frac 1\theta e^{-\frac x\theta}&amp;,x&gt;0\\0&amp;,else\end{aligned}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.8074em;vertical-align:-1.6537em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.016em' style='width:0.8889em' viewBox='0 0 888.89 16' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V16 H384z M384 0 H504 V16 H384z'/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1537em;"><span style="top:-4.1537em;"><span class="pstrut" style="height:4.1537em;"></span><span class="mord"><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1537em;"><span style="top:-4.1537em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8971em;"><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.3277em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6537em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1537em;"><span style="top:-4.1537em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span><span style="top:-2.3277em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">se</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6537em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.6537em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>θ</mi></mrow><annotation encoding="application/x-tex">E(X)=\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>θ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">D(X)=\theta^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="正态分布">正态分布</h3><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim N(\mu,\sigma^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msqrt><mrow><mn>2</mn><mi>π</mi></mrow></msqrt><mi>σ</mi></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>μ</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><mrow><mn>2</mn><msup><mi>σ</mi><mn>2</mn></msup></mrow></mfrac></mrow></msup></mrow><annotation encoding="application/x-tex">f(x)=\frac 1{\sqrt{2\pi}\sigma}e^{-\frac{(x-\mu)^2}{2\sigma^2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2591em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.2028em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9072em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03588em;">π</span></span></span><span style="top:-2.8672em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1328em;"><span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.3291em;"><span style="top:-3.4534em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.251em;"><span style="top:-2.5062em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9384em;"><span style="top:-2.9384em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.5021em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0484em;"><span style="top:-3.0484em;margin-right:0.1em;"><span class="pstrut" style="height:2.6444em;"></span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4938em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mi>μ</mi></mrow><annotation encoding="application/x-tex">E(X)=\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">D(X)=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><h2 id="抽样分布">抽样分布</h2><h3 id="卡方分布">卡方分布</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">X_1,X_2,...,X_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是来自正态总体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>的样本，则</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><msubsup><mi>X</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>X</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><msubsup><mi>X</mi><mi>n</mi><mn>2</mn></msubsup><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=X_1^2+X_2^2+...+X_n^2 \sim\chi^2(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">...</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>χ</mi><mn>1</mn><mn>2</mn></msubsup><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi_1^2\sim\chi^2(n_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>， <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>χ</mi><mn>2</mn><mn>2</mn></msubsup><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi_2^2\sim\chi^2(n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，则</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>χ</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>χ</mi><mn>2</mn><mn>2</mn></msubsup><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi_1^2+\chi_2^2\sim\chi^2(n_1+n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2\sim\chi^2(n_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, 则</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">E(\chi^2)=n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">D(\chi^2)=2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span></span></span></span></span></p><p>上分位数</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><msup><mi>χ</mi><mn>2</mn></msup><mo>&gt;</mo><msubsup><mi>χ</mi><mi>α</mi><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">P\{\chi^2&gt;\chi^2_\alpha(n)\}=\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span></p><h3 id="t分布">t分布</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Y\sim\chi^2(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Y</mi></mrow><annotation encoding="application/x-tex">Y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span></span>相互独立，则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mi>X</mi><msqrt><mfrac><mi>Y</mi><mi>n</mi></mfrac></msqrt></mfrac><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{X}{\sqrt {\frac {Y}{n}}}\sim t(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.2487em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2487em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">Y</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2087em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5913em;"><span></span></span></span></span></span></span></span><span style="top:-3.4787em;"><span class="pstrut" style="height:3.2487em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9257em;"><span class="pstrut" style="height:3.2487em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><p>上分位数</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>t</mi><mo>&gt;</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">P\{t&gt;t_\alpha(n)\}=\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>t</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t_{1-\alpha}(n)=-t_\alpha(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></span></p><h3 id="F分布">F分布</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">U\sim \chi^2(n_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V\sim \chi^2(n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>U</mi></mrow><annotation encoding="application/x-tex">U</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>相互独立，则：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mfrac><mi>U</mi><msub><mi>n</mi><mn>1</mn></msub></mfrac><mfrac><mi>V</mi><msub><mi>n</mi><mn>2</mn></msub></mfrac></mfrac><mo>∼</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\frac {U}{n_1}}{\frac {V}{n_2}}\sim F(n_1,n_2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9149em;vertical-align:-1.2074em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7074em;"><span style="top:-2.2377em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.8351em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2074em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mn>1</mn><mi>F</mi></mfrac><mo>∼</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac 1{F}\sim F(n_2,n_1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>上分位数</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">{</mo><mi>F</mi><mo>&gt;</mo><msub><mi>F</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>=</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">P\{F&gt;F_\alpha(n_1,n_2)\}=\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)}</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>F</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><msub><mi>F</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>n</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">F_{1-\alpha}(n_1,n_2)=\frac{1}{F_\alpha(n_2,n_1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2574em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="正态分布的样本均值和样本方差的分布">正态分布的样本均值和样本方差的分布</h2><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">X_1,X_2,...,X_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>有相同的均值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span> , 方差 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，则</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mi>μ</mi></mrow><annotation encoding="application/x-tex">E(\overline X)=\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>σ</mi><mn>2</mn></msup><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">D(\overline X)=\frac{\sigma^2}n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><msup><mi>S</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E(S^2)=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>X</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">X_1,X_2,...,X_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是来自正态总体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(\mu,\sigma ^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的样本，则</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><mfrac><msup><mi>σ</mi><mn>2</mn></msup><mi>n</mi></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\overline X \sim N(\mu,\frac{\sigma^2}n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>S</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">S^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>相互独立</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi></mrow><mfrac><mi>S</mi><msqrt><mi>n</mi></msqrt></mfrac></mfrac><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\overline X-\mu}{\frac{S}{\sqrt n}}\sim t(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.8607em;vertical-align:-1.3003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.2377em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.6259em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8059em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal mtight" style="padding-left:0.833em;">n</span></span><span style="top:-2.7659em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2341em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.538em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3003em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>X</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>X</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>X</mi><msub><mi>n</mi><mn>1</mn></msub></msub></mrow><annotation encoding="application/x-tex">X_1,X_2,...,X_{n_1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9334em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span>是来自正态总体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>1</mn></msub><mo separator="true">,</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(\mu_1,\sigma_1 ^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的样本, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>Y</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>Y</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>Y</mi><msub><mi>n</mi><mn>2</mn></msub></msub></mrow><annotation encoding="application/x-tex">Y_1,Y_2,...,Y_{n_2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9334em;vertical-align:-0.2501em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span>是来自正态总体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>2</mn></msub><mo separator="true">,</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(\mu_2,\sigma_2 ^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的样本, 两个样本相互独立，则</li></ul><p>两个样本的平均值：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>n</mi><mn>1</mn></msub></munderover><msub><mi>X</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\overline X=\frac 1 {n_1}\sum_{i=1}^{n_1}X_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9402em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6625em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3111em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>n</mi><mn>2</mn></msub></munderover><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\overline Y=\frac 1{n_2}\sum_{i=1}^{n_2}Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9402em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6625em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3111em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>两个样本的样本方差</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><mfrac><mn>1</mn><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>n</mi><mn>1</mn></msub></munderover><mo stretchy="false">(</mo><msub><mi>X</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">S_1^2=\frac 1{n_1-1}\sum_{i=1}^{n_1}(X_i-\overline X)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9402em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6625em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3111em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup><mo>=</mo><mfrac><mn>1</mn><mrow><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><msub><mi>n</mi><mn>2</mn></msub></munderover><mo stretchy="false">(</mo><msub><mi>Y</mi><mi>i</mi></msub><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">S_2^2=\frac 1{n_2-1}\sum_{i=1}^{n_2}(Y_i-\overline Y)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9402em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6625em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3111em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>满足以下性质</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac></mfrac><mo>∼</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\frac{S_1^2}{S_2^2}}{\frac{\sigma_1^2}{\sigma_2^2}}\sim F(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.689em;vertical-align:-1.5733em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.1525em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma_1^2=\sigma_2^2=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>时，</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{(\overline X-\overline Y)-(\mu_1-\mu_2)}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\sim t(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.2903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>S</mi><mi>W</mi><mn>2</mn></msubsup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mrow><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_W^2=\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3271em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="正态总体均值、方差的置信区间与单侧置信限">正态总体均值、方差的置信区间与单侧置信限</h2><p>（置信水平为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">1-\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>）</p><h3 id="单个正态总体">单个正态总体</h3><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span>，已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\overline X-\mu}{\sigma}\sqrt n \sim N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mfrac><mi>σ</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mfrac><mi>σ</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\overline X -\frac{\sigma}{\sqrt n}z_{\frac \alpha 2},\overline X +\frac{\sigma}{\sqrt n}z_{\frac \alpha 2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>μ</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mfrac><mi>σ</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">\overline \mu =\overline X+\frac{\sigma}{\sqrt n}z_{\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><mi>μ</mi><mo stretchy="true">‾</mo></munder><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mfrac><mi>σ</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">\underline \mu = \overline X-\frac{\sigma}{\sqrt n}z_{\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.3944em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.6456em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.0376em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span>，未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>μ</mi></mrow><mi>S</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\overline X-\mu}{S}\sqrt n \sim t(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mfrac><mi>S</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mfrac><mi>S</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\overline X -\frac{S}{\sqrt n}t_{\frac \alpha 2}(n-1),\overline X +\frac{S}{\sqrt n}t_{\frac \alpha 2}(n-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2903em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2903em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mi>μ</mi><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><mfrac><mi>S</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\overline \mu =\overline X +\frac{S}{\sqrt n}t_{\alpha}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2903em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><mi>μ</mi><mo stretchy="true">‾</mo></munder><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mfrac><mi>S</mi><msqrt><mi>n</mi></msqrt></mfrac><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\underline \mu =\overline X -\frac{S}{\sqrt n}t_{\alpha}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.825em;vertical-align:-0.3944em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4306em;"><span style="top:-2.6456em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2903em;vertical-align:-0.93em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.3097em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8003em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.7603em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2397em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.93em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msup><mi>σ</mi><mn>2</mn></msup></mfrac><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac {(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.1771em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><mrow><msubsup><mi>χ</mi><mfrac><mi>α</mi><mn>2</mn></mfrac><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><mrow><msubsup><mi>χ</mi><mrow><mn>1</mn><mo>−</mo><mfrac><mi>α</mi><mn>2</mn></mfrac></mrow><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\frac{(n-1)S^2}{\chi^2_{\frac \alpha 2}(n-1)},\frac{(n-1)S^2}{\chi^2_{1-\frac \alpha 2}(n-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.7172em;vertical-align:-1.2261em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.7007em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.3448em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5401em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2261em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.7007em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.3448em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5401em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2261em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="true">‾</mo></mover><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><mrow><msubsup><mi>χ</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\overline {\sigma^2}=\frac{(n-1)S^2}{\chi^2_{1-\alpha}(n-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9401em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9401em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-3.8601em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5017em;vertical-align:-1.0106em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3246em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0106em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="true">‾</mo></munder><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><mrow><msubsup><mi>χ</mi><mi>α</mi><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\underline {\sigma^2}=\frac{(n-1)S^2}{\chi^2_{\alpha}(n-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.2em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4271em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7401em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="两个正态总体">两个正态总体</h3><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mu_1-\mu_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mfrac><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{(\overline X-\overline Y)-(\mu_1-\mu_2)}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}}\sim N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.2903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2683em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5317em;"><span></span></span></span></span></span></span></span><span style="top:-3.5383em;"><span class="pstrut" style="height:3.3083em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9853em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\overline X-\overline Y-z_{\frac \alpha 2}\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}},\overline X-\overline Y+z_{\frac \alpha 2}\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.0877em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9523em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.9123em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80h400000v40H1017.7z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0877em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.0877em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9523em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.9123em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80h400000v40H1017.7z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0877em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><msub><mi>z</mi><mi>α</mi></msub><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">\overline {\mu_1-\mu_2}=\overline X-\overline Y+z_{\alpha}\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.7033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.0877em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9523em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.9123em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80h400000v40H1017.7z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0877em;"><span></span></span></span></span></span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><mo stretchy="true">‾</mo></munder><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>z</mi><mi>α</mi></msub><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow><annotation encoding="application/x-tex">\underline {\mu_1-\mu_2}=\overline X-\overline Y-z_{\alpha}\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.3944em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5833em;"><span style="top:-2.6456em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:3.04em;vertical-align:-1.0877em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.9523em;"><span class="svg-align" style="top:-5em;"><span class="pstrut" style="height:5em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.9123em;"><span class="pstrut" style="height:5em;"></span><span class="hide-tail" style="min-width:1.02em;height:3.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='3.08em' viewBox='0 0 400000 3240' preserveAspectRatio='xMinYMin slice'><path d='M473,2793c339.3,-1799.3,509.3,-2700,510,-2702 l0 -0c3.3,-7.3,9.3,-11,18,-11 H400000v40H1017.7s-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200c0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26s76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,606zM1001 80h400000v40H1017.7z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0877em;"><span></span></span></span></span></span></span></span></span></span></p><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mu_1-\mu_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma_1^2=\sigma_2^2=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo stretchy="false">)</mo></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{(\overline X-\overline Y)-(\mu_1-\mu_2)}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\sim t(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.2903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>S</mi><mi>W</mi><mn>2</mn></msubsup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mrow><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_W^2=\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3271em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\overline X-\overline Y-S_W\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}t_{\frac \alpha 2}(n_1+n_2-2),\overline X-\overline Y+S_W\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}t_{\frac \alpha 2}(n_1+n_2-2))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.8634em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5766em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5366em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'><path d='M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8634em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1333em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.8634em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5766em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5366em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'><path d='M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8634em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">))</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>+</mo><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\overline {\mu_1-\mu_2}=\overline X-\overline Y+S_W\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}t_{\alpha}(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.1944em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.7033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.8634em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5766em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5366em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'><path d='M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8634em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><mo stretchy="true">‾</mo></munder><mo>=</mo><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\underline {\mu_1-\mu_2}=\overline X-\overline Y-S_W\sqrt{\frac{1}{n_1}+\frac{1}{n_2}}t_{\alpha}(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9778em;vertical-align:-0.3944em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.5833em;"><span style="top:-2.6456em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9667em;vertical-align:-0.0833em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.44em;vertical-align:-0.8634em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5766em;"><span class="svg-align" style="top:-4.4em;"><span class="pstrut" style="height:4.4em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.5366em;"><span class="pstrut" style="height:4.4em;"></span><span class="hide-tail" style="min-width:1.02em;height:2.48em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='2.48em' viewBox='0 0 400000 2592' preserveAspectRatio='xMinYMin slice'><path d='M424,2478c-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514c0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20s-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121s209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1014.6s-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185c-2,6,-10,9,-24,9c-8,0,-12,-0.7,-12,-2z M1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8634em;"><span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p><strong>估计<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma_1^2}{\sigma_2^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7258em;vertical-align:-0.5916em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\mu_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mu_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></strong></p><p>根据</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac></mfrac><mo>∼</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\frac{\frac{S_1^2}{S_2^2}}{\frac{\sigma_1^2}{\sigma_2^2}}\sim F(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.689em;vertical-align:-1.5733em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.1525em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>置信区间</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mrow><msub><mi>F</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo separator="true">,</mo><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mrow><msub><mi>F</mi><mrow><mn>1</mn><mo>−</mo><mfrac><mi>α</mi><mn>2</mn></mfrac></mrow></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\frac{\frac{S_1^2}{S_2^2}}{F_{\frac \alpha 2}(n_1-1,n_2-1)},\frac{\frac{S_1^2}{S_2^2}}{F_{1-\frac \alpha 2}(n_1-1,n_2-1)})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.1926em;vertical-align:-1.0768em;"></span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.4481em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0768em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.4481em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0768em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span></span></p><p>置信上界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mover accent="true"><mrow><mo stretchy="false">(</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo stretchy="false">)</mo></mrow><mo stretchy="true">‾</mo></mover><mo>=</mo><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mrow><msub><mi>F</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\overline{(\frac{\sigma_1^2}{\sigma_2^2})}=\frac{\frac{S_1^2}{S_2^2}}{F_{1-\alpha}(n_1-1,n_2-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6252em;vertical-align:-0.9523em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6729em;"><span style="top:-3.4729em;"><span class="pstrut" style="height:3.4729em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4729em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:-5.0658em;"><span class="pstrut" style="height:3.4729em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0518em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.4481em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>置信下界</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder accentunder="true"><mrow><mo stretchy="false">(</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo stretchy="false">)</mo></mrow><mo stretchy="true">‾</mo></munder><mo>=</mo><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mrow><msub><mi>F</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">\underline{(\frac{\sigma_1^2}{\sigma_2^2})}=\frac{\frac{S_1^2}{S_2^2}}{F_{\alpha}(n_1-1,n_2-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.6434em;vertical-align:-1.1523em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.3788em;"><span class="pstrut" style="height:3.4911em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4911em;"><span class="pstrut" style="height:3.4911em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1523em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0518em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.4481em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="正态总体均值、方差的检验法">正态总体均值、方差的检验法</h2><p>(显著性水平为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>)</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为原假设, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为备择假设</p><h3 id="单个正态总体均值的检验">单个正态总体均值的检验</h3><p>总体<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mi>μ</mi><mo separator="true">,</mo><msup><mi>σ</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">X\sim N(\mu,\sigma^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal">μ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="如果方差已知">如果方差已知</h4><p>已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>, 检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>σ</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Z=\frac{\overline X-\mu_0}{\sigma}\sqrt n \sim N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≤</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu\le \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&gt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu&gt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>σ</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>≥</mo><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">z=\frac{\overline x-\mu_0}{\sigma}\sqrt n \ge z_\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≥</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu\ge \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&lt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu&lt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>σ</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>≤</mo><mo>−</mo><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">z=\frac{\overline x-\mu_0}{\sigma}\sqrt n \le -z_\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu= \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo mathvariant="normal">≠</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu\ne \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>z</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>σ</mi></mfrac><msqrt><mi>n</mi></msqrt><mi mathvariant="normal">∣</mi><mo>≥</mo><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub></mrow><annotation encoding="application/x-tex">|z|=|\frac{\overline x-\mu_0}{\sigma}\sqrt n| \ge z_{\frac \alpha 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8214em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="如果方差未知">如果方差未知</h4><p>未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>, 检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>S</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline X-\mu_0}{S}\sqrt n \sim t(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≤</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu\le \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&gt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu&gt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>S</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>≥</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline x-\mu_0}{S}\sqrt n \ge t_\alpha (n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>≥</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu\ge \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo>&lt;</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu&lt; \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>S</mi></mfrac><msqrt><mi>n</mi></msqrt><mo>≤</mo><mo>−</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline x-\mu_0}{S}\sqrt n \le - t_\alpha (n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><mi>μ</mi><mo>=</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0: \mu= \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><mi>μ</mi><mo mathvariant="normal">≠</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_1: \mu\ne \mu_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><msub><mi>μ</mi><mn>0</mn></msub></mrow><mi>S</mi></mfrac><msqrt><mi>n</mi></msqrt><mi mathvariant="normal">∣</mi><mo>≥</mo><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">|t|=|\frac{\overline x-\mu_0}{S}\sqrt n| \ge t_{\frac \alpha 2} (n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.9936em;vertical-align:-0.686em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1408em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h3 id="两个正态总体均值差的检验">两个正态总体均值差的检验</h3><h4 id="如果两个总体方差已知">如果两个总体方差已知</h4><p>已知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mu_1-\mu_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>Z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac></mrow></msqrt></mfrac><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Z=\frac{\overline X-\overline Y-\delta}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_1^2}{n_1}}} \sim N(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2683em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5317em;"><span></span></span></span></span></span></span></span><span style="top:-3.5383em;"><span class="pstrut" style="height:3.3083em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9853em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>≤</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2\le \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>&gt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2&gt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac></mrow></msqrt></mfrac><mo>≥</mo><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">z=\frac{\overline x-\overline y-\delta}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_1^2}{n_1}}}\ge z_\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2683em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5317em;"><span></span></span></span></span></span></span></span><span style="top:-3.5383em;"><span class="pstrut" style="height:3.3083em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9853em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>≥</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2\ge \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2&lt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac></mrow></msqrt></mfrac><mo>≤</mo><mo>−</mo><msub><mi>z</mi><mi>α</mi></msub></mrow><annotation encoding="application/x-tex">z=\frac{\overline x-\overline y-\delta}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_1^2}{n_1}}}\le-z_\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2683em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5317em;"><span></span></span></span></span></span></span></span><span style="top:-3.5383em;"><span class="pstrut" style="height:3.3083em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9853em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>=</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2= \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo mathvariant="normal">≠</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2\ne \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>z</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><msqrt><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msub><mi>n</mi><mn>1</mn></msub></mfrac></mrow></msqrt></mfrac><mi mathvariant="normal">∣</mi><mo>≥</mo><msub><mi>z</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub></mrow><annotation encoding="application/x-tex">|z|=|\frac{\overline x-\overline y-\delta}{\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_1^2}{n_1}}}|\ge z_{\frac \alpha 2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3083em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.2683em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5317em;"><span></span></span></span></span></span></span></span><span style="top:-3.5383em;"><span class="pstrut" style="height:3.3083em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9853em;"><span class="pstrut" style="height:3.3083em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8214em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.044em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span></span></span></span></span></p><h4 id="如果两个总体方差未知">如果两个总体方差未知</h4><p>未知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_1^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">\sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>，但<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup><mo>=</mo><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma_1^2=\sigma_2^2=\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\mu_1-\mu_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>X</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>Y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline X-\overline Y -\delta}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\sim t(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2903em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>其中</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>S</mi><mi>W</mi><mn>2</mn></msubsup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mrow><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_W^2=\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1111em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3271em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>≤</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2\le \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>&gt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2&gt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mo>≥</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline x-\overline y -\delta}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\ge t_\alpha(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>≥</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2\ge \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>&lt;</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2&lt; \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mo>≤</mo><mo>−</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline x-\overline y -\delta}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\le -t_\alpha(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo>=</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_0: \mu_1-\mu_2= \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mn>1</mn></msub><mo>−</mo><msub><mi>μ</mi><mn>2</mn></msub><mo mathvariant="normal">≠</mo><mi>δ</mi></mrow><annotation encoding="application/x-tex">H_1: \mu_1-\mu_2\ne \delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mover accent="true"><mi>x</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mover accent="true"><mi>y</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mi>δ</mi></mrow><mrow><msub><mi>S</mi><mi>W</mi></msub><msqrt><mrow><mfrac><mn>1</mn><msub><mi>n</mi><mn>1</mn></msub></mfrac><mo>+</mo><mfrac><mn>1</mn><msub><mi>n</mi><mn>2</mn></msub></mfrac></mrow></msqrt></mrow></mfrac><mi mathvariant="normal">∣</mi><mo>≥</mo><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">|t|=|\frac{\overline x-\overline y -\delta}{S_W\sqrt{\frac 1{n_1}+\frac 1{n_2}}}|\ge t_{\frac \alpha 2}(n_1+n_2-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1014em;vertical-align:-1.73em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.185em;"><span class="svg-align" style="top:-3.8em;"><span class="pstrut" style="height:3.8em;"></span><span class="mord" style="padding-left:1em;"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4451em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.145em;"><span class="pstrut" style="height:3.8em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.88em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.88em' viewBox='0 0 400000 1944' preserveAspectRatio='xMinYMin slice'><path d='M983 90l0 -0c4,-6.7,10,-10,18,-10 H400000v40H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5c53.7,-170.3,84.5,-266.8,92.5,-289.5zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.655em;"><span></span></span></span></span></span></span></span><span style="top:-3.415em;"><span class="pstrut" style="height:3.185em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.862em;"><span class="pstrut" style="height:3.185em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6306em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.5506em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.03785em;">δ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.73em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1408em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><h3 id="正态总体方差的检验">正态总体方差的检验</h3><h4 id="单个总体的情况">单个总体的情况</h4><p>检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>σ</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\sigma^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mfrac><mo>∼</mo><msup><mi>χ</mi><mn>2</mn></msup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=\frac {(n-1)S^2}{\sigma_0^2}\sim \chi^2(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo>≤</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma^2\le \sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo>&gt;</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma^2 &gt;\sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8532em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mfrac><mo>≥</mo><msubsup><mi>χ</mi><mi>α</mi><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=\frac {(n-1)S^2}{\sigma_0^2} \ge \chi^2_{\alpha}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo>≥</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma^2\ge \sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo>&lt;</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma^2 &lt;\sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8532em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mfrac><mo>≤</mo><msubsup><mi>χ</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=\frac {(n-1)S^2}{\sigma_0^2} \le \chi^2_{1-\alpha}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1694em;vertical-align:-0.3053em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3053em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo>=</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma^2= \sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msup><mi>σ</mi><mn>2</mn></msup><mo mathvariant="normal">≠</mo><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma^2 \ne \sigma_0^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mfrac><mo>≥</mo><msubsup><mi>χ</mi><mfrac><mi>α</mi><mn>2</mn></mfrac><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=\frac {(n-1)S^2}{\sigma_0^2} \ge \chi^2_{\frac \alpha 2}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3519em;vertical-align:-0.4878em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.753em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4878em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>或</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>χ</mi><mn>2</mn></msup><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><msup><mi>S</mi><mn>2</mn></msup></mrow><msubsup><mi>σ</mi><mn>0</mn><mn>2</mn></msubsup></mfrac><mo>≤</mo><msubsup><mi>χ</mi><mrow><mn>1</mn><mo>−</mo><mfrac><mi>α</mi><mn>2</mn></mfrac></mrow><mn>2</mn></msubsup><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\chi^2=\frac {(n-1)S^2}{\sigma_0^2} \le \chi^2_{1-\frac \alpha 2}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.3519em;vertical-align:-0.4878em;"></span><span class="mord"><span class="mord mathnormal">χ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-2.753em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.413em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4878em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h4 id="两个总体的情况">两个总体的情况</h4><p>检验<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac></mrow><annotation encoding="application/x-tex">\frac{\sigma_1^2}{\sigma_2^2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.7258em;vertical-align:-0.5916em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mfrac><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mfrac></mfrac><mo>∼</mo><mi>F</mi><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=\frac{\frac{S_1^2}{S_2^2}}{\frac{\sigma_1^2}{\sigma_2^2}}\sim F(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.689em;vertical-align:-1.5733em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.1158em;"><span style="top:-2.1525em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0916em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5281em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0359em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.3641em;"><span class="pstrut" style="height:3.1341em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.1158em;"><span class="pstrut" style="height:3.1341em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1341em;"><span style="top:-2.6264em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8051em;"><span style="top:-2.1885em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span><span style="top:-2.8448em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3115em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.5102em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.214em;margin-left:-0.0576em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5916em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5733em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>≤</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma_1^2\le \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>&gt;</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma_1^2&gt; \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo>≥</mo><msub><mi>F</mi><mi>α</mi></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=\frac{S_1^2}{S_2^2}\ge F_{\alpha}(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>≥</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma_1^2\ge \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>&lt;</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma_1^2 &lt; \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo>≤</mo><msub><mi>F</mi><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=\frac{S_1^2}{S_2^2}\le F_{1-\alpha}(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo>=</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_0: \sigma_1^2 = \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msubsup><mi>σ</mi><mn>1</mn><mn>2</mn></msubsup><mo mathvariant="normal">≠</mo><msubsup><mi>σ</mi><mn>2</mn><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">H_1: \sigma_1^2 \ne \sigma_2^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0622em;vertical-align:-0.2481em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo>≤</mo><msub><mi>F</mi><mrow><mn>1</mn><mo>−</mo><mfrac><mi>α</mi><mn>2</mn></mfrac></mrow></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=\frac{S_1^2}{S_2^2}\le F_{1-\frac \alpha 2}(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1408em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>或</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mo>=</mo><mfrac><msubsup><mi>S</mi><mn>1</mn><mn>2</mn></msubsup><msubsup><mi>S</mi><mn>2</mn><mn>2</mn></msubsup></mfrac><mo>≥</mo><msub><mi>F</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><msub><mi>n</mi><mn>1</mn></msub><mo>−</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>2</mn></msub><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">F=\frac{S_1^2}{S_2^2}\ge F_{\frac \alpha 2}(n_1-1,n_2-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4434em;vertical-align:-0.9523em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4911em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7959em;"><span style="top:-2.4337em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.0448em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2663em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4519em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2481em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9523em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1408em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><h3 id="基于成对数据的检验">基于成对数据的检验</h3><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo>=</mo><msub><mi>X</mi><mi>i</mi></msub><mo>−</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">D_i=X_i-Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>  ,  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">i=1,2,...,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mi>i</mi></msub><mo>∼</mo><mi>N</mi><mo stretchy="false">(</mo><msub><mi>μ</mi><mi>D</mi></msub><mo separator="true">,</mo><msubsup><mi>σ</mi><mi>D</mi><mn>2</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_i\sim N(\mu_D,\sigma^2_D)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0894em;vertical-align:-0.2753em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4247em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2753em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>利用检验统计量</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>D</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mn>0</mn></mrow><msub><mi>S</mi><mi>D</mi></msub></mfrac><msqrt><mi>n</mi></msqrt><mo>∼</mo><mi>t</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline D-0}{S_D}\sqrt n \sim t(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo>≤</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_0: \mu_D\le 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1: \mu_D&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>D</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mn>0</mn></mrow><msub><mi>S</mi><mi>D</mi></msub></mfrac><msqrt><mi>n</mi></msqrt><mo>≥</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline D-0}{S_D}\sqrt n \ge t_\alpha(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_0: \mu_D\ge 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo>&lt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1: \mu_D&lt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>t</mi><mo>=</mo><mfrac><mrow><mover accent="true"><mi>D</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mn>0</mn></mrow><msub><mi>S</mi><mi>D</mi></msub></mfrac><msqrt><mi>n</mi></msqrt><mo>≤</mo><mo>−</mo><msub><mi>t</mi><mi>α</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">t=\frac{\overline D-0}{S_D}\sqrt n \le -t_\alpha(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3963em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p><p>若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_0: \mu_D= 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub><mo>:</mo><msub><mi>μ</mi><mi>D</mi></msub><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">H_1: \mu_D\ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>, 拒绝域为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>t</mi><mi mathvariant="normal">∣</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mfrac><mrow><mover accent="true"><mi>D</mi><mo stretchy="true">‾</mo></mover><mo>−</mo><mn>0</mn></mrow><msub><mi>S</mi><mi>D</mi></msub></mfrac><msqrt><mi>n</mi></msqrt><mi mathvariant="normal">∣</mi><mo>≥</mo><msub><mi>t</mi><mfrac><mi>α</mi><mn>2</mn></mfrac></msub><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">|t|=|\frac{\overline D-0}{S_D}\sqrt n |\ge t_{\frac \alpha 2}(n-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal">t</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3963em;vertical-align:-0.836em;"></span><span class="mord">∣</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.8033em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1408em;vertical-align:-0.3908em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3341em;"><span style="top:-2.85em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.0037em;">α</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3908em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理</title>
    <link href="/2023/10/02/principles-of-computer-composition/index/"/>
    <url>/2023/10/02/principles-of-computer-composition/index/</url>
    
    <content type="html"><![CDATA[<h1>计算机组成原理</h1><h2 id="第一章-计算机系统概述">第一章 计算机系统概述</h2><h3 id="程序被翻译成不同的格式">程序被翻译成不同的格式</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230924214846800.png" alt="image-20230924214846800"></p><ul><li>从<code>hello.c</code>到目标文件的转化是由编译系统完成<br><code>unix&gt;gcc -o hello hello.c</code></li><li>编译系统是由：预处理器、编译器、汇编器和链接器构成</li><li>翻译过程是由：预处理、编译、汇编和链接这四个阶段完成</li></ul><h3 id="计算机系统基本执行结构">计算机系统基本执行结构</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230830191551124.png" alt="image-20230830191551124"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230831201453225.png" alt="image-20230831201453225"></p><table><thead><tr><th>缩写</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td>IR</td><td>instruction register</td><td>指令寄存器,计算机中用于存储当前正在执行的指令的寄存器。</td></tr><tr><td>PC</td><td>program counter</td><td>程序计数器,用于存储处理器当前（或下一条）指令的地址。</td></tr><tr><td>AR</td><td>address register</td><td>地址寄存器,用来存放指令或操作数的地 址。是一个暂存单元。</td></tr><tr><td>DR</td><td>data register</td><td>数据寄存器</td></tr><tr><td>MAR</td><td>Memory address register</td><td>存储地址寄存器</td></tr><tr><td>MDR</td><td>Memory data register</td><td>存储数据寄存器</td></tr><tr><td>ACC</td><td>Accumulator</td><td>累加器</td></tr><tr><td>MQ</td><td>Multiplier-Quotient Register</td><td>乘商寄存器，在乘、除运算时，用于存放操作数或运算结果。</td></tr><tr><td>ALU</td><td>arithmetic logic unit</td><td>算术逻辑单元：计算机中央处理器的一个电路，用于执行基本的数学计算</td></tr><tr><td>X</td><td></td><td>通用的操作数寄存器</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="经典冯·诺依曼计算机框架">经典冯·诺依曼计算机框架</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230830192247864.png" alt="image-20230830192247864"></p><p>现代计算机组成</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230830192339823.png" alt="image-20230830192339823"></p><h4 id="主存储器">主存储器</h4><img src="./计算机组成原理.assets/image-20230831172009928.png" alt="image-20230831172009928" style="zoom:50%;" /><table><thead><tr><th>MAR</th><th>Memory address register</th><th>存储地址寄存器</th></tr></thead><tbody><tr><td><strong>MDR</strong></td><td><strong>Memory data register</strong></td><td><strong>存储数据寄存器</strong></td></tr></tbody></table><p>读操作：CPU把想要的数据地址放在MAR，然后在MDR取走数据</p><p>写操作：CPU把想要写的地址放在MAR，然后把数据放在MDR</p><pre><code class=" mermaid">graph LR;主存储器---&gt;存储单元;存储单元---&gt;存储元件;</code></pre><p>存储单元是一串二进制代码，也称存储字</p><p>存储元件指单个二进制位</p><h4 id="CPU">CPU</h4><ul><li><p>处理器(CPU - Central Processing Unit)</p><ul><li><p>功能：执行程序(Execute programs)</p></li><li><p>组成：Control Unit + Data path</p><ul><li><p>Control Unit(控制单元):</p><p>功能：对指令进行译码，产生控制信号</p></li><li><p>Datapath (数据通路):</p><p>功能：完成指令的执行</p><p>核心：ALU(Arithmetic Logic Unit)+Register(寄存器)</p><p>①ALU用来执行算术、逻辑运算</p><p>②寄存器用来存储临时的数据或控制信息</p></li></ul></li></ul></li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230831185319508.png" alt="image-20230831185319508"></p><p><strong>CPU time =</strong> <strong>程序包含的指令数量</strong> <strong>×</strong> <strong>CPI</strong> <strong>×</strong> <strong>时钟周期</strong></p><p>三个因素之间的相互影响?</p><ul><li>CPI的减少可能会增加时钟周期的长度</li><li>缩短时钟周期可能会增加指令的条数</li><li>改变IS以减少指令条数会使时钟周期变长</li><li>即使是在同一台机器上解决同一个问题，最少指令条数的程序不一定执行的最快</li></ul><h4 id="运算器的组成部分">运算器的组成部分</h4><p>运算器是计算机中执行各种算术和逻辑运算操作的部件，通常由以下几个部分组成：</p><ul><li><strong>算术逻辑单元（ALU）</strong>：负责执行基本的算术和逻辑运算，如加、减、乘、除、与、或、非、异或等。</li><li><strong>累加器（AC）</strong>：用来暂存源操作数和运算结果。</li><li><strong>数据缓冲寄存器（DR）</strong>：用来暂存由内存读/写的一条指令或数据。</li><li><strong>状态寄存器（PSW）</strong>：用来保存状态标志和控制标志，如进位标志、溢出标志等。</li><li><strong>通用寄存器组</strong>：用来存放程序中用到的数据，可以被软件设计者访问。</li><li><strong>内部总线</strong>：用来连接各个部件的信息通道，传输运算过程中的数据。</li></ul><h4 id="几种驱动方式">几种驱动方式</h4><p>控制流驱动方式、数据流控制方式、微程序控制方式、多指令多数据流方式是计算机的不同工作方式，它们各有特点和优缺点。下面我简单介绍一下：</p><ul><li>控制流驱动方式是指由指令去控制数据的存取和运算，即指令→数据。这是冯·诺依曼机的基本工作方式，也是最常见的计算机工作方式。控制流驱动方式的优点是结构简单，易于实现；缺点是指令执行顺序固定，不适合并行处理。</li><li>数据流控制方式是指由数据去触发指令的执行，即数据→指令。这是一种非冯·诺依曼机的工作方式，也称为数据流计算机。数据流控制方式的优点是能够充分利用并行性，提高计算效率；缺点是结构复杂，难以实现。</li><li>微程序控制方式是指用一组微指令来实现一条机器指令的功能，即机器指令→微指令。这是一种在硬件和软件之间增加了一层抽象的工作方式，也称为微程序计算机。微程序控制方式的优点是能够扩展和修改指令系统，提高兼容性；缺点是增加了执行时间，降低了速度。</li><li>多指令多数据流方式是指同时执行多条不同的指令，并对应地处理多个不同的数据，即多条指令→多个数据。这是一种利用多个处理器并行工作的工作方式，也称为多处理机或并行计算机。多指令多数据流方式的优点是能够大幅提高计算性能，适合处理复杂问题；缺点是需要协调各个处理器之间的通信和同步，增加了设计难度。</li></ul><h4 id="相联存储器">相联存储器</h4><p>是一种特殊的存储器，它可以根据存储内容而不是地址来进行存取。相联存储器的优点是可以快速地查找数据，因为它可以同时比较多个存储单元的内容。相联存储器的缺点是成本高，容量小，复杂度高。</p><p>相联存储器的工作原理是这样的：</p><ul><li>首先，从要查找的数据中提取出关键字（key），这个关键字是用来匹配存储单元中的内容的。</li><li>然后，将关键字和所有存储单元中的标记（tag）进行并行比较，如果相等，就说明找到了匹配的数据。</li><li>最后，根据比较结果，从存储单元中读出或写入相应的数据。</li></ul><p>相联存储器可以用在不同的场合，例如：</p><ul><li>在高速缓冲存储器（cache）中，用来实现快速地判断CPU要访问的数据是否在cache中，以及在哪个位置。</li><li>在虚拟存储器中，用来作为段表、页表或快表（TLB）的存储器，用来实现快速地转换虚拟地址和物理地址。</li><li>在数据库和知识库中，用来实现快速地检索和查询数据。</li></ul><h3 id="衡量计算机性能的指标">衡量计算机性能的指标</h3><h4 id="计算机有两种不同的性能">计算机有两种不同的性能</h4><ul><li><p>完成单个任务的时间</p><ul><li><p>响应时间(response time)：完成单个任务所需的总时间</p><ul><li><p>执行时间(execution time)</p></li><li><p>等待时间或时延(latency)</p></li></ul></li></ul></li><li><p>单位时间完成的任务量(Tasks per day, hour, sec, ns. … )</p><ul><li>吞吐率(throughput)：单位时间内所完成的任务量</li><li>带宽(bandwidth)</li></ul></li></ul><p>不同应用场合用户关心的性能不同</p><ul><li>吞吐率高的场合——多媒体应用(音/视频播放要流畅)</li><li>响应时间短的场合——事务处理系统(存/取款的速度要快)</li><li>吞吐率高且响应时间短的场合——ATM、文件服务器、Web服务器等</li></ul><h4 id="CPU-性能的影响因素">CPU 性能的影响因素</h4><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230924222348945.png" alt="image-20230924222348945"></p><table><thead><tr><th>名称</th><th>影响因素</th><th>如何影响</th></tr></thead><tbody><tr><td>算法</td><td>指令数、CPI</td><td>算法决定源程序的指令条数，因此决定了处理器执行的指令条数。算法由于对慢速或快速指令的不同倾向性而同样影响了CPI。</td></tr><tr><td>编程语言</td><td>指令数、CPI</td><td>由于编程语言中的语句被翻译成CPU指令，而后者决定了指令条数，因此编程语言势必会影响指令条数。由于编程语言的自身特点，它可能同样影响CPI。例：强支持数据抽象的语言(如Java)要求间接调用，而这往往会用到具有高CPI的指令</td></tr><tr><td>编译器</td><td>指令数、CPI</td><td>编译器的效率对指令数及每条指令的平均周期数均有影响，这是因为编译器决定了从源语言语句到机器指令的翻译。编译器的作用可以非常复杂，同时通过复杂的方式影响CPI</td></tr><tr><td>指令集体系结构</td><td>指令数、时钟频率、CPI</td><td>指令集的结构对CPU性能的这三个方面均有影响，因为它影响了函数需要的指令、每条指令需要周期及CPU总的时钟频率</td></tr></tbody></table><h4 id="小结">小结</h4><ul><li>性能定义：用程序响应时间或系统吞吐率表示系统整体性能<ul><li>响应时间（执行时间）的倒数    Performance = 1 / Execution Time</li></ul></li><li>CPU性能的测量(用户程序的CPU执行时间)<ul><li>一般把程序的响应时间划分成CPU时间和等待时间，CPU时间又分成用户CPU时间和系统CPU时间</li><li>因为操作系统对自己所花费的时间进行测量时，不十分准确，所以对CPU性能的测算一般通过测算用户CPU时间来进行</li></ul></li><li>各种性能指标之间的关系（必考）<ul><li>CPU执行时间 = CPU时钟周期数 × 时钟周期</li><li>时钟周期和时钟频率互为倒数</li><li>CPU时钟周期数 = 程序指令数×平均每条指令时钟周期数CPI</li></ul></li><li>MIPS数有些情况下不能说明问题，没有可比性！<ul><li>MIPS高可能是因为程序的指令数量多,单个指令执行较快,实际的总运行时间可能更长</li></ul></li><li>针对特定指令集体系结构，提高计算机性能的主要途径有：<ul><li>提高时钟频率(第四章处理器中的流水线技术)</li><li>优化处理器中数据通路结构以降低CPI(第四章 处理器)</li><li>用编译优化措施来减少指令条数或降低指令复杂度(第二章 指令系统 )</li></ul></li></ul><h4 id="影响系统性能的硬件技术指标">影响系统性能的硬件技术指标</h4><p>1）主频</p><ul><li>定义：CPU的工作节拍是由时钟控制的，时钟不断产生固定频率的时钟脉冲，这个时钟的频率就是CPU的主频。</li><li>主频越高，CPU的工作节拍就越快，运算速度就越高</li><li>主频通常用一秒钟内处理器所能发出电子脉冲数来表示，单位一般为GHz</li><li>芯片的功耗与频率成正比</li></ul><p>2）运算速度</p><ul><li><p>定义：每秒钟所能执行的指令条数</p></li><li><p>计量单位：</p><ul><li><p>MIPS(百万条指令每秒)</p></li><li><p>MFLOPS(百万次浮点运算每秒)、GFLOPS/PFLOPS</p></li></ul></li><li><p>几种计算方法：</p><ol><li>吉布森混合法：各类指令根据出现频率加权求平均</li><li>计算各种指令的执行速度</li><li>计算典型程序的运算速度</li><li>模型分析和模拟等其他方法</li></ol></li></ul><p>3）运算精度</p><ul><li>计算机能直接处理的二进制位数</li><li>一般和CPU中存储的数据寄存器的位数是相同。位数越多，精度越高</li><li>参与运算的操作数的基本位数称之为基本字长 。早期的微机字长为8位或16位，现为32位或64位</li></ul><ol start="4"><li>存储容量</li></ol><ul><li>主存越大，处理问题的速度越快</li><li>与辅存交换次数越少，访存效率越高</li></ul><h3 id="并行计算">并行计算</h3><h4 id="Amdahl定律">Amdahl定律</h4><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mi>A</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>s</mi><mo>+</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>s</mi></mrow><mi>N</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_A=\frac 1 {s+\frac {1-s}{N}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4015em;vertical-align:-1.0801em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.2649em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0801em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>: 为处理器数量</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>: 指程序中串行部分的工作量占整个程序工作量的比例</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">S_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>:加速比</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mtext>新的性能</mtext><mtext>旧的性能</mtext></mfrac><mo>=</mo><mfrac><mtext>旧运行时间</mtext><mtext>新运行时间</mtext></mfrac><mo>=</mo><msub><mi>S</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">\frac{新的性能}{旧的性能}=\frac{旧运行时间}{新运行时间}=S_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">旧的性能</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">新的性能</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">新运行时间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">旧运行时间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><strong>Amdahl定律说明什么?</strong></p><p><em>省流:并行计算没有前途</em></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>→</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>s</mi></mrow><mi>N</mi></mfrac><mo>→</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>S</mi><mi>A</mi></msub><mo>→</mo><mfrac><mn>1</mn><mi>s</mi></mfrac></mrow><annotation encoding="application/x-tex">N \to \infin,\frac{1-s}N\to 0,S_A\to \frac 1s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>S</mi><mi>A</mi></msub></mrow><annotation encoding="application/x-tex">S_A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">A</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>存在上限</p><p>对计算机系统的某个部分采用并行优化措施后所获得的计算机性能的提高是有上限的，这个上限取决于串行部分所占的比例</p><h4 id="Gustafson公式">Gustafson公式</h4><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mtext>′</mtext></mrow><annotation encoding="application/x-tex">s′</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord mathnormal">s</span><span class="mord">′</span></span></span></span>和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mtext>′</mtext></mrow><annotation encoding="application/x-tex">p′</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.75em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord">′</span></span></span></span>为程序串行部分与可并行化部分在并行系统上执行的时间占总时间的比例，N为处理器数量</li><li>简便起见，设总时间为1，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">s&#x27;+p&#x27;=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>在串行处理器上完成该任务的时间为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>×</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">s&#x27;+p&#x27;\times N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8352em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9463em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span></li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>S</mi><mi>c</mi><mi>a</mi><mi>l</mi><mi>e</mi><mi>d</mi><mi>S</mi><mi>p</mi><mi>e</mi><mi>e</mi><mi>d</mi><mi>u</mi><mi>p</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>×</mo><mi>N</mi></mrow><mrow><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>+</mo><msup><mi>p</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>×</mo><mi>N</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>N</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>N</mi><mo stretchy="false">)</mo><mo>×</mo><msup><mi>s</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}Scaled Speedup&amp;=\frac{s&#x27;+p&#x27;\times N}{s&#x27;+p&#x27;}\\&amp;=s&#x27;+p&#x27;\times N\\&amp;=N+(1-N)\times s&#x27;\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.6093em;vertical-align:-2.5547em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0547em;"><span style="top:-5.0547em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal">Sp</span><span class="mord mathnormal">ee</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord mathnormal">p</span></span></span><span style="top:-3.0342em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"></span></span><span style="top:-1.5342em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5547em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.0547em;"><span style="top:-5.0547em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4289em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6779em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.0342em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-1.5342em;"><span class="pstrut" style="height:3.4289em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8019em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.5547em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>Gustafson公式说明什么?</strong></p><p><em>省流:并行计算有前途</em></p><ul><li>任何足够大的任务均可被有效的并行化</li><li>推论：只要问题规模可扩展，并行所带来的加速比就可扩展</li></ul><p>打破Amdahl定律的一个假设：问题规模不变,相对于Amdahl，Gustafson只是换了个看问题的角度而已，但超级计算机研制的道路豁然开朗</p><h2 id="第二章-指令系统和数据存储">第二章 指令系统和数据存储</h2><p><strong>指令系统概述</strong></p><p>兼容性：</p><ul><li>向上（下）兼容：按某档机器编制的程序，不加修改的就能运行于比它高（低）档的机器</li><li>向前（后）兼容：按某个时期投入市场的某种型号机器编制的程序，不加修改就能运行于在它之前(后)投入市场的机器</li></ul><p><strong>两种类型指令系统计算机：CISC与RISC</strong></p><p>Complex Instruction Set Computer 出现较早，大而全</p><p>Reduced Instruction Set Computer John cock &amp; 小而精</p><h3 id="指令格式">指令格式</h3><ul><li><p>与指令设计相关的问题</p><ul><li>操作码组成：操作码个数/种类/复杂度<br>如：Load/Store/INC/Branch 四种指令已足够编制任何可计算程序，但编写的程序会很长</li><li>数据类型：多种数据类型可执行操作<br>如：字节、半字、字等</li><li>指令格式：指令长度/地址码个数/各字段长度</li><li>通用寄存器：个数/功能/长度</li><li>寻址方式：操作数地址的指定/计算方式</li><li>下条指令地址的确定：顺序(PC+4)、转移(目的地址)</li></ul></li><li><p>操作码长度和指令长度什么关系？</p><ul><li>指令长度是否可变，与操作码长度是否可变没有绝对联系,“定长操作码、不一定是定长指令字”</li><li>关注程序代码长度时：变长指令字、变长操作码 (为了把程序都能放到cache中，或嵌入式设备要求存储器尽可能小)</li><li>关注性能时：定长指令字、定长操作码</li><li>流行的RISC：定长指令字、变长操作码(现在大部分的体系结构)</li></ul></li></ul><p>定长操作码/扩展操作码</p><h3 id="寻址方式">寻址方式</h3><h5 id="立即数寻址">立即数寻址</h5><p>源操作数直接在指令中</p><p>1.指令执行时间很短，无需访存<br>2.操作数的大小受地址字段长度的限制<br>3.广泛使用</p><p>平时用的基本都是很小的数，特别是1和0用得最多, 这种方式访问速度更快</p><h5 id="存储器直接寻址">存储器直接寻址</h5><p>操作数在存储器中，指令地址字段<br>直接给出操作数在存储器中的地址</p><ol><li>处理简单、直接</li><li>寻址空间受到指令的地址字段长度限制</li><li>较少使用，8位计算机和一些16位计算机</li></ol><p>能够直接寻址的那一部分内存空间 可以给操作系统内核用，别的程序不允许使用</p><p>操作系统内核是基本不变的，并且经常访问</p><h5 id="寄存器直接寻址">寄存器直接寻址</h5><p>操作数在寄存器中，指令地址字段直接给出存放操作数的寄存器编号</p><ol><li>只需要很短的地址字段</li><li>无需访存，指令执行速度快</li><li>地址范围有限，可以编程使用的通用寄存器不多</li><li>使用最多，是提高性能的常用手段</li></ol><h5 id="存储器间接寻址">存储器间接寻址</h5><p>操作数和操作数地址都在存储器中<br>指令地址字段直接给出操作数地址在存储器中的地址</p><p>两次访存，速度慢<br>实际使用很少</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">EA = (A)，Operand = ((A))<br>例：<span class="hljs-keyword">MOV</span>  <span class="hljs-built_in">R1</span>, @(<span class="hljs-number">1000H</span>)<br></code></pre></td></tr></table></figure><h5 id="寄存器间接寻址">寄存器间接寻址</h5><ul><li>操作数在存储器中</li><li>操作数地址在寄存器中</li><li>指令地址字段给出的寄存器的内容是操作数在存储器中的地址</li></ul><p>比存储器间接寻址少访问存储器一次<br>寻址空间大，使用比较普遍</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">EA</span> <span class="hljs-operator">=</span> (R)，Operand <span class="hljs-operator">=</span> ((R))<br>例：MOV  AX，[BX]<br></code></pre></td></tr></table></figure><h5 id="偏移寻址">偏移寻址</h5><ul><li><p><strong>相对寻址</strong></p><p>EA=(PC)+A<br>相对于当前指令处 位移量为A的单元</p></li></ul><p>相对寻址是把 PC 的内容加上指令格式中的形式地址 A 而形成操作数的有效地址，即 EA =(PC)+A，其中 A 是相对于当前指令地址的位移量，可正可负，补码表示，常用于<code>jmp</code>指令的跳转</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925081235817.png" alt="image-20230925081235817"></p><p>设指令长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Δ</mi></mrow><annotation encoding="application/x-tex">\Delta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Δ</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mi>i</mi><mi>s</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Disp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span></span></span></span>为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi></mrow><annotation encoding="application/x-tex">A</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span></span></span></span>给出的位移量</p><p>则目的地址<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mo stretchy="false">(</mo><mi>P</mi><mi>C</mi><mo>+</mo><mi mathvariant="normal">Δ</mi><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">Δ</mi><mo>×</mo><mi>D</mi><mi>i</mi><mi>s</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">=(PC+\Delta)+\Delta\times Disp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">PC</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Δ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord">Δ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">p</span></span></span></span></p><ul><li><p><strong>基址寻址</strong></p><p>EA=(B)+A<br>相对于基址(B)处 位移量为A的单元</p></li></ul><p>基址寻址实现程序的重定位</p><p>基址寻址是指将CPU中基址寄存器(BR)的内容加上指令格式中的形式地址A而形成操作数的有效地址,即EA=(BR) + A。其中基址寄存器既可采用专用寄存器,又可采用通用寄存器</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925081904623.png" alt="image-20230925081904623"></p><p>基址寄存器是面向操作系统的，其内容由操作系统或管理程序确定，主要用于解决程序逻辑空间与存储器物理空间的无关性。在程序执行过程中,基址寄存器的内容不变(作为基地址),形式地址可变(作为偏移量)。采用通用寄存器作为基址寄存器时,可由用户决定哪个寄存器作为基址寄存器，但其内容仍由操作系统确定。</p><p>基址寻址的优点是可扩大寻址范围(基址寄存器的位数大于形式地址A的位数);用户不必考虑自己的程序存于主存的哪个空间区域,因此有利于多道程序设计,并可用于编制浮动程序,但偏移量(形式地址A)的位数较短。</p><ul><li><p><strong>变址寻址</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\to</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span></span></span></span>适用于数组的下标访问</p><p>EA=(I)+A<br>相对于形式地址A处位移量为(I)的单元</p></li></ul><p>变址寻址实现线性表元素的存取</p><p>变址寄存器的内容由用户设定，在程序执行过程中其值可变，而指令字中的形式地址A是不可变的！</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925082325685.png" alt="image-20230925082325685"></p><p>变址寻址是指有效地址EA等于指令字中的形式地址A与变址寄存器IX 的内容之和,即EA= (IX) + A,其中IX为变址寄存器(专用),也可用通用寄存器作为变址寄存器。图为采用专用寄存器IX的变址寻址示意图。</p><h5 id="堆栈寻址">堆栈寻址</h5><p>堆栈是存储器（或专用寄存器组）中一块特定的、按后进先出（LIFO）原则管理的存储区,该存储区中读/写单元的地址是用一个特定的寄存器给出的,该寄存器称为堆栈指针(SP)。堆栈可分为硬堆栈与软堆栈两种。</p><p>寄存器堆栈又称硬堆栈。寄存器堆栈的成本较高,不适合做大容量的堆栈;而从主存中划出一段区域来做堆栈是最合算且最常用的方法,这种堆栈称为软堆栈。</p><p>在采用堆栈结构的计算机系统中，大部分指令表面上都表现为无操作数指令的形式，因为操作数地址都隐含使用了SP。通常情况下,在读/写堆栈中的一个单元的前后都伴有自动完成对SP 内容的增量或减量操作。</p><h5 id="复合寻址">复合寻址</h5><ul><li><p>先间接</p><ul><li>间接相对式<br>EA=(PC)+ (A)</li><li>间接变址式<br>EA=(X)+ (A)</li></ul></li><li><p>后间接</p><ul><li>相对间接式<br>EA =((PC)+ A)</li><li>变址间接式<br>EA =((X)+ A)</li></ul></li></ul><h5 id="寻址方式的确定">寻址方式的确定</h5><ul><li><p>在操作码中隐含寻址方式</p><p>如：MIPS指令中仅有一个主(虚)存地址，且指令中仅有一、二种寻址方式</p></li><li><p>专门的寻址方式位显式给出：如：X86指令</p></li></ul><h5 id="总结">总结</h5><ul><li>立即数寻址 MOV  AX , 500H</li><li>直接寻址 MOV  AX, [500H]</li><li>寄存器寻址 MOV  AX,  BX</li><li>寄存器间接寻址 MOV AX,  [BX]</li><li>基址寻址 MOV AX, 500H[BX]</li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925105219699.png" alt="image-20230925105219699"></p><h3 id="数据在计算机中的表示">数据在计算机中的表示</h3><p>为什么计算机内部所有信息都采用二进制编码表示？</p><ol><li>制造二个稳定态的物理器件比较容易</li><li>二进制的编码、计数、运算规则简单</li><li>与逻辑命题对应，便于逻辑运算，并能方便地用逻辑电路实现算术运算</li></ol><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231001165337343.png" alt="image-20231001165337343"></p><h4 id="浮点表示">浮点表示</h4><p>浮点数标准IEEE 754</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925112717303.png" alt="image-20230925112717303"></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">符号 s  (Sign)</th><th style="text-align:center">阶码e  (整数)Exponent</th><th style="text-align:center">尾数f  (小数)Significand</th></tr></thead><tbody><tr><td style="text-align:center">float</td><td style="text-align:center">1</td><td style="text-align:center">8</td><td style="text-align:center">23</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">1</td><td style="text-align:center">11</td><td style="text-align:center">52</td></tr></tbody></table><p>SP(单精度)浮点数: $ (-1)^S × (1 + f ) × 2^{(Exponent-127)}$</p><p>DP(双精度)浮点数: $ (-1)^S × (1 + f ) × 2^{(Exponent-1023)}$</p><h5 id="阶码">阶码</h5><p>阶码用移码表示，移码比补码更容易比较大小，便于浮点数加减运算时进行对阶操作</p><p>n为阶码位数，则偏置常数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{n-1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>偏置常数为：<br>127（单精度SP)；1023（双精度DP）<br>单精度规格化数阶码范围为<br>0000 0001 (-126) ~ 11111110 (127)</p><p>全0和全1的编码留做它用</p><h5 id="特殊浮点数">特殊浮点数</h5><table><thead><tr><th>阶码(移码)</th><th>尾数</th><th>数据类型</th></tr></thead><tbody><tr><td>1~254</td><td>任何值</td><td>规格化数（隐含小数点前为“1”）</td></tr><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>非零的数</td><td>非规格化数（表示更小的数） Denormalized numbers</td></tr><tr><td>255</td><td>0</td><td>inf</td></tr><tr><td>255</td><td>非零的数</td><td>非数(NaN)Not a Number,用于方便调试错误</td></tr></tbody></table><p>表示0：</p><p>+0： 0 00000000 00000000000000000000000<br>-0：  1 00000000 00000000000000000000000</p><p>表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi><mi mathvariant="normal">/</mi><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infin/-\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mord">∞/</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>：0 11111111 00000000000000000000000</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>：1 11111111 00000000000000000000000</p><p>非规格化数可表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.00</mn><mo>…</mo><mn>01</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup></mrow><annotation encoding="application/x-tex">0.00…01×2^{-126}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.00</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">01</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span></span></span></span>至<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.11</mn><mo>…</mo><mn>11</mn><mo>×</mo><msup><mn>2</mn><mrow><mo>−</mo><mn>126</mn></mrow></msup></mrow><annotation encoding="application/x-tex">0.11…11×2^{-126}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0.11</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">11</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">126</span></span></span></span></span></span></span></span></span></span></span></span>之间的数</p><p>打破第一位为1的限制，牺牲精度换更大的表示范围</p><h4 id="数据度量单位">数据度量单位</h4><table><thead><tr><th>度量单位</th><th>缩写</th><th>存储二进制时  换算关系</th><th>描述计算机通信带宽时  换算关系</th></tr></thead><tbody><tr><td>千字节</td><td>KB</td><td>1KiB=2^10^字节=1024B</td><td>1KB=10^3^字节=1000B</td></tr><tr><td>兆字节</td><td>MB</td><td>1MiB=2^20^字节=1024KB</td><td>1MB=10^6^字节=1000KB</td></tr><tr><td>千兆字节</td><td>GB</td><td>1GiB=2^30^字节=1024MB</td><td>1GB=10^9^字节=1000MB</td></tr><tr><td>兆兆字节</td><td>TB</td><td>1TiB=2^40^字节=1024GB</td><td>1TB=10^12^字节=1000GB</td></tr></tbody></table><h4 id="大端和小端存储">大端和小端存储</h4><ul><li><p>大端方式(Big Endian)：MSB(Most Significant Bit，最高有效位)所在的地址是数的地址（先存最高位）<br>e.g. IBM 360/370, Motorola 68k, MIPS, Sparc, HP PA</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">01</span> <span class="hljs-number">23</span> <span class="hljs-number">45</span> <span class="hljs-number">67</span><br>内存-&gt;<br></code></pre></td></tr></table></figure></li><li><p>小端方式(Little Endian)：LSB(Least Significant Bit，最低有效位)所在的地址是数的地址（先存最低位）<br>e.g. Intel 80x86, DEC VAX</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">67</span> <span class="hljs-number">45</span> <span class="hljs-number">23</span> <span class="hljs-number">01</span><br>内存-&gt;<br></code></pre></td></tr></table></figure></li></ul><p>有些机器两种方式都支持，需要通过特定控制位来设定（ARM, Alpha）</p><p>音频、视频和图像等文件格式或处理程序都涉及字节的顺序问题<br>例： Little endian：GIF, PC Paintbrush, Microsoft RTF等<br>Big endian：Adobe Photoshop, JPEG, MacPaint等</p><h4 id="数据对齐">数据对齐</h4><ul><li>按边界对齐 (假定字的宽度为32位，存储器按字节编址)<ul><li>字地址：4的倍数(低两位为0)</li><li>半字地址：2的倍数(低位为0)</li><li>字节地址：任意</li></ul></li><li>不按边界对齐</li></ul><h4 id="数据校验">数据校验</h4><ul><li>奇偶校验码</li><li>海明码</li><li>循环冗余码（现在应用广，特别是网络上）</li></ul><h4 id="定点小数">定点小数</h4><ul><li><p>定点整数：小数点位于最右侧</p><p>编码表示：原码、反码、补码、移码</p></li><li><p>定点小数：小数点位于符号位右侧</p><p>编码表示：原码、反码、补码</p></li></ul><p>定点小数转化为反码、补码和定点整数转化为反码、补码完全一样</p><p>加减也一样，转化为补码运算</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231001170611957.png" alt="image-20231001170611957"></p><p>定点小数和定点整数在位数扩展时，扩展的位置不一样</p><ul><li><p>定点小数在尾部扩展</p><p>1.110 -&gt; 1.1100000</p></li><li><p>定点整数在头部扩展</p><p>1,110 -&gt; 1,1111110 (补码)</p><p>1,110 -&gt; 1,0001110 (原码)</p></li></ul><h3 id="MIPS指令集">MIPS指令集</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925123624596.png" alt="image-20230925123624596"></p><h2 id="第三章-数据运算">第三章 数据运算</h2><ul><li><p>按位运算</p><ul><li>操作<ul><li>按位或：“|”</li><li>按位与：“&amp;”</li><li>按位取反：“~”</li><li>按位异或：“^”</li></ul></li><li>用途<ul><li>对一个位串实现“掩码”(mask)操作或相应的其他处理</li><li>主要用于对多媒体数据或控制信息进行处理</li></ul></li></ul></li><li><p>逻辑运算</p><ul><li><p>操作</p><ul><li><p>“‖”表示“OR”运算</p></li><li><p>“&amp;&amp;”表示“AND”运算<br>例如， <code>if ((x&gt;y) &amp;&amp; (i&lt;100)) then ……</code></p></li><li><p>“!”表示“NOT”运算</p></li></ul></li><li><p>用途</p><ul><li>用于关系表达式的运算<br>例如，<code>if (x&gt;y &amp;&amp; i&lt;100)then ……</code>中的“and”运算</li></ul></li><li><p>与按位运算的差别</p><ul><li>符号表示不同：<code>&amp;</code> vs. <code>&amp;&amp;</code> ；<code>|</code> vs. <code>‖</code>； ……</li><li>运算过程不同：按位 vs. 整体</li><li>结果类型不同：位串 vs. 逻辑值</li></ul></li></ul></li><li><p>移位运算</p><ul><li>算术左移</li><li>算数右移</li><li>逻辑左移</li><li>逻辑右移</li><li><ul><li>逻辑移位：对无符号数进行，左(右)边补0，低(高)位移出</li><li>算术移位：对带符号整数进行，移位前后符号位不变，编码不同，方式不同</li><li>循环移位：最左(右)边位移到最低(高)位，其他位左(右)移一位</li></ul></li></ul></li><li><p>位扩展和位截断运算</p><ul><li>强制类型转换时，可能造成数据位被扩展或者被截断</li><li>短数转为长数—位扩展<ul><li>无符号数：0扩展，即：前面补“0 ”</li><li>有符号整数：符号扩展，即：前面补“数符”</li></ul></li><li>长数转为短数—位截断<ul><li>强行将一个长数的高位丢弃</li><li>可能会发生数据“溢出”或者数据不正确</li></ul></li></ul></li></ul><h3 id="补码基本运算-加减">补码基本运算(加减)</h3><p>补码加法器的基本实现</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925150310944.png" alt="image-20230925150310944"></p><h4 id="溢出问题">溢出问题</h4><ul><li>OF (Overflow Flag)溢出标志。溢出时为1,否则置0.</li><li>SF (Sign Flag)符号标志。结果为负时置1,否则置0.</li><li>ZF (Zero Flag)零标志,运算结果为0时ZF位置1,否则置0.</li><li>CF (Carry Flag)进位/借位标志,进位/借位时置1,否则置0.</li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925150757629.png" alt="image-20230925150757629"></p><p>溢出检测方法：运算中增加一位补码（模4补码）</p><table><thead><tr><th><strong>符号位</strong></th><th><strong>相同</strong></th><th><strong>01</strong></th><th><strong>10</strong></th></tr></thead><tbody><tr><td>状态表示</td><td>正常</td><td>正溢出</td><td>负溢出</td></tr></tbody></table><h3 id="加法器">加法器</h3><ul><li><p>串行进位加法器</p><ul><li>分n步实现，每步只求一位和</li><li>缺点<ul><li>进位按串行方式传递，速度慢</li><li>进位延时较长，关键路径延时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li><li>实现复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></li></ul></li></ul></li><li><p>并行进位加法器</p><ul><li>同时产生进位</li><li>加法延时缩短，关键路径延时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>（时间）</li><li>实现相对复杂，复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>(逻辑门的数量)</li><li>高位的进位形成逻辑涉及输入变量过多，将受到器件扇入系数的限制,实现困难</li></ul></li><li><p>分组并行进位加法器</p></li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925152132572.png" alt="image-20230925152132572"></p><p>组内并行，组间传递</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925152207693.png" alt="image-20230925152207693"></p><p>四个组同时计算，需要算两轮，首先各自独立算C4,C8,C12,C16，再根据得到的C4,C8,C12,C16重新算一遍，需要两个时钟周期</p><h3 id="移码的加减运算">移码的加减运算</h3><p>注意：此处的移码和[IEEE754标准中的移码](## 浮点移码)不同，使用不一样的偏置常数，所以运算法则不同，请注意区分</p><p>此处的移码运算：以8位移码为例，偏置常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>7</mn></msup><mo>=</mo><mn>128</mn></mrow><annotation encoding="application/x-tex">2^7=128</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">128</span></span></span></span>,</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><mo>+</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mo>+</mo><msub><mi>E</mi><mn>2</mn></msub><mo>+</mo><mn>128</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>−</mo><mn>128</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mn>1000000</mn><msub><mn>0</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}{[E_1+E_2]_移} &amp;=E_1+E_2+128\mod 2^8\\&amp;=[E_1]_移+[E_2]_移-128\mod 2^8\\&amp;=[E_1]_移+[E_2]_移+10000000_{(2)}\mod 2^8\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1000000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>128</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>128</mn><mo>−</mo><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>128</mn><mo stretchy="false">)</mo><mo>+</mo><mn>128</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>−</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mn>1000000</mn><msub><mn>0</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}{[E_1-E_2]_移} &amp;=[E_1]_补+[-E_2]_补+128\mod 2^8\\&amp;=[E_1]_补+128-([E_2]_补+128)+128\mod 2^8\\&amp;=[E_1]_移-[E_2]_移+10000000_{(2)}\mod 2^8\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">([</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">128</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1000000</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>补码和移码的关系：符号位相反、数值位相同！</strong></p><p>移码相加减的结果等于其对应补码</p><ol><li>加法：直接将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>E</mi><mn>1</mn><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow><annotation encoding="application/x-tex">[E1]_移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>E</mi><mn>2</mn><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow><annotation encoding="application/x-tex">[E2]_移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>进行模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>相加，对结果符号取反</li><li>减法：先将减数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>E</mi><mn>2</mn><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow><annotation encoding="application/x-tex">[E2]_移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 求补(各位取反，末位加1)，再与被减数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>E</mi><mn>1</mn><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow><annotation encoding="application/x-tex">[E1]_移</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">1</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>进行模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>相加，对结果的符号取反</li><li>溢出判断：进行模<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>相加时，如果两个加数的符号相同，且与和数的符号也相同，则发生溢出</li></ol><h3 id="原码乘法">原码乘法</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/%E4%B9%98%E6%B3%95.gif" alt="乘法"></p><h3 id="补码乘法-Booth乘法">补码乘法(Booth乘法)</h3><p>例：C=A＊B<br>被乘数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msub><mi>A</mi><mn>01</mn></msub><msub><mi>A</mi><mn>02</mn></msub><msub><mi>A</mi><mn>1</mn></msub><msub><mi>A</mi><mn>2</mn></msub><mo>…</mo><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">[A]_补=A_{01} A_{02}A_1A_2…A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">01</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">02</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>乘数    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>B</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msub><mi>B</mi><mn>0</mn></msub><msub><mi>B</mi><mn>1</mn></msub><msub><mi>B</mi><mn>2</mn></msub><mo>…</mo><msub><mi>B</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">[B]_补=B_0B_1B_2…B_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>乘积        <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>C</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><msub><mi>C</mi><mn>1</mn></msub><msub><mi>C</mi><mn>2</mn></msub><mo>…</mo><msub><mi>C</mi><mi>n</mi></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mi>C</mi><mrow><mi>n</mi><mo>+</mo><mn>2</mn></mrow></msub><mo>…</mo><msub><mi>C</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">[C]_补=C_0C_1C_2…C_nC_{n+1}C_{n+2}…C_{2n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><table><thead><tr><th>判断位  (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">B_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>B</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">B_{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>)</th><th>新部分积  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>P</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[P_{i+1}]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=</th><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>0 0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">[</mo><msub><mi>P</mi><mi>i</mi></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">2^{-1}[P_i]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\to 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>右移一位</td></tr><tr><td>0 1</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">{</mo><mo stretchy="false">[</mo><msub><mi>P</mi><mi>i</mi></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">2^{-1}\{[P_i]_补+[A]_补\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">{[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mo separator="true">,</mo><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">+,\to1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord">+</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>加<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[A]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>后再右移一位</td></tr><tr><td>1 0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">{</mo><mo stretchy="false">[</mo><msub><mi>P</mi><mi>i</mi></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">2^{-1}\{[P_i]_补+[-A]_补\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">{[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">}</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo separator="true">,</mo><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">-,\to1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>加<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mi>A</mi><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">[-A]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord mathnormal">A</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>后再右移一位</td></tr><tr><td>1 1</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">[</mo><msub><mi>P</mi><mi>i</mi></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub></mrow><annotation encoding="application/x-tex">2^{-1}[P_i]_补</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\to1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td><td>右移一位</td></tr></tbody></table><h3 id="快速加法">快速加法</h3><p>存储进位加法器CSA： 将进位在本级加法器中保存，留待以后级进行计算。又称伪加器</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20230925180128545.png" alt="image-20230925180128545"></p><h3 id="浮点数的计算">浮点数的计算</h3><ul><li>Representation(表示)<ul><li>Normalized form (规格化形式) 和 Denormalized form (非规格化形式)</li><li>单精度和 双精度格式</li></ul></li><li>Range and Precision(表示范围和精度)</li><li>Arithmetic (运算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mo separator="true">,</mo><mo>−</mo><mo separator="true">,</mo><mo>×</mo><mo separator="true">,</mo><mo>÷</mo></mrow><annotation encoding="application/x-tex">+,-,\times,÷</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord">+</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">×</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">÷</span></span></span></span> )（重点）</li><li>Rounding(舍入)</li><li>Exceptions (异常处理)</li><li>Errors(误差)与精度控制</li></ul><h4 id="加法">加法</h4><p>进行尾数加法运算前，必须“对阶”！</p><p>IEEE754尾数右移时，需要注意的是什么？</p><p>1、要将隐含的“1”移到小数部分，空出位补0；<br>2、移出的低位保留到特定的“附加位”上</p><p>浮点数加法步骤</p><ul><li><p>求阶差</p></li><li><p>对阶</p></li><li><p>尾数相加</p></li><li><p>规格化并判溢出</p></li><li><p>舍入</p><p>如果尾数比规定位数长，需考虑舍入</p></li><li><p>置0</p><p>尾数为0说明结果也为0，<br>根据IEEE754，阶码和尾数全为0</p></li></ul><h4>有四种舍入方式</h4><p><strong>就近舍入：</strong></p><ul><li>11：入</li><li>01：舍</li><li>10（强制结果为偶数)</li><li>00：保持结果不变</li></ul><p>1.1101<u>11</u> ~ 1.1110</p><p>1.1101<u>01</u> ~ 1.1101</p><p>1.1101<u>10</u> ~ 1.1110</p><p>1.1111<u>00</u> ~ 1.1111</p><p><strong>朝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>方向舍入</strong></p><p><strong>朝<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span>方向舍入</strong></p><p><strong>朝0方向舍入</strong></p><h4 id="溢出">溢出</h4><ul><li><p>阶码上溢</p><p>超过了阶码可能表示的最大允许值,<br>一般将其认为是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span></p></li><li><p>阶码下溢</p><p>超过了阶码可能表示的最小允许值 ，<br>一般将其认为是0</p></li><li><p>尾数上溢</p><p>两个同/异符号尾数相加/减，<br>最高有效位产生了进位</p><p>这种情况一般不是异常，可以更改阶码</p></li><li><p>尾数下溢</p><p>在将尾数右移时，尾数的最低有效位从<br>尾数域右端移出去，丢失了有效信息</p></li></ul><h4 id="乘除法">乘除法</h4><h5 id="浮点移码">浮点移码</h5><p>IEEE754标准中的移码计算法则和[前面的移码运算法则](## 移码的加减运算)不同，使用不一样的偏置常数，所以运算法则不同，请注意区分</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><mo>+</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mo>+</mo><msub><mi>E</mi><mn>2</mn></msub><mo>+</mo><mn>127</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>−</mo><mn>127</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mn>1000000</mn><msub><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}{[E_1+E_2]_移} &amp;=E_1+E_2+127\mod 2^8\\&amp;=[E_1]_移+[E_2]_移-127\mod 2^8\\&amp;=[E_1]_移+[E_2]_移+10000001_{(2)}\mod 2^8\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1000000</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mo stretchy="false">[</mo><mo>−</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>127</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>127</mn><mo>−</mo><mo stretchy="false">(</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>补</mtext></msub><mo>+</mo><mn>127</mn><mo stretchy="false">)</mo><mo>+</mo><mn>127</mn><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>1</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>−</mo><mo stretchy="false">[</mo><msub><mi>E</mi><mn>2</mn></msub><msub><mo stretchy="false">]</mo><mtext>移</mtext></msub><mo>+</mo><mn>0111111</mn><msub><mn>1</mn><mrow><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msub><mspace></mspace><mspace width="1em"/><mrow><mi mathvariant="normal">m</mi><mi mathvariant="normal">o</mi><mi mathvariant="normal">d</mi></mrow><mtext> </mtext><mtext> </mtext><msup><mn>2</mn><mn>8</mn></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}{[E_1-E_2]_移} &amp;=[E_1]_补+[-E_2]_补+127\mod 2^8\\&amp;=[E_1]_补+127-([E_2]_补+127)+127\mod 2^8\\&amp;=[E_1]_移-[E_2]_移+01111111_{(2)}\mod 2^8\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5723em;vertical-align:-2.0362em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5362em;"><span style="top:-4.6721em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-3.1479em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">([</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">127</span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span><span style="top:-1.6238em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">移</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0111111</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.5198em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3552em;"><span></span></span></span></span></span></span><span class="mspace allowbreak"></span><span class="mspace" style="margin-right:1em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">mod</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0362em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>加法：相当于移码相加的结果对符号位取反后再加一</p><p>减法：相当于移码相减的结果对符号位取反后再减一</p><h5 id="规格化：">规格化：</h5><p>规格化原则<br>当尾数高位为0，左规<br>当尾数产生进位，右规</p><p>规格化尾数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mtext>尾</mtext><msub><mtext>数</mtext><mn>1</mn></msub><mo>&lt;</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">1≤尾数_1&lt;2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">尾</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>， $1≤尾数_2&lt;2 $   (<a href="http://xn--1-br6a916b55co6j.xxx">尾数形为1.xxx</a>)</p><ul><li><p>乘法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mtext>尾</mtext><msub><mtext>数</mtext><mn>1</mn></msub><mo>×</mo><mtext>尾</mtext><msub><mtext>数</mtext><mn>2</mn></msub><mo>&lt;</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">1≤尾数_1 × 尾数_2&lt;4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">尾</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">尾</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>不需左规、最多右规一次</p></li><li><p>除法：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0.5</mn><mo>&lt;</mo><mtext>尾</mtext><msub><mtext>数</mtext><mn>1</mn></msub><mo>÷</mo><mtext>尾</mtext><msub><mtext>数</mtext><mn>2</mn></msub><mo>&lt;</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">0.5&lt;尾数_1 ÷ 尾数_2&lt;2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">0.5</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">尾</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord cjk_fallback">尾</span><span class="mord"><span class="mord cjk_fallback">数</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>不需右规、最多左规一次</p></li></ul><p>(考试重点)</p><h2 id="计组实验">计组实验</h2><h3 id="RISC-V指令集">RISC-V指令集</h3><p><a href="https://www.cs.cornell.edu/courses/cs3410/2019sp/riscv/interpreter/#">在线 RISC-V 整数指令集解释器</a></p><p>六种基本指令格式：</p><ol><li>用于寄存器-寄存器操作的 R 类型指令</li><li>用于短立即数和访存 load 操作的 I 型指令</li><li>用于访存 store 操作的 S 型指令</li><li>用于条件跳转操 作的 B 类型指令</li><li>用于长立即数的 U 型指令</li><li>用于无条件跳转的 J 型指令。</li></ol><ul><li>Arithmetics: <code>ADD</code>, <code>ADDI</code>, <code>SUB</code></li><li>Logical: <code>AND</code>,<code>ANDI</code>,<code>OR</code>,<code>ORI</code>,<code> XOR</code>,<code>XORI</code></li><li>Sets: <code>SLT</code>, <code>SLTI</code>, <code>SLTU</code>, <code>SLTIU</code></li><li>Shifts: <code>SRA</code>, <code>SRAI</code>, <code>SRL</code>, <code>SRLI</code>,<code>SLL</code>, <code>SLLI</code></li><li>Memory: <code>LW</code>, <code>SW</code>, <code>LB</code>, <code>SB</code></li><li>PC: <code>LUI</code>, <code>AUIPC</code></li><li>Jumps: <code>JAL</code>, <code>JALR</code></li><li>Branches: <code>BEQ</code>, <code>BNE</code>,<code>BLT</code>, <code>BGE</code>, <code>BLTU</code>, <code>BGEU</code></li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231027073124564.png" alt="image-20231027073124564"></p><h4 id="Arithmetics">Arithmetics</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">addi a0,a0,1<br>addi a1,a1,2<br>add a2,a0,a1<br>sub a3,a1,a2<br></code></pre></td></tr></table></figure><p>带立即数：</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231017122311122.png" alt="image-20231017122311122"></p><p>不带立即数：</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231017123011030.png" alt="image-20231017123011030"></p><h4 id="Logical">Logical</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">addi a0,a0,1<br>addi a1,a1,2<br>or a3,a1,a0<br></code></pre></td></tr></table></figure><h4 id="sets">sets</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">addi a0,a0,1<br>addi a1,a1,2<br>slt a2,a0,a1<br>slti a3,a1,6<br></code></pre></td></tr></table></figure><ul><li><code>SLT</code> set on lower than</li><li><code>SLTI</code>最后一个数为立即数</li><li><code>SLTU</code>和<code>SLTIU</code>用于无符号数</li></ul><h4 id="shifts">shifts</h4><ul><li><code>SRA</code> shift right arithmetic</li><li><code>SRAI</code> shift right arithmetic immediate</li><li><code>SRL</code> shift right logical</li><li><code>SRLI</code> shift right logical immediate</li><li><code>SLL</code> shift left logical</li><li><code>SLLI</code> shift left logical immediate</li></ul><p>Slli rd, rs1, imm表示shift left logical imm，将rs1中的数，逻辑左移imm这么多位数，逻辑移位的话都是填充0.<br>Srli rd, rs1, imm表示shift right logical imm，表示逻辑右移，也是填充0<br>Srai rd, rs1, imm表示shift right arithmetic imm，表示算数右移，即右移的时候，填充符号位。</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231017122702842.png" alt="image-20231017122702842"></p><h4 id="Memory">Memory</h4><h4 id="PC">PC</h4><ul><li><p><code>LUI</code> Load upper imm.</p><p>Lui rd, imm表示load upper imm，用于构建32位立即数到rd中，低12位填充0，高20位是imm。注意，汇编的时候，imm的值只是立即数的高20位，低12位还要填充0.特别注意。</p></li><li><p><code>AUIPC</code> Add upper Imm to PC</p><p>Auipc rd, imm，add upper imm to pc,表示将立即数低12位填充0，构建32位偏移，然后加到这条auipc指令的pc上，然后写到rd里。注意auipc加上一条有12位立即数的jalr指令，可以跳到32位地址下的任意位置。</p></li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/risc-v.png" alt="risc-v"></p><h3 id="chisel">chisel</h3><h4 id="运算符">:=运算符</h4><p>在chisel中，:=运算符用于给可变对象重新赋值，例如Wire或Reg。它是一种特殊的方法，可以在硬件描述中表示连接或驱动的语义。它与=运算符不同，=运算符用于给不可变对象初始化赋值，例如val变量或常量。:=运算符的优先级与=运算符相同，都是最低的。你可以参考以下两个网页了解更多关于chisel中=和:=的区别和用法：<a href="https://zhuanlan.zhihu.com/p/567818196">Chisel 入门引导教程</a>和<a href="https://blog.csdn.net/Frederick_Bala/article/details/108375915">chisel中=和:=的区别</a>。</p><h4 id="">+&amp;</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// a +&amp; b includes the carry, a + b does not</span><br>  io.sum := io.in0 +&amp; io.in1<br></code></pre></td></tr></table></figure><p>代码见3.1节</p><h4 id="32个32位寄存器组">32个32位寄存器组</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// A Register of a vector of UInts</span><br>    <span class="hljs-keyword">val</span> reg = <span class="hljs-type">RegInit</span>(<span class="hljs-type">VecInit</span>(<span class="hljs-type">Seq</span>.fill(<span class="hljs-number">32</span>)(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>))))<br></code></pre></td></tr></table></figure><p>见3.2节</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegisterFile</span>(<span class="hljs-params">readPorts: <span class="hljs-type">Int</span></span>) <span class="hljs-keyword">extends</span> <span class="hljs-title">Module</span> </span>&#123;<br>    require(readPorts &gt;= <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">val</span> io = <span class="hljs-type">IO</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Bundle</span> &#123;<br>        <span class="hljs-keyword">val</span> wen   = <span class="hljs-type">Input</span>(<span class="hljs-type">Bool</span>())<br>        <span class="hljs-keyword">val</span> waddr = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">5.</span><span class="hljs-type">W</span>))<br>        <span class="hljs-keyword">val</span> wdata = <span class="hljs-type">Input</span>(<span class="hljs-type">UInt</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>))<br>        <span class="hljs-keyword">val</span> raddr = <span class="hljs-type">Input</span>(<span class="hljs-type">Vec</span>(readPorts, <span class="hljs-type">UInt</span>(<span class="hljs-number">5.</span><span class="hljs-type">W</span>)))<br>        <span class="hljs-keyword">val</span> rdata = <span class="hljs-type">Output</span>(<span class="hljs-type">Vec</span>(readPorts, <span class="hljs-type">UInt</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>)))<br>    &#125;)<br>    <br>    <span class="hljs-comment">// A Register of a vector of UInts</span><br>    <span class="hljs-keyword">val</span> reg = <span class="hljs-type">RegInit</span>(<span class="hljs-type">VecInit</span>(<span class="hljs-type">Seq</span>.fill(<span class="hljs-number">32</span>)(<span class="hljs-number">0.</span><span class="hljs-type">U</span>(<span class="hljs-number">32.</span><span class="hljs-type">W</span>))))<br>    <br>        when (io.wen) &#123;<br>        reg(io.waddr) := io.wdata<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i &lt;- <span class="hljs-number">0</span> until readPorts) &#123;<br>        when (io.raddr(i) === <span class="hljs-number">0.</span><span class="hljs-type">U</span>) &#123;<br>            io.rdata(i) := <span class="hljs-number">0.</span><span class="hljs-type">U</span><br>        &#125; .otherwise &#123;<br>            io.rdata(i) := reg(io.raddr(i))<br>        &#125;<br>    &#125;<br><br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="中断">中断</h3><ul><li><code>mepc</code>：保存的是中断或者异常处理完成后，CPU返回并开始执行的地址。所以对于异常和中断，<code>mepc</code> 的保存内容需要注意。</li><li><code>mcause</code>：保存的是导致中断或者异常的原因，具体内容请查阅特权级手册里的相关内容。</li><li><code>mstatus</code>：在响应中断时，需要将 <code>mstatus</code> 寄存器中的 <code>MPIE</code> 标志位设置为 <code>0</code>，禁用中断。</li></ul><p>然后从 <code>mtvec</code> 获取中断处理程序的地址，跳转到该地址执行进一步的中断处理。</p><h4 id="CSR和CLINT">CSR和CLINT</h4><p>在RISC-V架构的CPU中，CSR（Control and Status Registers）和CLINT（Core Local Interruptor）是两个重要的组成部分。CSR是一类控制和状态寄存器，属于CPU自带的一类寄存器，用于控制和监视CPU的运行状态。CLINT是一个内存映射设备，用于处理器核之间的中断和定时器功能。下面是它们的工作原理：</p><ul><li>CSR：在机器模式下，这些存储器主要包括以下六类：<ol><li>处理器信息相关：例如处理器的厂商信息、架构信息、核心数等等，是一个芯片自身的固有信息。</li><li>中断配置相关：例如中断开关以及中断入口等信息。</li><li>中断响应相关：例如中断原因、中断返回地址等信息。</li><li>存储器保护相关：设置不同地址空间的存储器的访问属性，例如可读可写可执行等等。</li><li>性能统计相关和调试接口相关。</li><li>其他。</li></ol></li></ul><p>CSR的访问与当前指令或程序处于何种模式密切相关，不同模式下所能访问的CSR数量都不同。如果强行访问一个本不应该在该模式下访问的CSR则会触发非法指令异常。所以在设计CSR访问逻辑时，需要知道该CSR允许在哪些种模式下可以访问。</p><p>以下CSR寄存器的详细功能：</p><ul><li><p><strong>MSTATUS</strong>：机器状态寄存器，保存了全局中断使能状态和其他状态。它包含了一些位，用于控制和配置处理器的行为。例如，MIE 位用于全局中断使能，MPRV 位用于控制加载和存储访问的权限级别，MPP 位用于保存切换模式前的当前模式。</p></li><li><p><strong>MIE</strong>：机器中断使能寄存器，对需要使能的中断，在对应位使能。它包含了一些位，每一位对应一个特定的中断源。当某一位被设置为 1 时，对应的中断源就被使能。</p></li><li><p><strong>MTVEC</strong>：机器异常入口基地址寄存器。保存发生异常时需要跳转的地址。当发生异常时，处理器会跳转到这个地址开始执行异常处理程序。</p></li><li><p><strong>MSCRATCH</strong>：机器模式下的临时寄存器，用于保存M模式指向hart上下文的指针,并在进入M模式的处理程序时，和用户寄存器交换。</p></li><li><p><strong>MEPC</strong>：机器异常程序计数器。当发生异常时，处理器会将当前的程序计数器（PC）值保存到这个寄存器中。当异常处理完成后，处理器会从这个寄存器中读取 PC 值，并跳转到该地址继续执行。</p></li><li><p><strong>MCAUSE</strong>：机器异常原因寄存器。当发生异常时，处理器会将异常的原因编码保存到这个寄存器中。这个编码可以用来判断是哪种类型的异常。</p></li><li><p><strong>CycleL</strong> 和 <strong>CycleH</strong>：这两个寄存器用于记录处理器运行的周期数。由于 RISC-V 支持不同的位宽（例如 32 位和 64 位），因此 CycleL 和 CycleH 分别用于记录低位和高位的计数。但是我没有找到具体的文档来确认这一点。</p></li><li><p>CLINT：CLINT是一个内存映射设备，用于处理器核之间的中断和定时器功能。它包含了以下几个部分：</p><ol><li>MSIP（Machine-Mode Software Interrupt Pending）寄存器：用于处理机器模式下软件中断请求。</li><li>MTIMECMP（Machine-Mode Timer Compare）寄存器：用于设置机器模式下定时器中断触发时间。</li><li>MTIME（Machine-Mode Timer）寄存器：用于记录机器模式下经过的时间。</li></ol></li></ul><p>当MSIP寄存器被写入时，会向处理器核发送一个软件中断请求。当MTIME计数达到MTIMECMP设置的值时，会向处理器核发送一个定时器中断请求。</p><h5 id="CSR指令">CSR指令</h5><p>翻译自非特权级手册第九章</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231103092649198.png" alt="image-20231103092649198"></p><p>符号说明：以下用<code>[csr]</code>表示在CSR寄存器组中编号为<code>csr</code>的寄存器中存储的值</p><p><code>(rd)</code>表示在通用寄存器组中编号为<code>rd</code>的寄存器中存储的值</p><ul><li><p>CSRRW (Atomic Read/Write CSR) ：用于交换CSR寄存器的值和通用寄存器的值</p><p>如果<code>rd</code>不是0号寄存器，则先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code>；然后<code>[csr]=(rs1)</code></p><p>如果<code>rd</code>是0号寄存器，则只执行<code>[csr]=(rs1)</code></p></li><li><p>CSRRS (Atomic Read and Set Bits in CSR)：读取CSR寄存器的值</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0号寄存器，执行按位或运算<code>[csr]=[csr]|(rs1)</code></p></li><li><p>CSRRC (Atomic Read and Clear Bits in CSR)：</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0号寄存器，执行按位与运算<code>[csr]=[csr]&amp;~(rs1)</code></p></li><li><p>CSRRWI (Atomic Read/Write CSR Immediate)</p><p>如果<code>rd</code>不是0号寄存器，则先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code>；然后<code>[csr]=(零扩展)rs1</code></p><p>如果<code>rd</code>是0号寄存器，则只执行<code>[csr]=rs1</code></p></li><li><p>CSRRSI (Atomic Read and Set Bits in CSR Immediate)：读取CSR寄存器的值</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0，执行按位或运算<code>[csr]=[csr]|(零扩展)rs1</code></p></li><li><p>CSRRCI (Atomic Read and Clear Bits in CSR Immediate)：</p><p>先将<code>[csr]</code>零扩展到<code>XLEN</code>位，并把它写到<code>rd</code>中，即<code>(rd)=(零扩展)[csr]</code></p><p>如果rs1不是0，执行按位与运算<code>[csr]=[csr]&amp;~(零扩展)rs1</code></p></li></ul><p><code>csr[11:10]</code>为11的是只读寄存器，为10,01,00的是读写寄存器</p><h3 id="vivado新手入门">vivado新手入门</h3><p>器件选择<code>xc7a35tcpg236-1</code></p><ol><li><p>左上角绿色箭头运行run synthesis</p></li><li><p>Open synthesized design设计芯片引脚</p></li></ol><p>打开I/O ports</p><p>时钟信号接W5(CLK100MHz)</p><p>I/O std改为LVCMOS33</p><ol start="3"><li><p>左上角绿色箭头运行run implementation</p></li><li><p>选择generate bitstream</p></li><li><p>hardware manager ,选择program device</p></li></ol><p>bit文件路径<code>D:/vivado/vivado_ducuments/AndLogic/AndLogic.runs/impl_1/AndLogic.bit</code></p><p>(<code>D:/vivado/vivado_ducuments/AndLogic</code>为项目目录)</p><p>bit文件写的程序在开发板的RAM中</p><p><strong>把程序写在ROM中：</strong></p><p>settings/bitstream/-bin_file打勾</p><p>重新generate bitstream,现在在生成bit文件的同时还会生成bin文件</p><p>hardware manager ,选择add configuration memory device,搜索S25FL032</p><blockquote><p>如果单击流程导航窗口“编程和调试（Program and Debug）”项下的“增加配置内存设备（Add configuration Memory Device）”项进行比特流设置。该项在“Program Device”项之前<strong>是灰色的，不可单击</strong>，可能因为已经选择了一个flash芯片，可以先把内核下面的芯片移除，重新选择flash型号<br>如下图，鼠标右键[n25q64-3.3v-spi-x1_x2_x4],选择[Remove Configuration Memory Device]</p></blockquote><p>bin文件目录:<code>D:/vivado/vivado_ducuments/AndLogic/AndLogic.runs/impl_1/AndLogic.bin</code></p><p>(<code>D:/vivado/vivado_ducuments/AndLogic</code>为项目目录)</p><h3 id="1-第一个程序">1.第一个程序</h3><h4 id="与门逻辑">与门逻辑</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// Company: </span><br><span class="hljs-comment">// Engineer: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Create Date: 2023/09/28 07:51:14</span><br><span class="hljs-comment">// Design Name: </span><br><span class="hljs-comment">// Module Name: AndLogic</span><br><span class="hljs-comment">// Project Name: </span><br><span class="hljs-comment">// Target Devices: </span><br><span class="hljs-comment">// Tool Versions: </span><br><span class="hljs-comment">// Description: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Dependencies: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Revision:</span><br><span class="hljs-comment">// Revision 0.01 - File Created</span><br><span class="hljs-comment">// Additional Comments:</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><br><br><span class="hljs-keyword">module</span> AndLogic(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> Data1,<br>    <span class="hljs-keyword">input</span> Data2,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> Result<br>    );<br>    <br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>        Result &lt;= Data1 &amp;&amp; Data2;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h4 id="译码器">译码器</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">// Company: </span><br><span class="hljs-comment">// Engineer: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Create Date: 2023/09/28 07:51:14</span><br><span class="hljs-comment">// Design Name: </span><br><span class="hljs-comment">// Module Name: AndLogic</span><br><span class="hljs-comment">// Project Name: </span><br><span class="hljs-comment">// Target Devices: </span><br><span class="hljs-comment">// Tool Versions: </span><br><span class="hljs-comment">// Description: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Dependencies: </span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">// Revision:</span><br><span class="hljs-comment">// Revision 0.01 - File Created</span><br><span class="hljs-comment">// Additional Comments:</span><br><span class="hljs-comment">// </span><br><span class="hljs-comment">//////////////////////////////////////////////////////////////////////////////////</span><br><br><span class="hljs-comment">//译码器</span><br><span class="hljs-keyword">module</span> AndLogic(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> d1,<br>    <span class="hljs-keyword">input</span> d2,<br>    <span class="hljs-keyword">input</span> d3,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r0,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r1,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r2,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r3,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r4,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r5,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r6,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> r7<br>    );<br>    <br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>        r0=~d3 &amp;&amp; ~d2 &amp;&amp; ~d1;<br>        r1=~d3 &amp;&amp; ~d2 &amp;&amp; d1;<br>        r2=~d3 &amp;&amp; d2 &amp;&amp; ~d1;<br>        r3=~d3 &amp;&amp; d2 &amp;&amp; d1;<br>        r4=d3 &amp;&amp; ~d2 &amp;&amp; ~d1;<br>        r5=d3 &amp;&amp; ~d2 &amp;&amp; d1;<br>        r6=d3 &amp;&amp; d2 &amp;&amp; ~d1;<br>        r7=d3 &amp;&amp; d2 &amp;&amp; d1;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xdc">set_property PACKAGE_PIN W5 [get_ports CLK]<br>set_property PACKAGE_PIN R2 [get_ports Data1]<br>set_property PACKAGE_PIN T1 [get_ports Data2]<br>set_property PACKAGE_PIN L1 [get_ports Result]<br>set_property IOSTANDARD LVCMOS33 [get_ports Data1]<br>set_property IOSTANDARD LVCMOS33 [get_ports Data2]<br>set_property IOSTANDARD LVCMOS33 [get_ports CLK]<br>set_property IOSTANDARD LVCMOS33 [get_ports Result]<br><br><br>set_property PACKAGE_PIN U1 [get_ports d1]<br>set_property PACKAGE_PIN T1 [get_ports d2]<br>set_property PACKAGE_PIN R2 [get_ports d3]<br>set_property PACKAGE_PIN U16 [get_ports r0]<br>set_property PACKAGE_PIN E19 [get_ports r1]<br>set_property PACKAGE_PIN U19 [get_ports r2]<br>set_property PACKAGE_PIN V19 [get_ports r3]<br>set_property PACKAGE_PIN W18 [get_ports r4]<br>set_property PACKAGE_PIN U15 [get_ports r5]<br>set_property PACKAGE_PIN U14 [get_ports r6]<br>set_property PACKAGE_PIN V14 [get_ports r7]<br>set_property IOSTANDARD LVCMOS33 [get_ports d1]<br>set_property IOSTANDARD LVCMOS33 [get_ports d2]<br>set_property IOSTANDARD LVCMOS33 [get_ports d3]<br>set_property IOSTANDARD LVCMOS33 [get_ports r0]<br>set_property IOSTANDARD LVCMOS33 [get_ports r1]<br>set_property IOSTANDARD LVCMOS33 [get_ports r2]<br>set_property IOSTANDARD LVCMOS33 [get_ports r3]<br>set_property IOSTANDARD LVCMOS33 [get_ports r4]<br>set_property IOSTANDARD LVCMOS33 [get_ports r5]<br>set_property IOSTANDARD LVCMOS33 [get_ports r7]<br>set_property IOSTANDARD LVCMOS33 [get_ports r6]<br></code></pre></td></tr></table></figure><h3 id="2-七段显示学号">2.七段显示学号</h3><p>首先创建文件<code>xuehao.v</code></p><p>七段数码管：</p><img src="./计算机组成原理.assets/image-20231003185917731.png" alt="image-20231003185917731" style="zoom:53%;" /><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231003210052863.png" alt="image-20231003210052863"></p><p>Top.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> Top(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] Switch,<br>    <span class="hljs-keyword">output</span> LED,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] seg,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] a_to_g<br>    );<br>    AndLogic andlogic1(<br>        <span class="hljs-variable">.CLK</span>(CLK),<br>        <span class="hljs-variable">.d1</span>(Switch[<span class="hljs-number">0</span>]),<br>        <span class="hljs-variable">.d2</span>(Switch[<span class="hljs-number">1</span>]),<br>        <span class="hljs-variable">.d3</span>(LED)<br>    );    <br>    <span class="hljs-keyword">wire</span> clk_wire;<br>    CLK_div CLK_div1(<br>        <span class="hljs-variable">.CLK_in</span>(CLK),<br>        <span class="hljs-variable">.CLK_out</span>(clk_wire)<br>    );<br>    xuehao xuehao1(<br>    <span class="hljs-variable">.CLK</span>(clk_wire),<br>    <span class="hljs-variable">.seg</span>(seg),<br>    <span class="hljs-variable">.AToG</span>(a_to_g)<br>    <br>    );<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>AndLogic.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-comment">//与门</span><br><span class="hljs-keyword">module</span> AndLogic(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> d1,<br>    <span class="hljs-keyword">input</span> d2,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> d3    <br>    );<br>    <br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>        d3 &lt;= d1 &amp;&amp; d2;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>CLK_div.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> CLK_div #(<span class="hljs-keyword">parameter</span> N=<span class="hljs-number">99999</span>)(<br>    <span class="hljs-keyword">input</span> CLK_in,<br>    <span class="hljs-keyword">output</span> CLK_out<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]counter=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">reg</span> out=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK_in)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(counter==N-<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>            counter&lt;=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            counter=counter+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK_in)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(counter==N-<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>            out &lt;= !out;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> CLK_out=out;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>xuehao.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> xuehao(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]seg,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>]AToG<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]x;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>]tmp;<br>    <span class="hljs-comment">//学号 8421</span><br>    <span class="hljs-comment">//位选</span><br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(tmp)<br>            <span class="hljs-number">0</span>: <span class="hljs-keyword">begin</span> x=<span class="hljs-number">8</span>; seg=<span class="hljs-number">4&#x27;b0111</span>;<span class="hljs-keyword">end</span><br>            <span class="hljs-number">1</span>: <span class="hljs-keyword">begin</span> x=<span class="hljs-number">4</span>; seg=<span class="hljs-number">4&#x27;b1011</span>;<span class="hljs-keyword">end</span><br>            <span class="hljs-number">2</span>: <span class="hljs-keyword">begin</span> x=<span class="hljs-number">2</span>; seg=<span class="hljs-number">4&#x27;b1101</span>;<span class="hljs-keyword">end</span><br>            <span class="hljs-number">3</span>: <span class="hljs-keyword">begin</span> x=<span class="hljs-number">1</span>; seg=<span class="hljs-number">4&#x27;b1110</span>;<span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>        <span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">3</span>)<br>            tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            tmp=tmp+<span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">//段选</span><br>    <span class="hljs-keyword">always</span>@(*) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//星号表示只要下面涉及到的变量发生改变就会执行</span><br>        <span class="hljs-keyword">case</span>(x)<br>        <span class="hljs-number">0</span>: AToG = <span class="hljs-number">7&#x27;b0000001</span>;<br>        <span class="hljs-number">1</span>: AToG = <span class="hljs-number">7&#x27;b1001111</span>;<br>        <span class="hljs-number">2</span>: AToG = <span class="hljs-number">7&#x27;b0010010</span>;<br>        <span class="hljs-number">3</span>: AToG = <span class="hljs-number">7&#x27;b0000110</span>;<br>        <span class="hljs-number">4</span>: AToG = <span class="hljs-number">7&#x27;b1001100</span>;<br>        <span class="hljs-number">5</span>: AToG = <span class="hljs-number">7&#x27;b0100100</span>;<br>        <span class="hljs-number">6</span>: AToG = <span class="hljs-number">7&#x27;b0100000</span>;<br>        <span class="hljs-number">7</span>: AToG = <span class="hljs-number">7&#x27;b0001111</span>;<br>        <span class="hljs-number">8</span>: AToG = <span class="hljs-number">7&#x27;b0000000</span>;<br>        <span class="hljs-number">9</span>: AToG = <span class="hljs-number">7&#x27;b0000100</span>;<br>        <span class="hljs-number">&#x27;hA</span>: AToG = <span class="hljs-number">7&#x27;b0001000</span>;<br>        <span class="hljs-number">&#x27;hB</span>: AToG = <span class="hljs-number">7&#x27;b1100000</span>;<br>        <span class="hljs-number">&#x27;hC</span>: AToG = <span class="hljs-number">7&#x27;b0110001</span>;<br>        <span class="hljs-number">&#x27;hD</span>: AToG = <span class="hljs-number">7&#x27;b1000010</span>;<br>        <span class="hljs-number">&#x27;hE</span>: AToG = <span class="hljs-number">7&#x27;b0110000</span>;<br>        <span class="hljs-number">&#x27;hF</span>: AToG = <span class="hljs-number">7&#x27;b0111000</span>;<br>        <span class="hljs-keyword">default</span>: AToG = <span class="hljs-number">7&#x27;b0000001</span>; <span class="hljs-comment">// 0</span><br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231003205832116.png" alt="image-20231003205832116"></p><h3 id="3-实现ALU">3.实现ALU</h3><p>输入：两个四位数据输入 运算符</p><p>输出：运算结果，符号标志位，0标志位</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231004075331791.png" alt="image-20231004075331791"></p><p>所需模块</p><ul><li>Top<ul><li>ALU</li><li>7段数码管显示模块</li><li>时钟分频模块</li></ul></li></ul><h4 id="4位无符号加法器">4位无符号加法器</h4><p>top.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> top(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">input</span> left,<br>    <span class="hljs-keyword">input</span> right,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] seg,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] AToG,<br>    <span class="hljs-keyword">output</span> CF<br>    );<br>    <span class="hljs-keyword">reg</span> status=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">wire</span> clk_out;<br>    <span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]data;<br>    <span class="hljs-keyword">always</span>@(*)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (left==<span class="hljs-number">1</span>&amp;&amp;right==<span class="hljs-number">0</span>)<br>            status=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left==<span class="hljs-number">0</span>&amp;&amp;right==<span class="hljs-number">1</span>)<br>            status=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span><br>            status=status;<br>    <span class="hljs-keyword">end</span><br>    my_alu my_alu1(<br>    <span class="hljs-variable">.CLK</span>(CLK),<br>    <span class="hljs-variable">.status</span>(status),<br>    <span class="hljs-variable">.inp</span>(in),<br>    <span class="hljs-variable">.data</span>(data),<br>    <span class="hljs-variable">.CF</span>(CF)<br>    );<br>    CLK_div clk_div1(<br>        <span class="hljs-variable">.CLK_in</span>(CLK),<br>        <span class="hljs-variable">.CLK_out</span>(clk_out)<br>    );<br>    Xianshi xianshi1(<br>        <span class="hljs-variable">.CLK</span>(clk_out),<br>        <span class="hljs-variable">.Data</span>(data),<br>        <span class="hljs-variable">.seg</span>(seg),<br>        <span class="hljs-variable">.AToG</span>(AToG)<br>    );<br>    <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>CLK_div.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> CLK_div #(<span class="hljs-keyword">parameter</span> N=<span class="hljs-number">99999</span>)(<br>    <span class="hljs-keyword">input</span> CLK_in,<br>    <span class="hljs-keyword">output</span> CLK_out<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]counter=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">reg</span> out=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK_in)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(counter==N-<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>            counter&lt;=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            counter=counter+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK_in)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span>(counter==N-<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>            out &lt;= !out;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> CLK_out=out;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>my_alu.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> my_alu(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> status,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]inp,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]data,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> CF<br>    );<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] inh;<br>    <br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] inl;<br>    <br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] ans;<br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>        inh[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]=inp[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>];<br>        inl[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]=inp[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">if</span>(status==<span class="hljs-number">0</span>)<span class="hljs-keyword">begin</span><br>            data[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]=inh/<span class="hljs-number">10</span>;<br>            data[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]=inh%<span class="hljs-number">10</span>;<br>            data[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]=inl/<span class="hljs-number">10</span>;<br>            data[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]=inl%<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            ans=inh+inl;<br>            <span class="hljs-keyword">if</span>(ans[<span class="hljs-number">4</span>]==<span class="hljs-number">1</span>)<br>                CF=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                CF=<span class="hljs-number">0</span>;<br>            data[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]=<span class="hljs-number">0</span>;<br>            data[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]=<span class="hljs-number">0</span>;<br>            data[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]=ans/<span class="hljs-number">10</span>;<br>            data[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]=ans%<span class="hljs-number">10</span>;<br>            <br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>Xianshi.v</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ps</span><br><span class="hljs-keyword">module</span> Xianshi(<br>    <span class="hljs-keyword">input</span> CLK,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] Data,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] seg,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] AToG<br>    );<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>]tmp;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]x;<br>    <span class="hljs-comment">//位选</span><br>    <span class="hljs-keyword">always</span>@(<span class="hljs-keyword">posedge</span> CLK)<span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">case</span>(tmp)<br>                <span class="hljs-number">0</span>: <span class="hljs-keyword">begin</span> x=Data[<span class="hljs-number">15</span>:<span class="hljs-number">12</span>]; seg=<span class="hljs-number">4&#x27;b0111</span>;<span class="hljs-keyword">end</span><br>                <span class="hljs-number">1</span>: <span class="hljs-keyword">begin</span> x=Data[<span class="hljs-number">11</span>:<span class="hljs-number">8</span>]; seg=<span class="hljs-number">4&#x27;b1011</span>;<span class="hljs-keyword">end</span><br>                <span class="hljs-number">2</span>: <span class="hljs-keyword">begin</span> x=Data[<span class="hljs-number">7</span>:<span class="hljs-number">4</span>]; seg=<span class="hljs-number">4&#x27;b1101</span>;<span class="hljs-keyword">end</span><br>                <span class="hljs-number">3</span>: <span class="hljs-keyword">begin</span> x=Data[<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]; seg=<span class="hljs-number">4&#x27;b1110</span>;<span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">endcase</span><br>            <span class="hljs-keyword">if</span>(tmp==<span class="hljs-number">3</span>)<br>                tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                tmp=tmp+<span class="hljs-number">1</span>;<br>        <br>    <span class="hljs-keyword">end</span><br>    <br>    <span class="hljs-comment">//段选</span><br>    <span class="hljs-keyword">always</span>@(*) <span class="hljs-keyword">begin</span> <span class="hljs-comment">//星号表示只要下面涉及到的变量发生改变就会执行</span><br>            <span class="hljs-keyword">case</span>(x)<br>            <span class="hljs-number">0</span>: AToG = <span class="hljs-number">7&#x27;b0000001</span>;<br>            <span class="hljs-number">1</span>: AToG = <span class="hljs-number">7&#x27;b1001111</span>;<br>            <span class="hljs-number">2</span>: AToG = <span class="hljs-number">7&#x27;b0010010</span>;<br>            <span class="hljs-number">3</span>: AToG = <span class="hljs-number">7&#x27;b0000110</span>;<br>            <span class="hljs-number">4</span>: AToG = <span class="hljs-number">7&#x27;b1001100</span>;<br>            <span class="hljs-number">5</span>: AToG = <span class="hljs-number">7&#x27;b0100100</span>;<br>            <span class="hljs-number">6</span>: AToG = <span class="hljs-number">7&#x27;b0100000</span>;<br>            <span class="hljs-number">7</span>: AToG = <span class="hljs-number">7&#x27;b0001111</span>;<br>            <span class="hljs-number">8</span>: AToG = <span class="hljs-number">7&#x27;b0000000</span>;<br>            <span class="hljs-number">9</span>: AToG = <span class="hljs-number">7&#x27;b0000100</span>;<br>            <span class="hljs-number">&#x27;hA</span>: AToG = <span class="hljs-number">7&#x27;b0001000</span>;<br>            <span class="hljs-number">&#x27;hB</span>: AToG = <span class="hljs-number">7&#x27;b1100000</span>;<br>            <span class="hljs-number">&#x27;hC</span>: AToG = <span class="hljs-number">7&#x27;b0110001</span>;<br>            <span class="hljs-number">&#x27;hD</span>: AToG = <span class="hljs-number">7&#x27;b1000010</span>;<br>            <span class="hljs-number">&#x27;hE</span>: AToG = <span class="hljs-number">7&#x27;b0110000</span>;<br>            <span class="hljs-number">&#x27;hF</span>: AToG = <span class="hljs-number">7&#x27;b0111000</span>;<br>            <span class="hljs-keyword">default</span>: AToG = <span class="hljs-number">7&#x27;b0000001</span>; <span class="hljs-comment">// 0</span><br>            <span class="hljs-keyword">endcase</span><br>        <span class="hljs-keyword">end</span><br>   <br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>constraint.xdc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs xdc">set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[6]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[5]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[4]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[3]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[2]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[1]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;AToG[0]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[15]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[14]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[13]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[12]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[11]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[10]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[9]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[8]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[7]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[6]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[5]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[4]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[3]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[2]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[1]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;in[0]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;seg[3]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;seg[2]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;seg[1]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports &#123;seg[0]&#125;]<br>set_property IOSTANDARD LVCMOS33 [get_ports CLK]<br>set_property PACKAGE_PIN W7 [get_ports &#123;AToG[6]&#125;]<br>set_property PACKAGE_PIN W6 [get_ports &#123;AToG[5]&#125;]<br>set_property PACKAGE_PIN U8 [get_ports &#123;AToG[4]&#125;]<br>set_property PACKAGE_PIN V8 [get_ports &#123;AToG[3]&#125;]<br>set_property PACKAGE_PIN U5 [get_ports &#123;AToG[2]&#125;]<br>set_property PACKAGE_PIN V5 [get_ports &#123;AToG[1]&#125;]<br>set_property PACKAGE_PIN U7 [get_ports &#123;AToG[0]&#125;]<br>set_property PACKAGE_PIN R2 [get_ports &#123;in[15]&#125;]<br>set_property PACKAGE_PIN T1 [get_ports &#123;in[14]&#125;]<br>set_property PACKAGE_PIN U1 [get_ports &#123;in[13]&#125;]<br>set_property PACKAGE_PIN W2 [get_ports &#123;in[12]&#125;]<br>set_property PACKAGE_PIN R3 [get_ports &#123;in[11]&#125;]<br>set_property PACKAGE_PIN T2 [get_ports &#123;in[10]&#125;]<br>set_property PACKAGE_PIN T3 [get_ports &#123;in[9]&#125;]<br>set_property PACKAGE_PIN V2 [get_ports &#123;in[8]&#125;]<br>set_property PACKAGE_PIN W13 [get_ports &#123;in[7]&#125;]<br>set_property PACKAGE_PIN W14 [get_ports &#123;in[6]&#125;]<br>set_property PACKAGE_PIN V15 [get_ports &#123;in[5]&#125;]<br>set_property PACKAGE_PIN W15 [get_ports &#123;in[4]&#125;]<br>set_property PACKAGE_PIN W17 [get_ports &#123;in[3]&#125;]<br>set_property PACKAGE_PIN W16 [get_ports &#123;in[2]&#125;]<br>set_property PACKAGE_PIN V16 [get_ports &#123;in[1]&#125;]<br>set_property PACKAGE_PIN V17 [get_ports &#123;in[0]&#125;]<br>set_property PACKAGE_PIN W4 [get_ports &#123;seg[3]&#125;]<br>set_property PACKAGE_PIN V4 [get_ports &#123;seg[2]&#125;]<br>set_property PACKAGE_PIN U4 [get_ports &#123;seg[1]&#125;]<br>set_property PACKAGE_PIN U2 [get_ports &#123;seg[0]&#125;]<br>set_property PACKAGE_PIN W5 [get_ports CLK]<br><br>set_property PACKAGE_PIN U16 [get_ports CF]<br>set_property PACKAGE_PIN W19 [get_ports left]<br>set_property PACKAGE_PIN T17 [get_ports right]<br>set_property IOSTANDARD LVCMOS33 [get_ports CF]<br>set_property IOSTANDARD LVCMOS33 [get_ports left]<br>set_property IOSTANDARD LVCMOS33 [get_ports right]<br><br></code></pre></td></tr></table></figure><h4 id="四位多功能ALU">四位多功能ALU</h4><ul><li>0000加法</li><li>0001减法</li><li>0010乘法</li><li>0011除法</li><li>0100取余</li><li>0101按位与</li><li>0110 按位或</li><li>0111按位异或</li></ul><h2 id="第四章-存储系统">第四章 存储系统</h2><blockquote><p>特别鸣谢：本章笔记由<code>jxr</code>友情提供</p></blockquote><h3 id="存储器的基础知识">存储器的基础知识</h3><h4 id="存储器的分类">存储器的分类</h4><p>存储器可以按不同的标准进行分类</p><ul><li>按层次可以分为主存（内存）、辅存（外存）和cache</li><li>按掉电是否丢失数据可以分为易失性存储器（DRAM、SRAM）和非易失性存储器（ROM）</li><li>按存储方式可以分为<ul><li>随机存储器（RAM）</li><li>只读存储器（ROM）<ul><li>RAM和ROM都支持随机访问</li></ul></li><li>串行访问存储器：又分为顺序存取存储器和直接存取存储器。顺序存取存储器只能按照某种顺序读取，直接存取存储器可以先找到某个区域，再进行顺序查找</li></ul></li></ul><h4 id="存储器的性能评价">存储器的性能评价</h4><p>评价存储器的性能的指标有三个：容量、成本和速度</p><ul><li><p>容量=存储字数*字长</p></li><li><p>成本=总成本/总容量</p></li><li><p>速度=数据的宽度/存取周期（数据宽度指一次传输的数据的位数，存取周期包括了存取时间和恢复时间）</p><blockquote><p>有些存储器读取的时候会破坏数据，需要进行恢复</p></blockquote></li></ul><h4 id="存储器的层次结构">存储器的层次结构</h4><p>为了解决容量、成本和速度之间的矛盾，存储器采取了层次结构。分为cache、主存和辅存。层次依次递减，层次越高速度越快，价格越高，容量越小。</p><ul><li>cache和主存主要为了解决CPU速度和主存速度不匹配的问题。</li><li>主存和辅存主要为了解决主存容量不够大的问题。</li></ul><p>CPU可以和主存和cache进行数据交换。cache和主存，主存和辅存之间可以进行数据交换。</p><h3 id="主存">主存</h3><p>主存是用DRAM芯片组成的，cache使用SRAM芯片组成的。</p><h4 id="DRAM和SRAM">DRAM和SRAM</h4><p>SRAM芯片由双稳态触发器（六晶体管MOS）制成。读写速度快，价格高。不需要刷新。</p><p>DRAM芯片由单个晶体管制成。价格低，读写速度慢。通过电容中的电荷来保存信息，需要刷新。</p><p>刷新的方法有三种：</p><ol><li>集中刷新：集中一段时间刷新。会产生死区，CPU无法进行读写</li><li>分散刷新：前半存取周期存取，后半存取周期刷新。存取周期变长。没有死区。</li><li>异步刷新：分散到一段时间内刷新。减少死区时间，减少刷新次数。</li></ol><p>其中SRAM芯片没有地址引脚复用，还需要片选和读写控制线（1或2根），电源线和接地线，数据线。</p><p>DRAM芯片由地址引脚服用，还需要行地址选择信号，列地址选择信号，读写控制线（1或2根），电源线和接地线，数据线。</p><h4 id="ROM">ROM</h4><p>ROM掉电不丢失数据</p><p>ROM分为</p><ul><li>MROM：只读存储器</li><li>PROM：一次可编程只读存储器</li><li>EPROM：可擦写可编程只读存储器，擦写次数有限。</li><li>Flash：是EPROM的发展，写入的速度更快。</li><li>SSD（固态硬盘）：由Flash和控制单元组成，写入速度快，可擦除重写</li></ul><h4 id="多模块存储器">多模块存储器</h4><p>为了增大数据带宽。可以用单体多字存储器、高位交叉存储器、低位交叉存储器。</p><ul><li><p>单体多字存储器：可以一次顺序读出多个字。</p></li><li><p>高位交叉存储器：可以一个存取周期内读出多个相隔一个存储体容量的多个字</p></li><li><p>低位交叉存储器：可以一个存储周期内读出多个相隔一个存储单元容量的多个字</p><ul><li><p>采取流水线的方式读取数据</p></li><li><p>总线周期和存取周期应该满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>≥</mo><mfrac><mi>T</mi><mi>r</mi></mfrac></mrow><annotation encoding="application/x-tex">m\geq \frac{T}r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。T是存取周期，r是总线周期，m是存储体数目。</p></li><li><p>读取m个字所需要的时间为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>=</mo><mi>T</mi><mo>+</mo><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">t=T+(m-1)*r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span></p></li></ul></li></ul><h3 id="主存储器与CPU的连接">主存储器与CPU的连接</h3><p>CPU通过数据总线、地址总线、控制总线与主存储器相连接。</p><ul><li>数据总线的位数和工作频率的乘积是是数据传输率</li><li>地址总线的位数决定了寻址的范围</li></ul><p>可以将多个存储器芯片通过字拓展或位拓展或字位拓展组合成主存储器。</p><ul><li>位拓展：将多个存储器芯片组合起来以提高存储字长。</li><li>字拓展：将多个存储器芯片组合起来以提升存储字的数量</li><li>字位拓展：既有位拓展也有字拓展</li></ul><p>对经过字拓展的存储器寻址可以采取线选法或者译码片选法</p><ul><li>线选法是通过<strong>高位地址</strong>线直连片选端</li><li>译码片选法是通过三八译码器等译码器将<strong>高位地址</strong>译码产生片选信号</li></ul><h3 id="外部存储器">外部存储器</h3><p>外部存储器主要有磁盘存储器和固态硬盘两种。</p><h4 id="磁盘存储器">磁盘存储器</h4><p>磁盘存储器由磁盘驱动器、磁盘控制器和盘片组成。</p><p>存储时间=寻道时间+旋转延迟时间+存取时间（一般取平均）</p><ul><li>寻道时间：找到磁道的时间</li><li>旋转延迟时间：磁盘旋转半圈的时间</li><li>存取时间：读取数据的时间。</li></ul><p>数据传输率=磁盘转数*磁道容量</p><p>数据存取的最小单位是扇区</p><p>格式化后容量会变小</p><h4 id="固态硬盘">固态硬盘</h4><p>固态硬盘是基于闪存的存储器。写的时间很慢，读取的时间较快。数据是以页为单位存取的。写的次数多之后闪存块会磨损。</p><h3 id="cache">cache</h3><p>cache利用了局部性原理：时间局部性原理和空间局部性原理，提高了CPU访问主存的速度。</p><ul><li>时间局部性原理：现在访问的数据可能在最近的未来再次访问</li><li>空间局部性原理：现在访问的数据附近的数据可能在最近的未来再次访问</li></ul><h4 id="cache的工作原理">cache的工作原理</h4><p>在进行读操作的时候</p><ul><li>如果数据在cache中，则称为命中。</li><li>如果数据不在cache中，则称为缺失<ul><li>如果cache已满，则需要进行替换</li><li>如果cache没有满，则只需要将主存中该字所在的块一次性导入cache中</li></ul></li></ul><p>在进行写操作的时候</p><ul><li>如果需要写的块在cache中，则称为写命中</li><li>如果需要写的块不在cache中，则称为写缺失</li></ul><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>命中率</mtext><mo>=</mo><mfrac><mtext>命中次数</mtext><mtext>访问次数</mtext></mfrac></mrow><annotation encoding="application/x-tex">命中率=\frac{命中次数}{访问次数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">命中率</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0463em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">访问次数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">命中次数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>在进行读写操作的时候，CPU和cache以字为单位交换数据，cache和主存以块为单位交换数据</strong>。<strong>cache只是主存中数据的副本</strong></p><blockquote><p>一个块（也称为行）中可以包含很多个字节，cache的块和主存的块的大小是一样的，但是数量不一样</p></blockquote><p>cache需要解决以下关键问题：</p><ol><li>数据查找</li><li>地址映射</li><li>替换策略</li><li>写入策略</li></ol><h4 id="cache的数据查找">cache的数据查找</h4><ol><li><p>查找主存地址所在的行/组号</p></li><li><p>cache通过m路个tag位的比较器进行并行比较。判断是否查找成功</p></li></ol><blockquote><p>比如8路组相连，tag位20位，则需要8个20位的比较器进行并行比较</p></blockquote><h4 id="cache的地址映射">cache的地址映射</h4><p>cache的地址映射分为直接映射、组相连映射和全相连映射</p><h5 id="直接映射">直接映射</h5><p>cache中每一块单独成一行。主存的每一块只能装入cache中的唯一位置。</p><p><strong>主存地址</strong>的结构如下</p><table><thead><tr><th>名称</th><th style="text-align:center">tag位</th><th style="text-align:center">行号</th><th style="text-align:center">块内地址</th></tr></thead><tbody><tr><td>位数</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>总位数</mtext><mo>−</mo><mtext>行号</mtext><mo>−</mo><mtext>组内地址</mtext></mrow><annotation encoding="application/x-tex">总位数-行号-组内地址</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">总位数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">行号</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">组内地址</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>容量</mtext></mrow><mtext>块大小</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{cache容量}{块大小}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">块大小</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord cjk_fallback mtight">容量</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>块大小</mtext><mtext>存储单元位数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{块大小}{存储单元位数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">存储单元位数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">块大小</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr></tbody></table><p>其中 主存地址的行号也可以通过以下方式计算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>行号</mtext><mo>=</mo><mtext>主存块号</mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>行数</mtext></mrow><annotation encoding="application/x-tex">行号=主存块号mod\;cache行数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">行号</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback">主存块号</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">行数</span></span></span></span></p><blockquote><p>因为主存块号是块内地址之前的位数决定的，mod cache行数之后得到的就是主存地址在cache中对应的行号</p></blockquote><h5 id="组相连映射">组相连映射</h5><p>cache中多个块成一个组。主存中的每一块只能装到固定组中的任意一块中。一组中有r块，则称为r路组相连映射。</p><p><strong>主存地址</strong>的结构如下</p><table><thead><tr><th>名称</th><th style="text-align:center">tag位</th><th style="text-align:center">块号</th><th style="text-align:center">块内地址</th></tr></thead><tbody><tr><td>位数</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>总位数</mtext><mo>−</mo><mtext>组号</mtext><mo>−</mo><mtext>组内地址</mtext></mrow><annotation encoding="application/x-tex">总位数-组号-组内地址</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">总位数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">组号</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">组内地址</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>容量</mtext></mrow><mrow><mtext>块大小</mtext><mo>×</mo><mtext>每组块数</mtext></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{cache容量}{块大小\times每组块数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2834em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">块大小</span><span class="mbin mtight">×</span><span class="mord cjk_fallback mtight">每组块数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">c</span><span class="mord mathnormal mtight">h</span><span class="mord mathnormal mtight">e</span><span class="mord cjk_fallback mtight">容量</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>块大小</mtext><mtext>存储单元位数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{块大小}{存储单元位数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">存储单元位数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">块大小</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr></tbody></table><p>其中 主存地址的行号也可以通过以下方式计算：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>组号</mtext><mo>=</mo><mtext>主存块号</mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>c</mi><mi>a</mi><mi>c</mi><mi>h</mi><mi>e</mi><mtext>组数</mtext></mrow><annotation encoding="application/x-tex">组号=主存块号mod\;cache组数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">组号</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord cjk_fallback">主存块号</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord cjk_fallback">组数</span></span></span></span></p><h5 id="全相连映射">全相连映射</h5><p>cache中所有块在一个组内。主存中的每一块都可以装到cache中的任意一块中。</p><p><strong>主存地址</strong>的结构如下</p><table><thead><tr><th>名称</th><th style="text-align:center">tag位</th><th style="text-align:center">块内地址</th></tr></thead><tbody><tr><td>位数</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>总位数</mtext><mo>−</mo><mtext>组内地址</mtext></mrow><annotation encoding="application/x-tex">总位数-组内地址</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">总位数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">组内地址</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mtext>块大小</mtext><mtext>存储单元位数</mtext></mfrac></mrow><annotation encoding="application/x-tex">\frac{块大小}{存储单元位数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">存储单元位数</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">块大小</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></td></tr></tbody></table><h5 id="对比">对比</h5><table><thead><tr><th>种类</th><th>直接映射</th><th>组相连映射</th><th>全相连映射</th></tr></thead><tbody><tr><td>存储空间利用率</td><td>最低</td><td>中等</td><td>最高</td></tr><tr><td>查找时判断的开销</td><td>最低</td><td>中等</td><td>最高</td></tr><tr><td>额外空间需求</td><td>最低</td><td>中等</td><td>最高</td></tr><tr><td>抖动情况</td><td>最高</td><td>中等</td><td>最低</td></tr></tbody></table><blockquote><p>抖动指的是集中访问的存储区超过了块大小，需要频繁进行替换。</p></blockquote><h4 id="cache的替换策略">cache的替换策略</h4><p>cache的替换策略主要有四种：随机替换、最先进来的最先替换（FIFO）、最近最少使用（LRU）、最不经常使用（LFU）算法。其中LRU算法最为常见，前两者并没有用到局部性原理。</p><p>LRU算法：</p><ul><li>如果命中，则比其低的计数器+1，命中位置0</li><li>如果未命中且有空行，则替换位置0，其他位+1</li><li>如果未命中且没有空行，则将计数器最高的替换，并置0，其他位+1</li></ul><h4 id="cache的写回策略">cache的写回策略</h4><p>cache写命中的时候有两种策略：写回（write-back）和写穿（write-through）。来保持cache和主存中的内容一致。</p><ul><li><p>写穿（写直达）：将数据写入cache和主存中。为了避免主存中的时间损耗 ，可以加入写缓冲。</p></li><li><p>写回：将数据写入cache中，在发生替换的时候才将cache中的数据写入主存中。<strong>需要1位dirty位。</strong></p></li></ul><p>写不命中的策略也有两种：写分配和写不分配</p><ul><li>写分配：将数据装入cache中再执行写操作</li><li>写不分配：将数据直接写入主存中</li></ul><h4 id="cache中的存储结构">cache中的存储结构</h4><p>cache每一块都分为两部分：标记项和数据项。标记项又分成四部分：有效位、脏位、替换控制位、tag位。</p><table><thead><tr><th>有效位</th><th>脏位</th><th>替换控制位</th><th>tag</th><th>数据项</th></tr></thead><tbody><tr><td>1位</td><td>仅写回需要。1位</td><td>随机替换不需要</td><td>与主存中的tag位位数相同</td><td>每块中存储的数据</td></tr></tbody></table><h3 id="虚拟存储器">虚拟存储器</h3><p>虚拟存储器和cache一样利用了局部性原理。将虚拟地址空间中的地址映射到物理地址空间中的地址。</p><p>主要有页式虚拟存储器、段式虚拟存储器和段页式虚拟存储器。</p><p>CPU使用虚地址的时候，先由辅助硬件（操作系统）找到实地址和虚地址之间的关系。然后用实地址去访问主存，如果命中，则可以直接访问；如果没有命中，就需要将这个存储单元对应的一页调入主存当中（实际空间的页大小和虚拟空间的页大小是一样的）。如果主存已满就需要进行替换。主存中存储的数据是辅存中的副本。</p><p>虚拟存储器是存储在主存当中的，所以要提高命中率，采取全相连映射。同时为了减少不必要的写操作，提高系统性能，所以写主存的策略采取写回策略。</p><h4 id="页式虚拟存储器">页式虚拟存储器</h4><p>页式虚拟存储器将虚拟地址分为两部分。</p><table><thead><tr><th>虚拟页号</th><th>页内地址</th></tr></thead></table><p>其中虚拟页号可以通过查页表得到主存页号，将主存页号和页内地址拼接起来之后就能得到主存地址。然后就可以在主存的某一页中进行查找。</p><h5 id="快表（TLB）">快表（TLB）</h5><p>因为访问主存速度较慢，所以可以将经常访问到的页表项放入一个cache中。放在主存中的也称为慢表。</p><ul><li>如果快表采取全相连映射，则快表的tag就是虚拟页号。</li><li>如果快表采取组相连映射，则虚拟页号的低位是组号，高位是tag</li></ul><p>当访问数据的时候，先访问快表，如果命中，就直接得到实际地址，无需访问慢表；如果不命中，就在慢表中查找，如果慢表命中则更新快表，得到实际地址；如果慢表不命中，需要辅存和主存进行交换后再将数据给CPU，同时更新慢表和快表。</p><h5 id="虚存和cache">虚存和cache</h5><p>当同时有虚存和cache的时候，先查虚存（TLB和慢表），如果得到实际地址，就访问cache，如果cache中有，则传递给CPU；如果cache中没有，则在主存中找并更新cache。如果得不到实际地址，则去辅存中寻找，并装入主存，更新cache和虚存。</p><h4 id="段式虚拟存储器">段式虚拟存储器</h4><p>段式虚拟存储器将虚拟地址分为两部分。</p><table><thead><tr><th>段号</th><th>段内地址</th></tr></thead></table><p>其中段号可以通过查段表得到主存该段起始地址，将主存该段起始地址和段内地址相加起来之后就能得到主存地址。然后就可以在主存中进行查找。</p><h4 id="页段式虚拟存储器">页段式虚拟存储器</h4><p>页段式虚拟存储器将虚拟地址分为段号，段内页号和页表地址。主存和辅存也是以页为单位进行交换。</p><blockquote><p>在这种方式下，虚拟地址首先被分为段号和段内地址两部分；然后段内地址再被进一步分为页号和页内地址。这样就需要两级映射：先通过段表找到段的基址，再通过页表找到页的物理地址。最后将这个物理地址和页内地址结合起来就可以访问到实际的数据了。</p></blockquote><h2 id="第五章-中央处理器">第五章 中央处理器</h2><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231004194113247.png" alt="image-20231004194113247"></p><h3 id="CPU的功能和基本结构">CPU的功能和基本结构</h3><p>1.指令控制。完成取指令、分析指令和执行指令的操作，即程序的顺序控制。</p><p>2.操作控制。一条指令的功能往往是由若干操作信号的组合来实现的。CPU管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。</p><p>3.时间控制。对各种操作加以时间上的控制。时间控制要为每条指令按时间顺序提供应有的控制信号。</p><p>4.数据加工。对数据进行算术和逻辑运算。</p><p>5.中断处理。对计算机运行过程中出现的异常情况和特殊请求进行处理。</p><p>运算器----&gt;对数据进行加工</p><p>控制器----&gt;协调并控制计算机各部件执行程序的指令序列，基本功能包括取指令、分析指令、执行指令CPU</p><p>取指令: 自动形成指令地址; 自动发出取指令的命令。</p><p>分析指令：操作码译码(分析本条指令要完成什么操作)；产生操作数的有效地址。</p><p>执行指令：根据分析指令得到的“操作命令”和“操作数地址”，形成操作信号控制序列,控制运算器、存储器以及I/O设备完成相应的操作。</p><p>中断处理:管理总线及输入输出;处理异常情况(如掉电)和特殊请求(如打印机请求打印一行字符)。</p><ul><li><p>专用数据通路方式：根据指令执行过程中的数据和地址的流动方向安排连接线路。每个寄存器和ALU之间有专用线路连接</p></li><li><p>如果直接用导线连接，相当于多个寄存器同时并且一直向ALU传输数据,使用多路选择器MUX根据控制信号选择一路输出</p></li><li><p>使用三态门可以控制每一路是否输出</p><p>性能较高，基本不存在数据冲突现象，但结构复杂，硬件量大，不易实现。专用数据通路方式：根据指令执行过程中的数据和地址的流动方向安排连接线路。</p></li></ul><h4 id="ALU算术逻辑单元内部基本结构">ALU算术逻辑单元内部基本结构</h4><p>1.算术逻辑单元:主要功能是进行算术/逻辑运算。</p><p>2.通用寄存器组：如AX、BX、CX、DX、SP等，用于存放操作数（包括源操作数、目的操作数及中间结果）和各种地址信息等。SP是堆栈指针，用于指示栈顶的地址。</p><p>3.暂存寄存器:用于暂存从主存读来的数据,这个数据不能存放在通用寄存器中,否则会破坏其原有内容。</p><p>4.累加寄存器:它是一个通用寄存器,用于暂时存放ALU运算的结果信息,用于实现加法运算。</p><p>5.程序状态字寄存器：保留由算术逻辑运算指令或测试指令的结果而建立的各种状态信息,如溢出标志(OP)、符号标志（SF)、零标志（ZF)、进位标志(CF)等。PSW中的这些位参与并决定微操作的形成。</p><p>6,移位器:对运算结果进行移位运算。</p><p>7,计数器:控制乘除运算的操作步数。</p><h4 id="CU控制器基本结构">CU控制器基本结构</h4><p>1.程序计数器：用于指出下一条指令在主存中的存放地址。CPU就是根据PC的内容去主存中取指令的。因程序中指令(通常)是顺序执行的,所以PC有自增功能。</p><p>2,指令寄存器:用于保存当前正在执行的那条指令。</p><p>3,指令译码器:仅对操作码字段进行译码,向控制器提供特定的操作信号。</p><p>4,微操作信号发生器:根据IR的内容(指令)、PSW的内容(状态信息)及时序信号,产生控制整个计算机系统所需的各种控制信号,其结构有组合逻辑型和存储逻辑型两种。</p><p>5·时序系统:用于产生各种时序信号,它们都是由统一时钟（CLOCK）分频得到。</p><p>6,存储器地址寄存器:用于存放所要访问的主存单元的地址。</p><p>7,存储器数据寄存器:用于存放向主存写入的信息或从主存中读出的信息。</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231004204715687.png" alt="image-20231004204715687"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231004205122082.png" alt="image-20231004205122082"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231005112648332.png" alt="image-20231005112648332"></p><h3 id="数据通路">数据通路</h3><ul><li><p>单总线结构</p></li><li><p>三总线结构</p><p>（像MIPS32）</p></li><li><p>专用通路结构</p></li></ul><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231005133153312.png" alt="image-20231005133153312"></p><ul><li>取指周期FE=1(instruction fetch cycle)</li><li>间指周期    IND=1    (Indirect cycle)</li><li>执行周期    EX=1    (Execute Cycle)</li><li>中断周期    INT=1    (Interrupt Cycle)</li></ul><h4 id="MIPS的数据通路">MIPS的数据通路</h4><p>CPU执行过程</p><ul><li>取指令</li><li>PC+Δ→PC</li><li>指令移码</li><li>进行主存地址运算</li><li>取操作数</li><li>执行算数/逻辑运算</li><li>存结果</li><li>判断和检测异常事件</li><li>中断请求</li></ul><p>公共部件：取址部件</p><ul><li>Load</li><li>r-指令</li></ul><h3 id="硬布线控制器的设置">硬布线控制器的设置</h3><p>根据指令操作码、目前的机器周期、节拍信号、机器状态条件,即可确定现在这个节拍下应该发出哪些“微命令”</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231005150844171.png" alt="image-20231005150844171"></p><h3 id="微程序控制器">微程序控制器</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231006075235556.png" alt="image-20231006075235556"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231006141747712.png" alt="image-20231006141747712"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231007075608895.png" alt="image-20231007075608895"></p><h3 id="指令流水线">指令流水线</h3><p>机器周期的一种经典设置</p><p>这是经典MIPS架构提出的五段式</p><table><thead><tr><th style="text-align:center">缩写</th><th style="text-align:center">英文</th><th style="text-align:center">解释</th><th style="text-align:center">实际耗时</th></tr></thead><tbody><tr><td style="text-align:center">IF</td><td style="text-align:center">Instruction Fetch</td><td style="text-align:center">从Instruction cache取指令(访存)</td><td style="text-align:center">100ns</td></tr><tr><td style="text-align:center">ID</td><td style="text-align:center">Instruction Decode</td><td style="text-align:center">指令译码+从通用寄存器取数</td><td style="text-align:center">80ns</td></tr><tr><td style="text-align:center">EX</td><td style="text-align:center">Execute</td><td style="text-align:center">执行，使用ALU</td><td style="text-align:center">70ns</td></tr><tr><td style="text-align:center">M</td><td style="text-align:center">Memory</td><td style="text-align:center">访存</td><td style="text-align:center">50ns</td></tr><tr><td style="text-align:center">WB</td><td style="text-align:center">Write Back</td><td style="text-align:center">写（寄存器）</td><td style="text-align:center">50ns</td></tr></tbody></table><p>为了方便流水线的设计，机器周期设置为100ns</p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231007090713326.png" alt="image-20231007090713326"></p><p>流水线每一个功能段部件后面都要有一个缓冲寄存器，或称为锁存器，其作用是保存本流水段的执行结果,提供给下一流水段使用。</p><p>Imm用来存立即数</p><p><strong>问题</strong></p><ol><li><p>结构相关(资源冲突)</p><p>由于多条指令在同一时刻争用同一资源而形成的冲突称为结构相关。</p><ol><li>后一相关指令暂停一周期</li><li>资源重复配置：数据存储器+指令存储器</li></ol></li><li><p>数据相关</p><p>数据相关指在一个程序中,存在必须等前一条指令执行完才能执行后一条指令的情况,则这两条指令即为数据相关。</p><ol><li>把遇到数据相关的指令及其后续指令都暂停一至几个时钟周期,直到数据相关问题消失后再继续执行。可分为硬件阻塞(stall)和软件插入“NOP”（Null operator）两种方法。</li><li>数据旁路技术（转发机制）</li><li>编译优化：通过编译器调整指令顺序来解决数据相关</li></ol></li><li><p>控制相关（控制冲突）</p><p>当流水线遇到转移指令和其他改变PC值的指令而造成断流时，会引起控制相关。</p><ol><li>转移指令分支预测。简单预测（永远猜true或false）、动态预测（根据历史情况动态调整）</li><li>预取转移成功和不成功两个控制流方向上的目标指令</li><li>加快和提前形成条件码</li><li>提高转移方向的猜准率</li></ol></li></ol><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231007092842875.png" alt="image-20231007092842875"></p><h4 id="流水线的分类">流水线的分类</h4><ol><li><p><strong>部件功能级、处理机级和处理机间级流水线</strong></p><p>根据流水线使用的级别的不同,流水线可分为部件功能级流水线、处理机级流水线和处理机间流水线。</p><p><strong>部件功能级流水</strong>就是将复杂的算术逻辑运算组成流水线工作方式。例如,可将浮点加法操作分成求阶差、对阶、尾数相加以及结果规格化等4个子过程。</p><p><strong>处理机级流水</strong>是把一条指令解释过程分成多个子过程,如前面提到的取指、译码、执行、访存及写回5个子过程。</p><p><strong>处理机间流水</strong>是一种宏流水,其中每一个处理机完成某一专门任务,各个处理机所得到的结果需存放在与下一个处理机所共享的存储器中。</p></li><li><p><strong>单功能流水线和多功能流水线</strong></p><p>按流水线可以完成的功能,流水线可分为单功能流水线和多功能流水线。</p><p><strong>单功能流水线</strong>指只能实现一种固定的专门功能的流水线；</p><p><strong>多功能流水线</strong>指通过各段间的不同连接方式可以同时或不同时地实现多种功能的流水线。</p></li><li><p><strong>动态流水线和静态流水线</strong></p><p>按同一时间内各段之间的连接方式,流水线可分为静态流水线和动态流水线。</p><p><strong>静态流水线</strong>指在同一时间内,流水线的各段只能按同一种功能的连接方式工作。</p><p><strong>动态流水线</strong>指在同一时间内,当某些段正在实现某种运算时,另一些段却正在进行另一种运算。这样对提高流水线的效率很有好处,但会使流水线控制变得很复杂。</p></li><li><p><strong>线性流水线和非线性流水线</strong></p><p>按流水线的各个功能段之间是否有反馈信号,流水线可分为线性流水线与非线性流水线。</p><p><strong>线性流水线</strong>中，从输入到输出，每个功能段只允许经过一次，不存在反馈回路。</p><p><strong>非线性流水线</strong>存在反馈回路,从输入到输出过程中,某些功能段将数次通过流水线,这种流水线适合进行线性递归的运算。</p></li></ol><h4 id="流水线的多发技术">流水线的多发技术</h4><ol><li><p>超标量技术</p><p>每个时钟周期内可 <strong>并发多条独立指令</strong>，要配置多个功能部件</p><p><strong>不能调整指令的执行顺序</strong>，通过编译优化技术，把可并行执行的指令搭配起来</p></li><li><p>超流水技术</p><p>在一个时钟周期内<strong>再分段</strong>(3段)</p><p>在一个时钟周期内<strong>一个功能部件使用多次</strong>（3次)</p><p>不能调整指令的执行顺序，靠编译程序解决优化问题</p></li><li><p>超长指令字</p><p>由编译程序挖掘出指令间潜在的并行性，将<strong>多条能并行操作的指令组合成一条</strong></p><p>具有<strong>多个操作码字段</strong>的超长指令字（可达几百位)，采用 多个处理部件</p></li></ol><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231007095656648.png" alt="image-20231007095656648"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231007095835609.png" alt="image-20231007095835609"></p><h4 id="五段式指令流水线">五段式指令流水线</h4><img src="./计算机组成原理.assets/image-20231007173352240.png" alt="image-20231007173352240" style="zoom:80%;" /><p>①IF取指→②ID译码&amp;取数→③EX执行→④M访存→⑤WB写回寄存器</p><p>考试中常见的五类指令：</p><p>运算类指令、LOAD指令、STORE指令、条件转移指令、无条件转移指令</p><h5 id="运算类指令">运算类指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ADD Rs,Rd  ;加法指令(两个寄存器相加)<br>ADD #996,Rd;加法指令(寄存器与立即数相加)<br>SHL Rd ;算术右移指令<br></code></pre></td></tr></table></figure><p>①IF取指→②ID译码&amp;取数→③EX执行→<s>④M访存</s>→⑤WB写回寄存器</p><ul><li>IF:根据PC从指令Cache取指令至IF段的锁存器</li><li>ID:取出操作数至ID段锁存器</li><li>EX:运算，将结果存入EX段锁存器</li><li>M：空段</li><li>WB：将运算结果写回指定寄存器</li></ul><h5 id="LOAD指令">LOAD指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">LOAD Rd,996(Rs);(996+(Rs))→Rd<br></code></pre></td></tr></table></figure><p>①IF取指→②ID译码&amp;取数→③EX执行→④M访存→⑤WB写回寄存器</p><ul><li>IF:根据PC从指令Cache取指令至IF段的锁存器</li><li>ID:将基址寄存器的值放到锁存器A,将偏移量的值放到Imm</li><li>EX：运算，得到有效地址</li><li>M:从数据Cache中取数并放入锁存器</li><li>WB：将取出的数写回寄存器</li></ul><p>通常，RISC处理器只有“取数LOAD”和“存数STORE”指令才能访问主存</p><h5 id="STORE指令">STORE指令</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">STORE Rs,996(Rd);Rs→(996+(Rd))<br></code></pre></td></tr></table></figure><p>①IF取指→②ID译码&amp;取数→③EX执行→④M访存→<s>⑤WB写回寄存器</s></p><ul><li>IF:根据PC从指令Cache取指令至IF段的锁存器</li><li>ID:将基址寄存器的值放到锁存器A,将偏移量的值放到Imm。将要存的数放到B</li><li>EX:运算,得到有效地址。并将锁存器B的内容放到锁存器 Store。</li><li>M：写入数据Cache</li><li>WB：空段</li></ul><h5 id="条件转移指令">条件转移指令</h5><p>①IF取指→②ID译码&amp;取数→③EX执行→④M访存→<s>⑤WB写回寄存器</s></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">beq Rs,Rt,#偏移量<br>bne Rs,Rt,#偏移量<br></code></pre></td></tr></table></figure><ul><li>IF:根据PC从指令Cache取指令至IF段的锁存器</li><li>ID:进行比较的两个数放入锁存器A、B;偏移量放入 Imm</li><li>EX：运算，比较两个数</li><li>M:将目标PC值写回PC</li><li>WB：空段</li></ul><p>很多教材把写回PC的功能段称为&quot;WrPC段” ,其耗时比M段更短,可安排在M段时间内完成</p><h5 id="无条件转移指令">无条件转移指令</h5><p>①IF取指→②ID译码&amp;取数→③EX执行→<s>④M访存</s>→<s>⑤WB写回寄存器</s></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp #偏移量<br></code></pre></td></tr></table></figure><ul><li>IF:根据PC从指令Cache取指令至IF段的锁存器</li><li>ID:偏移量放入Imm</li><li>EX:将目标PC值写回PC</li><li>M：空段</li><li>WB：空段</li></ul><h3 id="多处理器系统">多处理器系统</h3><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231008092815203.png" alt="image-20231008092815203"></p><p><img src="./%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.assets/image-20231009073704131.png" alt="image-20231009073704131"></p>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>pandas教程</title>
    <link href="/2023/09/02/language/pandas/index/"/>
    <url>/2023/09/02/language/pandas/index/</url>
    
    <content type="html"><![CDATA[<h1>pandas教程</h1><p>阅读该教程，您需要python基础和numpy的预备知识</p><h2 id="表格基础">表格基础</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>s=pd.Series([<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,np.nan,<span class="hljs-number">44</span>,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>     <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">1</span>     <span class="hljs-number">3</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>     <span class="hljs-number">6</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>     NaN<br><span class="hljs-attribute">4</span>    <span class="hljs-number">44</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">5</span>     <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">dtype</span>: float64<br></code></pre></td></tr></table></figure><p>shape获取表格长度，返回元组<code>(行数,列数)</code></p><h2 id="日期序列">日期序列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20160101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(dates)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">DatetimeIndex([&#x27;<span class="hljs-number">2016-01-01</span>&#x27;, &#x27;<span class="hljs-number">2016-01-02</span>&#x27;, &#x27;<span class="hljs-number">2016-01-03</span>&#x27;, &#x27;<span class="hljs-number">2016-01-04</span>&#x27;,<br>               &#x27;<span class="hljs-number">2016-01-05</span>&#x27;, &#x27;<span class="hljs-number">2016-01-06</span>&#x27;],<br>              dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)<br></code></pre></td></tr></table></figure><h2 id="DataFrame生成表格">DataFrame生成表格</h2><p>利用index和columns设置表头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20160101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.random.randn(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>),index=dates,columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache">                   <span class="hljs-attribute">a</span>         b         c         d<br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>  <span class="hljs-number">0</span>.<span class="hljs-number">902005</span> -<span class="hljs-number">0</span>.<span class="hljs-number">463295</span>  <span class="hljs-number">0</span>.<span class="hljs-number">066307</span>  <span class="hljs-number">1</span>.<span class="hljs-number">064827</span><br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">02</span> -<span class="hljs-number">0</span>.<span class="hljs-number">430363</span> -<span class="hljs-number">0</span>.<span class="hljs-number">213347</span> -<span class="hljs-number">0</span>.<span class="hljs-number">162768</span> -<span class="hljs-number">0</span>.<span class="hljs-number">369665</span><br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">03</span> -<span class="hljs-number">0</span>.<span class="hljs-number">923885</span> -<span class="hljs-number">1</span>.<span class="hljs-number">808873</span>  <span class="hljs-number">1</span>.<span class="hljs-number">686310</span>  <span class="hljs-number">0</span>.<span class="hljs-number">518044</span><br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">04</span> -<span class="hljs-number">0</span>.<span class="hljs-number">343998</span> -<span class="hljs-number">0</span>.<span class="hljs-number">204547</span> -<span class="hljs-number">0</span>.<span class="hljs-number">443543</span> -<span class="hljs-number">0</span>.<span class="hljs-number">461751</span><br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">05</span> -<span class="hljs-number">0</span>.<span class="hljs-number">309939</span> -<span class="hljs-number">1</span>.<span class="hljs-number">194092</span> -<span class="hljs-number">0</span>.<span class="hljs-number">590669</span> -<span class="hljs-number">0</span>.<span class="hljs-number">418642</span><br><span class="hljs-attribute">2016</span>-<span class="hljs-number">01</span>-<span class="hljs-number">06</span>  <span class="hljs-number">0</span>.<span class="hljs-number">845991</span> -<span class="hljs-number">0</span>.<span class="hljs-number">515617</span> -<span class="hljs-number">0</span>.<span class="hljs-number">394218</span>  <span class="hljs-number">0</span>.<span class="hljs-number">477955</span><br></code></pre></td></tr></table></figure><p>采用默认的表头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>df=pd.DataFrame(np.arange(<span class="hljs-number">12</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)))<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <span class="hljs-attribute">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><br><span class="hljs-attribute">0</span>  <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">3</span><br><span class="hljs-attribute">1</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>   <span class="hljs-number">6</span>   <span class="hljs-number">7</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">8</span>  <span class="hljs-number">9</span>  <span class="hljs-number">10</span>  <span class="hljs-number">11</span><br></code></pre></td></tr></table></figure><p>使用字典建立表格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>df=pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>:<span class="hljs-number">1.</span>,<br>                 <span class="hljs-string">&#x27;B&#x27;</span>:pd.Timestamp(<span class="hljs-string">&#x27;20130102&#x27;</span>),<br>                 <span class="hljs-string">&#x27;C&#x27;</span>:pd.Series(<span class="hljs-number">1</span>,index=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)),dtype=<span class="hljs-string">&#x27;float32&#x27;</span>),<br>                 <span class="hljs-string">&#x27;D&#x27;</span>:np.array([<span class="hljs-number">3</span>]*<span class="hljs-number">4</span>,dtype=<span class="hljs-string">&#x27;int32&#x27;</span>),<br>                 <span class="hljs-string">&#x27;E&#x27;</span>:pd.Categorical([<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;train&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-string">&quot;train&quot;</span>]),<br>                 <span class="hljs-string">&#x27;F&#x27;</span>:<span class="hljs-string">&#x27;foo&#x27;</span><br>                 &#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df表格：\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;各列的类型\n&quot;</span>,df.dtypes)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印各行表头\n&quot;</span>,df.index)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;打印各列表头\n&quot;</span>,df.columns)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;取出所有列\n&quot;</span>,df.values)  <span class="hljs-comment"># 取出所有列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格统计数据\n&quot;</span>,df.describe())  <span class="hljs-comment"># 打印表格统计数据</span><br>t=df.T  <span class="hljs-comment"># 转置表格</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转置后的表格\n&quot;</span>,t)<br>df1=df.sort_index(axis=<span class="hljs-number">1</span>,ascending=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># df不变，排序结果在df1，对列表头排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对列表头排序\n&quot;</span>,df1)<br>df2=df.sort_index(axis=<span class="hljs-number">0</span>,ascending=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># df不变，排序结果在df2,对行表头排序</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对行表头排序\n&quot;</span>,df2)<br><span class="hljs-comment"># 还可以对值排序</span><br>df3=df.sort_values(by=<span class="hljs-string">&#x27;E&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;对值排序\n&quot;</span>,df3)<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs subunit">df表格：<br>      A          B    C  D      E    F<br>0  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>1  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br>2  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br>各列的类型<br> A           float64<br>B    datetime64[ns]<br>C           float32<br>D             int32<br>E          category<br>F            object<br>dtype: object<br>打印各行表头<br> Index([0, 1, 2, 3], dtype=&#x27;int64&#x27;)<br>打印各列表头<br> Index([&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;], dtype=&#x27;object&#x27;)<br>取出所有列<br> [[1.0 Timestamp(&#x27;2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00&#x27;) 1.0 3 &#x27;test&#x27; &#x27;foo&#x27;]<br> [1.0 Timestamp(&#x27;2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00&#x27;) 1.0 3 &#x27;train&#x27; &#x27;foo&#x27;]<br> [1.0 Timestamp(&#x27;2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00&#x27;) 1.0 3 &#x27;test&#x27; &#x27;foo&#x27;]<br> [1.0 Timestamp(&#x27;2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00&#x27;) 1.0 3 &#x27;train&#x27; &#x27;foo&#x27;]]<br>表格统计数据<br>          A                    B    C    D<br>count  4.0                    4  4.0  4.0<br>mean   1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>min    1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>25%    1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>50%    1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>75%    1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>max    1.0  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  1.0  3.0<br>std    0.0                  NaN  0.0  0.0<br>转置后的表格<br>                      0  ...                    3<br>A                  1.0  ...                  1.0<br>B  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00  ...  2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00<br>C                  1.0  ...                  1.0<br>D                    3  ...                    3<br>E                 test  ...                train<br>F                  foo  ...                  foo<br><br>[6 rows x 4 columns]<br>对列表头排序<br>      F      E  D    C          B    A<br>0  foo   test  3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0<br>1  foo  train  3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0<br>2  foo   test  3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0<br>3  foo  train  3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0<br>对行表头排序<br>      A          B    C  D      E    F<br>3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br>2  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>1  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br>0  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>对值排序<br>      A          B    C  D      E    F<br>0  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>2  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3   test  foo<br>1  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br>3  1.0 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  1.0  3  train  foo<br></code></pre></td></tr></table></figure><h2 id="选择数据">选择数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;名为A的列\n&quot;</span>,df[<span class="hljs-string">&#x27;A&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;名为A的列\n&quot;</span>,df.A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[0,3)行\n&quot;</span>,df[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&#x27;20130102&#x27;:&#x27;20130104&#x27;\n&quot;</span>,df[<span class="hljs-string">&#x27;20130102&#x27;</span>:<span class="hljs-string">&#x27;20130104&#x27;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>名为A的列<br> 2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>     0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>     4<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>     8<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>    12<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>    16<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>    20<br>Freq: D, Name: A, dtype: int32<br>名为A的列<br> 2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>     0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>     4<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>     8<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>    12<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>    16<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>    20<br>Freq: D, Name: A, dtype: int32<br>[0,3)行<br>             A  B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>  0  1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  4  5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>  8  9  10  11<br>&#x27;20130102&#x27;:&#x27;20130104&#x27;<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br></code></pre></td></tr></table></figure><h3 id="loc-select-by-label">loc: select by label</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;取出&#x27;20130102&#x27;行\n&quot;</span>,df.loc[<span class="hljs-string">&#x27;20130102&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;取出A列和B列\n&quot;</span>,df.loc[:,[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;取出指定行和指定列\n&quot;</span>,df.loc[<span class="hljs-string">&#x27;20130102&#x27;</span>,[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>]])<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>取出&#x27;20130102&#x27;行<br> A    4<br>B    5<br>C    6<br>D    7<br>Name: 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00, dtype: int32<br>取出A列和B列<br>              A   B<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21<br>取出指定行和指定列<br> A    4<br>B    5<br>Name: 2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span> 00:00:00, dtype: int32<br></code></pre></td></tr></table></figure><h3 id="iloc-select-by-position">iloc: select by position</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(df.iloc[<span class="hljs-number">3</span>:<span class="hljs-number">5</span>,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(df.iloc[[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>],<span class="hljs-number">1</span>:<span class="hljs-number">3</span>])  <span class="hljs-comment"># 不连续地筛选</span><br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>13<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>    13<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>    17<br>Freq: D, Name: B, dtype: int32<br>             B   C<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   5   6<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  13  14<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  21  22<br></code></pre></td></tr></table></figure><h3 id="bool判断">bool判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(df.A&gt;<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(df[df.A&gt;<span class="hljs-number">8</span>])<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>    False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>    False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>    False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>     True<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>     True<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>     True<br>Freq: D, Name: A, dtype: bool<br>             A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br></code></pre></td></tr></table></figure><h3 id="修改指定位置的值">修改指定位置的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df.iloc[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]=<span class="hljs-number">114514</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">表格<br>              A   B       C   D<br>2013-01-01  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span>     <span class="hljs-number"> 2 </span>  3<br>2013-01-02  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 5 </span>     <span class="hljs-number"> 6 </span>  7<br>2013-01-03  <span class="hljs-number"> 8 </span> <span class="hljs-number"> 9 </span><span class="hljs-number"> 114514 </span> 11<br>2013-01-04 <span class="hljs-number"> 12 </span><span class="hljs-number"> 13 </span>    <span class="hljs-number"> 14 </span> 15<br>2013-01-05 <span class="hljs-number"> 16 </span><span class="hljs-number"> 17 </span>    <span class="hljs-number"> 18 </span> 19<br>2013-01-06 <span class="hljs-number"> 20 </span><span class="hljs-number"> 21 </span>    <span class="hljs-number"> 22 </span> 23<br></code></pre></td></tr></table></figure><h3 id="修改符合条件的表格元素">修改符合条件的表格元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br>df[df&gt;<span class="hljs-number">5</span>]=-<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>            A  B  C  D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>  0  1  2  3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  4  5 <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span> <span class="hljs-string">-1</span><br></code></pre></td></tr></table></figure><p>修改符合条件的行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br>df[df.A&gt;<span class="hljs-number">4</span>]=-<span class="hljs-number">11</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>              A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8   9  10  11<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12  13  14  15<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>  16  17  18  19<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20  21  22  23<br>             A   B   C   D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0   1   2   3<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4   5   6   7<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span><br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span> <span class="hljs-string">-11</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br>df[df&gt;<span class="hljs-number">4</span>]=df*<span class="hljs-number">10</span>+<span class="hljs-number">6</span><br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">表格<br>              A   B   C   D<br>2013-01-01  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span> <span class="hljs-number"> 2 </span>  3<br>2013-01-02  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 5 </span> <span class="hljs-number"> 6 </span>  7<br>2013-01-03  <span class="hljs-number"> 8 </span> <span class="hljs-number"> 9 </span><span class="hljs-number"> 10 </span> 11<br>2013-01-04 <span class="hljs-number"> 12 </span><span class="hljs-number"> 13 </span><span class="hljs-number"> 14 </span> 15<br>2013-01-05 <span class="hljs-number"> 16 </span><span class="hljs-number"> 17 </span><span class="hljs-number"> 18 </span> 19<br>2013-01-06 <span class="hljs-number"> 20 </span><span class="hljs-number"> 21 </span><span class="hljs-number"> 22 </span> 23<br>              A    B    C    D<br>2013-01-01   <span class="hljs-number"> 0 </span>  <span class="hljs-number"> 1 </span>  <span class="hljs-number"> 2 </span>   3<br>2013-01-02   <span class="hljs-number"> 4 </span> <span class="hljs-number"> 56 </span> <span class="hljs-number"> 66 </span>  76<br>2013-01-03  <span class="hljs-number"> 86 </span> <span class="hljs-number"> 96 </span><span class="hljs-number"> 106 </span> 116<br>2013-01-04 <span class="hljs-number"> 126 </span><span class="hljs-number"> 136 </span><span class="hljs-number"> 146 </span> 156<br>2013-01-05 <span class="hljs-number"> 166 </span><span class="hljs-number"> 176 </span><span class="hljs-number"> 186 </span> 196<br>2013-01-06 <span class="hljs-number"> 206 </span><span class="hljs-number"> 216 </span><span class="hljs-number"> 226 </span> 236<br></code></pre></td></tr></table></figure><h2 id="插入新的列">插入新的列</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br>df[<span class="hljs-string">&#x27;F&#x27;</span>]=np.nan<br>df[<span class="hljs-string">&#x27;G&#x27;</span>]=np.arange(<span class="hljs-number">6</span>)<br>df[<span class="hljs-string">&#x27;H&#x27;</span>]=pd.Series([<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>],index=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>))<br><span class="hljs-built_in">print</span>(df)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs tap">表格<br>              A   B   C   D<br>2013-01-01  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span> <span class="hljs-number"> 2 </span>  3<br>2013-01-02  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 5 </span> <span class="hljs-number"> 6 </span>  7<br>2013-01-03  <span class="hljs-number"> 8 </span> <span class="hljs-number"> 9 </span><span class="hljs-number"> 10 </span> 11<br>2013-01-04 <span class="hljs-number"> 12 </span><span class="hljs-number"> 13 </span><span class="hljs-number"> 14 </span> 15<br>2013-01-05 <span class="hljs-number"> 16 </span><span class="hljs-number"> 17 </span><span class="hljs-number"> 18 </span> 19<br>2013-01-06 <span class="hljs-number"> 20 </span><span class="hljs-number"> 21 </span><span class="hljs-number"> 22 </span> 23<br>             A   B   C   D   F  G  H<br>2013-01-01  <span class="hljs-number"> 0 </span> <span class="hljs-number"> 1 </span> <span class="hljs-number"> 2 </span> <span class="hljs-number"> 3 </span>NaN <span class="hljs-number"> 0 </span> 6<br>2013-01-02  <span class="hljs-number"> 4 </span> <span class="hljs-number"> 5 </span> <span class="hljs-number"> 6 </span> <span class="hljs-number"> 7 </span>NaN <span class="hljs-number"> 1 </span> 5<br>2013-01-03  <span class="hljs-number"> 8 </span> <span class="hljs-number"> 9 </span><span class="hljs-number"> 10 </span><span class="hljs-number"> 11 </span>NaN <span class="hljs-number"> 2 </span> 4<br>2013-01-04 <span class="hljs-number"> 12 </span><span class="hljs-number"> 13 </span><span class="hljs-number"> 14 </span><span class="hljs-number"> 15 </span>NaN <span class="hljs-number"> 3 </span> 3<br>2013-01-05 <span class="hljs-number"> 16 </span><span class="hljs-number"> 17 </span><span class="hljs-number"> 18 </span><span class="hljs-number"> 19 </span>NaN <span class="hljs-number"> 4 </span> 2<br>2013-01-06 <span class="hljs-number"> 20 </span><span class="hljs-number"> 21 </span><span class="hljs-number"> 22 </span><span class="hljs-number"> 23 </span>NaN <span class="hljs-number"> 5 </span> 1<br></code></pre></td></tr></table></figure><h2 id="处理丢失的数据">处理丢失的数据</h2><h3 id="dropna删除丢失的数据行列">dropna删除丢失的数据行列</h3><p><code>axis=0</code>时删除含有nan的行</p><p><code>axis=1</code>时删除含有nan的列</p><p><code>how=‘any’</code>表示只要有nan就删除</p><p><code>how=‘all’</code>表示删除所有都是nan的行/列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df.iloc[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]=np.nan<br>df.iloc[<span class="hljs-number">4</span>,:]=np.nan<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(df.dropna(axis=<span class="hljs-number">0</span>,how=<span class="hljs-string">&#x27;any&#x27;</span>))<br><span class="hljs-built_in">print</span>(df.dropna(axis=<span class="hljs-number">0</span>,how=<span class="hljs-string">&#x27;all&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>                A     B     C     D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0.0   1.0   2.0   3.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4.0   5.0   NaN   7.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8.0   9.0  10.0  11.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12.0  13.0  14.0  15.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>   NaN   NaN   NaN   NaN<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20.0  21.0  22.0  23.0<br>               A     B     C     D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0.0   1.0   2.0   3.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8.0   9.0  10.0  11.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12.0  13.0  14.0  15.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20.0  21.0  22.0  23.0<br>               A     B     C     D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0.0   1.0   2.0   3.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4.0   5.0   NaN   7.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8.0   9.0  10.0  11.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12.0  13.0  14.0  15.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20.0  21.0  22.0  23.0<br></code></pre></td></tr></table></figure><h3 id="fillna给nan赋值-isnull返回对应布尔矩阵">fillna给nan赋值 isnull返回对应布尔矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>dates=pd.date_range(<span class="hljs-string">&#x27;20130101&#x27;</span>,periods=<span class="hljs-number">6</span>)<br>df=pd.DataFrame(np.arange(<span class="hljs-number">24</span>).reshape((<span class="hljs-number">6</span>,<span class="hljs-number">4</span>)),index=dates,columns=[<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>])<br>df.iloc[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]=np.nan<br>df.iloc[<span class="hljs-number">4</span>,:]=np.nan<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;表格\n&quot;</span>,df)<br><span class="hljs-built_in">print</span>(df.fillna(value=<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(df.isnull())<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">any</span>(df.isnull())==<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 在表格中寻找是否存在一个nan</span><br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs subunit">表格<br>                A     B     C     D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0.0   1.0   2.0   3.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4.0   5.0   NaN   7.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8.0   9.0  10.0  11.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12.0  13.0  14.0  15.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>   NaN   NaN   NaN   NaN<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20.0  21.0  22.0  23.0<br>               A     B     C     D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>   0.0   1.0   2.0   3.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>   4.0   5.0   0.0   7.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>   8.0   9.0  10.0  11.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  12.0  13.0  14.0  15.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>   0.0   0.0   0.0   0.0<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  20.0  21.0  22.0  23.0<br>                A      B      C      D<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-01</span>  False  False  False  False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-02</span>  False  False   True  False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-03</span>  False  False  False  False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-04</span>  False  False  False  False<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-05</span>   True   True   True   True<br>2013<span class="hljs-string">-01</span><span class="hljs-string">-06</span>  False  False  False  False<br>True<br></code></pre></td></tr></table></figure><h2 id="读写文件">读写文件</h2><p>读文件:</p><p>read_csv</p><p>read_excel</p><p>read_hdf</p><p>read_sql</p><p>read_json</p><p>read_msgpack (experimental)</p><p>read_html</p><p>read_gbq (experimental)</p><p>read_stata</p><p>read_sas</p><p>read_clipboard</p><p>read_pickle</p><p>写文件:</p><p>to_csv</p><p>to_excel</p><p>to_hdf</p><p>to_sql</p><p>to_json</p><p>to_msgpack (experimental)</p><p>to_html</p><p>to_gbq (experimental)</p><p>to_stata</p><p>to_clipboard</p><p>to_pickle</p><p>测试文件下载:</p><p><a href="./pandas.assets/students.xlsx">students.xlsx</a></p><p><a href="./pandas.assets/students.csv">students.csv</a></p><h3 id="读取csv">读取csv</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>data=pd.read_csv(<span class="hljs-string">&#x27;students.csv&#x27;</span>,sep=<span class="hljs-string">&#x27;\t&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache">    <span class="hljs-attribute">Student</span> ID   name  age  gender<br><span class="hljs-attribute">0</span>         <span class="hljs-number">1100</span>  Kelly   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">1</span>         <span class="hljs-number">1101</span>    Clo   <span class="hljs-number">21</span>  Female<br><span class="hljs-attribute">2</span>         <span class="hljs-number">1102</span>  Tilly   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">3</span>         <span class="hljs-number">1103</span>   Tony   <span class="hljs-number">24</span>    Male<br><span class="hljs-attribute">4</span>         <span class="hljs-number">1104</span>  David   <span class="hljs-number">20</span>    Male<br><span class="hljs-attribute">5</span>         <span class="hljs-number">1105</span>  Catty   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">6</span>         <span class="hljs-number">1106</span>      M    <span class="hljs-number">3</span>  Female<br><span class="hljs-attribute">7</span>         <span class="hljs-number">1107</span>   name   <span class="hljs-number">43</span>    Male<br><span class="hljs-attribute">8</span>         <span class="hljs-number">1108</span>      A   <span class="hljs-number">13</span>    Male<br><span class="hljs-attribute">9</span>         <span class="hljs-number">1109</span>      S   <span class="hljs-number">12</span>    Male<br><span class="hljs-attribute">10</span>        <span class="hljs-number">1110</span>  David   <span class="hljs-number">33</span>    Male<br><span class="hljs-attribute">11</span>        <span class="hljs-number">1111</span>     Dw    <span class="hljs-number">3</span>  Female<br><span class="hljs-attribute">12</span>        <span class="hljs-number">1112</span>      Q   <span class="hljs-number">23</span>    Male<br></code></pre></td></tr></table></figure><h3 id="读取excel">读取excel</h3><p><a href="http://t.csdn.cn/nJtqI">参考文献</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>file=<span class="hljs-string">&#x27;students.xlsx&#x27;</span><br>f=<span class="hljs-built_in">open</span>(file,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>df=pd.read_excel(f,sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>)<br><span class="hljs-built_in">print</span>(df)<br>f.close()<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache">    <span class="hljs-attribute">Student</span> ID   name  age  gender<br><span class="hljs-attribute">0</span>         <span class="hljs-number">1100</span>  Kelly   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">1</span>         <span class="hljs-number">1101</span>    Clo   <span class="hljs-number">21</span>  Female<br><span class="hljs-attribute">2</span>         <span class="hljs-number">1102</span>  Tilly   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">3</span>         <span class="hljs-number">1103</span>   Tony   <span class="hljs-number">24</span>    Male<br><span class="hljs-attribute">4</span>         <span class="hljs-number">1104</span>  David   <span class="hljs-number">20</span>    Male<br><span class="hljs-attribute">5</span>         <span class="hljs-number">1105</span>  Catty   <span class="hljs-number">22</span>  Female<br><span class="hljs-attribute">6</span>         <span class="hljs-number">1106</span>      M    <span class="hljs-number">3</span>  Female<br><span class="hljs-attribute">7</span>         <span class="hljs-number">1107</span>   name   <span class="hljs-number">43</span>    Male<br><span class="hljs-attribute">8</span>         <span class="hljs-number">1108</span>      A   <span class="hljs-number">13</span>    Male<br><span class="hljs-attribute">9</span>         <span class="hljs-number">1109</span>      S   <span class="hljs-number">12</span>    Male<br><span class="hljs-attribute">10</span>        <span class="hljs-number">1110</span>  David   <span class="hljs-number">33</span>    Male<br><span class="hljs-attribute">11</span>        <span class="hljs-number">1111</span>     Dw    <span class="hljs-number">3</span>  Female<br><span class="hljs-attribute">12</span>        <span class="hljs-number">1112</span>      Q   <span class="hljs-number">23</span>    Male<br></code></pre></td></tr></table></figure><h3 id="输出excel">输出excel</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> pd.ExcelWriter(filepath) <span class="hljs-keyword">as</span> writer:<br>    df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>)<br>    df2.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet2&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="示例一：">示例一：</h3><p>示例文件<a href="./pandas.assets/students.xlsx">students.xlsx</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>file=<span class="hljs-string">&#x27;students.xlsx&#x27;</span><br>f=<span class="hljs-built_in">open</span>(file,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>df=pd.read_excel(f,sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>)<br><span class="hljs-built_in">print</span>(df)<br>f.close()<br><br>df1=df.iloc[:,<span class="hljs-number">2</span>]&gt;=<span class="hljs-number">10</span><br>df2=df[df1]<br>df2=df2.sort_values(by=<span class="hljs-string">&#x27;age&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(df2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(df2.shape[<span class="hljs-number">0</span>]):<br>    <span class="hljs-keyword">if</span> df2.iloc[i,<span class="hljs-number">3</span>]==<span class="hljs-string">&quot;Male&quot;</span>:<br>        df2.iloc[i,<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;沃尔玛塑料袋&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        df2.iloc[i,<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;武装直升机&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(df2.iloc[i,<span class="hljs-number">1</span>])&lt;<span class="hljs-number">3</span>:<br>        df2.iloc[i,<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;hahaha&quot;</span>+df2.iloc[i,<span class="hljs-number">1</span>]<br>    df2.iloc[i,<span class="hljs-number">0</span>]+=<span class="hljs-number">22330000</span><br>df2=df2.reset_index()  <span class="hljs-comment"># 重置index</span><br><span class="hljs-built_in">print</span>(df2)<br><br><span class="hljs-comment"># 输出为excel</span><br>filepath=<span class="hljs-string">&quot;.\\df2.xlsx&quot;</span><br><br><span class="hljs-keyword">with</span> pd.ExcelWriter(filepath) <span class="hljs-keyword">as</span> writer:<br>    df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet1&#x27;</span>)<br>    df2.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;Sheet2&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="concat拼接">concat拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>, columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df2 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">1</span>, columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br>df3 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">2</span>, columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;拼接前：\n&quot;</span>,df1,<span class="hljs-string">&#x27;\n&#x27;</span>,df2,<span class="hljs-string">&#x27;\n&#x27;</span>,df3)<br>res = pd.concat([df1, df2, df3], axis=<span class="hljs-number">0</span>, ignore_index=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;拼接后:\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs less">拼接前：<br>      <span class="hljs-selector-tag">a</span>    <span class="hljs-selector-tag">b</span>    <span class="hljs-selector-tag">c</span>    <span class="hljs-selector-tag">d</span><br><span class="hljs-number">0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">2</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span> <br>      <span class="hljs-selector-tag">a</span>    <span class="hljs-selector-tag">b</span>    <span class="hljs-selector-tag">c</span>    <span class="hljs-selector-tag">d</span><br><span class="hljs-number">0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span><br><span class="hljs-number">2</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span> <br>      <span class="hljs-selector-tag">a</span>    <span class="hljs-selector-tag">b</span>    <span class="hljs-selector-tag">c</span>    <span class="hljs-selector-tag">d</span><br><span class="hljs-number">0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br><span class="hljs-number">2</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br>拼接后:<br>      <span class="hljs-selector-tag">a</span>    <span class="hljs-selector-tag">b</span>    <span class="hljs-selector-tag">c</span>    <span class="hljs-selector-tag">d</span><br><span class="hljs-number">0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">1</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">2</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span>  <span class="hljs-number">0.0</span><br><span class="hljs-number">3</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span><br><span class="hljs-number">4</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span><br><span class="hljs-number">5</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span><br><span class="hljs-number">6</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br><span class="hljs-number">7</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br><span class="hljs-number">8</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span><br></code></pre></td></tr></table></figure><p>如果不写<code>ignore_index=True</code>,即默认<code>ignore_index=False</code>, 拼接的结果为</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache">      <span class="hljs-attribute">a</span>    b    c    d<br><span class="hljs-attribute">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">1</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">1</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  <span class="hljs-number">2</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="拼接表头不同的列">拼接表头不同的列</h3><p>如果拼接表头不同的列,如下例子所示</p><p>axis=0时对列操作,在列的方向上拼接;axis=1时对行操作,在行的方向上拼接</p><p>join=outer时,会去除因为拼接错位而产生的含有NaN的行/列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>df1 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">0</span>, columns=[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>], index=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br>df2 = pd.DataFrame(np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))*<span class="hljs-number">1</span>, columns=[<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>], index=[<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df1:\n&quot;</span>,df1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df2:\n&quot;</span>,df2)<br>res = pd.concat([df1, df2], axis=<span class="hljs-number">1</span>, join=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;axis=1, join=&#x27;outer&#x27;\n&quot;</span>,res)<br>res = pd.concat([df1, df2], axis=<span class="hljs-number">1</span>, join=<span class="hljs-string">&#x27;inner&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;axis=1, join=&#x27;inner&#x27;\n&quot;</span>,res)<br>res = pd.concat([df1, df2], axis=<span class="hljs-number">0</span>, join=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;axis=0, join=&#x27;outer&#x27;\n&quot;</span>,res)<br>res = pd.concat([df1, df2], axis=<span class="hljs-number">0</span>, join=<span class="hljs-string">&#x27;inner&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;axis=0, join=&#x27;inner&#x27;\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">df1</span>:<br>      <span class="hljs-attribute">a</span>    b    c    d<br><span class="hljs-attribute">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">df2</span>:<br>      <span class="hljs-attribute">b</span>    c    d    e<br><span class="hljs-attribute">2</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">axis</span>=<span class="hljs-number">1</span>, join=&#x27;outer&#x27;<br>      <span class="hljs-attribute">a</span>    b    c    d    b    c    d    e<br><span class="hljs-attribute">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  NaN  NaN  NaN  NaN<br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>  NaN  NaN  NaN  NaN  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">axis</span>=<span class="hljs-number">1</span>, join=&#x27;inner&#x27;<br>      <span class="hljs-attribute">a</span>    b    c    d    b    c    d    e<br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">axis</span>=<span class="hljs-number">0</span>, join=&#x27;outer&#x27;<br>      <span class="hljs-attribute">a</span>    b    c    d    e<br><span class="hljs-attribute">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  NaN<br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  NaN<br><span class="hljs-attribute">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  NaN<br><span class="hljs-attribute">2</span>  NaN  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  NaN  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>  NaN  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">axis</span>=<span class="hljs-number">0</span>, join=&#x27;inner&#x27;<br>      <span class="hljs-attribute">b</span>    c    d<br><span class="hljs-attribute">1</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span>  <span class="hljs-number">0</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">2</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">3</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">4</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">1</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="merge拼接">merge拼接</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>left = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>, <span class="hljs-string">&#x27;K3&#x27;</span>],<br>                                  <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>],<br>                                  <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>right = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>, <span class="hljs-string">&#x27;K3&#x27;</span>],<br>                                    <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;C0&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>, <span class="hljs-string">&#x27;C3&#x27;</span>],<br>                                    <span class="hljs-string">&#x27;D&#x27;</span>: [<span class="hljs-string">&#x27;D0&#x27;</span>, <span class="hljs-string">&#x27;D1&#x27;</span>, <span class="hljs-string">&#x27;D2&#x27;</span>, <span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;left:\n&quot;</span>,left)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;right:\n&quot;</span>,right)<br>res=pd.merge(left,right,on=<span class="hljs-string">&#x27;key&#x27;</span>)  <span class="hljs-comment"># 按照key列合并</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">left:</span><br>   key   A   <span class="hljs-keyword">B</span><br><span class="hljs-number">0</span>  K0  A0  B0<br><span class="hljs-number">1</span>  K1  <span class="hljs-built_in">A1</span>  B1<br><span class="hljs-number">2</span>  K2  <span class="hljs-built_in">A2</span>  B2<br><span class="hljs-number">3</span>  K3  <span class="hljs-built_in">A3</span>  B3<br><span class="hljs-symbol">right:</span><br>   key   C   D<br><span class="hljs-number">0</span>  K0  <span class="hljs-built_in">C0</span>  <span class="hljs-built_in">D0</span><br><span class="hljs-number">1</span>  K1  <span class="hljs-built_in">C1</span>  <span class="hljs-built_in">D1</span><br><span class="hljs-number">2</span>  K2  <span class="hljs-built_in">C2</span>  <span class="hljs-built_in">D2</span><br><span class="hljs-number">3</span>  K3  <span class="hljs-built_in">C3</span>  <span class="hljs-built_in">D3</span><br><span class="hljs-symbol">res:</span><br>   key   A   <span class="hljs-keyword">B</span>   C   D<br><span class="hljs-number">0</span>  K0  A0  B0  <span class="hljs-built_in">C0</span>  <span class="hljs-built_in">D0</span><br><span class="hljs-number">1</span>  K1  <span class="hljs-built_in">A1</span>  B1  <span class="hljs-built_in">C1</span>  <span class="hljs-built_in">D1</span><br><span class="hljs-number">2</span>  K2  <span class="hljs-built_in">A2</span>  B2  <span class="hljs-built_in">C2</span>  <span class="hljs-built_in">D2</span><br><span class="hljs-number">3</span>  K3  <span class="hljs-built_in">A3</span>  B3  <span class="hljs-built_in">C3</span>  <span class="hljs-built_in">D3</span><br></code></pre></td></tr></table></figure><h3 id="考虑多个key">考虑多个key</h3><p>how = [‘left’, ‘right’, ‘outer’, ‘inner’]</p><p>inner:必须所有key相同才保留</p><p>outer:不要求所有key相同,可能会产生含有NaN的行</p><p>left和right是使用到的两组数据名,可以以被选择的数据作为模板进行合并</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># consider two keys</span><br>left = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>],<br>                             <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>],<br>                             <span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>, <span class="hljs-string">&#x27;A3&#x27;</span>],<br>                             <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>, <span class="hljs-string">&#x27;B3&#x27;</span>]&#125;)<br>right = pd.DataFrame(&#123;<span class="hljs-string">&#x27;key1&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>],<br>                              <span class="hljs-string">&#x27;key2&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>],<br>                              <span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;C0&#x27;</span>, <span class="hljs-string">&#x27;C1&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>, <span class="hljs-string">&#x27;C3&#x27;</span>],<br>                              <span class="hljs-string">&#x27;D&#x27;</span>: [<span class="hljs-string">&#x27;D0&#x27;</span>, <span class="hljs-string">&#x27;D1&#x27;</span>, <span class="hljs-string">&#x27;D2&#x27;</span>, <span class="hljs-string">&#x27;D3&#x27;</span>]&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;left:\n&quot;</span>,left)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;right:\n&quot;</span>,right)<br>res = pd.merge(left, right, on=[<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>], how=<span class="hljs-string">&#x27;inner&#x27;</span>)  <span class="hljs-comment"># default for how=&#x27;inner&#x27;</span><br><span class="hljs-comment"># how = [&#x27;left&#x27;, &#x27;right&#x27;, &#x27;outer&#x27;, &#x27;inner&#x27;]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br>res = pd.merge(left, right, on=[<span class="hljs-string">&#x27;key1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>], how=<span class="hljs-string">&#x27;left&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-symbol">left:</span><br>   key1 key2   A   <span class="hljs-keyword">B</span><br><span class="hljs-keyword"></span><span class="hljs-number">0</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A0</span>  <span class="hljs-keyword">B0</span><br><span class="hljs-keyword"></span><span class="hljs-number">1</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K1</span>  <span class="hljs-built_in">A1</span>  <span class="hljs-keyword">B1</span><br><span class="hljs-keyword"></span><span class="hljs-number">2</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2</span><br><span class="hljs-keyword"></span><span class="hljs-number">3</span>   K2   <span class="hljs-built_in">K1</span>  <span class="hljs-built_in">A3</span>  <span class="hljs-keyword">B3</span><br><span class="hljs-keyword"></span><span class="hljs-symbol">right:</span><br>   key1 key2   C   D<br><span class="hljs-number">0</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K0</span>  C0  D0<br><span class="hljs-number">1</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  C1  D1<br><span class="hljs-number">2</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  C2  D2<br><span class="hljs-number">3</span>   K2   <span class="hljs-built_in">K0</span>  C3  D3<br><span class="hljs-symbol">res:</span><br>   key1 key2   A   <span class="hljs-keyword">B </span>  C   D<br><span class="hljs-number">0</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A0</span>  <span class="hljs-keyword">B0 </span> C0  D0<br><span class="hljs-number">1</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2 </span> C1  D1<br><span class="hljs-number">2</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2 </span> C2  D2<br><span class="hljs-symbol">res:</span><br>   key1 key2   A   <span class="hljs-keyword">B </span>   C    D<br><span class="hljs-number">0</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A0</span>  <span class="hljs-keyword">B0 </span>  C0   D0<br><span class="hljs-number">1</span>   <span class="hljs-built_in">K0</span>   <span class="hljs-built_in">K1</span>  <span class="hljs-built_in">A1</span>  <span class="hljs-keyword">B1 </span> NaN  NaN<br><span class="hljs-number">2</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2 </span>  C1   D1<br><span class="hljs-number">3</span>   <span class="hljs-built_in">K1</span>   <span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2 </span>  C2   D2<br><span class="hljs-number">4</span>   K2   <span class="hljs-built_in">K1</span>  <span class="hljs-built_in">A3</span>  <span class="hljs-keyword">B3 </span> NaN  NaN<br></code></pre></td></tr></table></figure><h3 id="使用indicator">使用indicator</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># indicator</span><br>df1 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;col1&#x27;</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;col_left&#x27;</span>:[<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>]&#125;)<br>df2 = pd.DataFrame(&#123;<span class="hljs-string">&#x27;col1&#x27;</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>],<span class="hljs-string">&#x27;col_right&#x27;</span>:[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df1\n&quot;</span>,df1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;df2\n&quot;</span>,df2)<br>res = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;col1&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>, indicator=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br><span class="hljs-comment"># give the indicator a custom name(自定义名字)</span><br>res = pd.merge(df1, df2, on=<span class="hljs-string">&#x27;col1&#x27;</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>, indicator=<span class="hljs-string">&#x27;indicator_column&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">df1</span><br>    <span class="hljs-attribute">col1</span> col_left<br><span class="hljs-attribute">0</span>     <span class="hljs-number">0</span>        a<br><span class="hljs-attribute">1</span>     <span class="hljs-number">1</span>        b<br><span class="hljs-attribute">df2</span><br>    <span class="hljs-attribute">col1</span>  col_right<br><span class="hljs-attribute">0</span>     <span class="hljs-number">1</span>          <span class="hljs-number">2</span><br><span class="hljs-attribute">1</span>     <span class="hljs-number">2</span>          <span class="hljs-number">2</span><br><span class="hljs-attribute">2</span>     <span class="hljs-number">2</span>          <span class="hljs-number">2</span><br><span class="hljs-attribute">res</span>:<br>    <span class="hljs-attribute">col1</span> col_left  col_right      _merge<br><span class="hljs-attribute">0</span>     <span class="hljs-number">0</span>        a        NaN   left_only<br><span class="hljs-attribute">1</span>     <span class="hljs-number">1</span>        b        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>        both<br><span class="hljs-attribute">2</span>     <span class="hljs-number">2</span>      NaN        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  right_only<br><span class="hljs-attribute">3</span>     <span class="hljs-number">2</span>      NaN        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>  right_only<br><span class="hljs-attribute">res</span>:<br>    <span class="hljs-attribute">col1</span> col_left  col_right indicator_column<br><span class="hljs-attribute">0</span>     <span class="hljs-number">0</span>        a        NaN        left_only<br><span class="hljs-attribute">1</span>     <span class="hljs-number">1</span>        b        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>             both<br><span class="hljs-attribute">2</span>     <span class="hljs-number">2</span>      NaN        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>       right_only<br><span class="hljs-attribute">3</span>     <span class="hljs-number">2</span>      NaN        <span class="hljs-number">2</span>.<span class="hljs-number">0</span>       right_only<br></code></pre></td></tr></table></figure><h3 id="left-index和right-index合并">left_index和right_index合并</h3><p>合并行index</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># merged by index</span><br>lef = pd.DataFrame(&#123;<span class="hljs-string">&#x27;A&#x27;</span>: [<span class="hljs-string">&#x27;A0&#x27;</span>, <span class="hljs-string">&#x27;A1&#x27;</span>, <span class="hljs-string">&#x27;A2&#x27;</span>],<br>                                  <span class="hljs-string">&#x27;B&#x27;</span>: [<span class="hljs-string">&#x27;B0&#x27;</span>, <span class="hljs-string">&#x27;B1&#x27;</span>, <span class="hljs-string">&#x27;B2&#x27;</span>]&#125;,<br>                   index=[<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>])<br>righ = pd.DataFrame(&#123;<span class="hljs-string">&#x27;C&#x27;</span>: [<span class="hljs-string">&#x27;C0&#x27;</span>, <span class="hljs-string">&#x27;C2&#x27;</span>, <span class="hljs-string">&#x27;C3&#x27;</span>],<br>                                     <span class="hljs-string">&#x27;D&#x27;</span>: [<span class="hljs-string">&#x27;D0&#x27;</span>, <span class="hljs-string">&#x27;D2&#x27;</span>, <span class="hljs-string">&#x27;D3&#x27;</span>]&#125;,<br>                    index=[<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>, <span class="hljs-string">&#x27;K3&#x27;</span>])<br><span class="hljs-built_in">print</span>(lef)<br><span class="hljs-built_in">print</span>(righ)<br><span class="hljs-comment"># left_index and right_index</span><br>res = pd.merge(lef, righ, left_index=<span class="hljs-literal">True</span>, right_index=<span class="hljs-literal">True</span>, how=<span class="hljs-string">&#x27;outer&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br>res = pd.merge(lef, righ, left_index=<span class="hljs-literal">True</span>, right_index=<span class="hljs-literal">True</span>, how=<span class="hljs-string">&#x27;inner&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;res:\n&quot;</span>,res)<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">     A   <span class="hljs-keyword">B</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A0</span>  <span class="hljs-keyword">B0</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">K1</span>  <span class="hljs-built_in">A1</span>  <span class="hljs-keyword">B1</span><br><span class="hljs-keyword"></span>K2  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2</span><br><span class="hljs-keyword"></span>     C   D<br><span class="hljs-built_in">K0</span>  C0  D0<br>K2  C2  D2<br>K3  C3  D3<br><span class="hljs-symbol">res:</span><br>       A    <span class="hljs-keyword">B </span>   C    D<br><span class="hljs-built_in">K0</span>   <span class="hljs-built_in">A0</span>   <span class="hljs-keyword">B0 </span>  C0   D0<br><span class="hljs-built_in">K1</span>   <span class="hljs-built_in">A1</span>   <span class="hljs-keyword">B1 </span> NaN  NaN<br>K2   <span class="hljs-built_in">A2</span>   <span class="hljs-keyword">B2 </span>  C2   D2<br>K3  NaN  NaN   C3   D3<br><span class="hljs-symbol">res:</span><br>      A   <span class="hljs-keyword">B </span>  C   D<br><span class="hljs-built_in">K0</span>  <span class="hljs-built_in">A0</span>  <span class="hljs-keyword">B0 </span> C0  D0<br>K2  <span class="hljs-built_in">A2</span>  <span class="hljs-keyword">B2 </span> C2  D2<br></code></pre></td></tr></table></figure><h3 id="suffixes处理会重复的列">suffixes处理会重复的列</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># handle overlapping</span><br>boys = pd.DataFrame(&#123;<span class="hljs-string">&#x27;k&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K1&#x27;</span>, <span class="hljs-string">&#x27;K2&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]&#125;)<br>girls = pd.DataFrame(&#123;<span class="hljs-string">&#x27;k&#x27;</span>: [<span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K0&#x27;</span>, <span class="hljs-string">&#x27;K3&#x27;</span>], <span class="hljs-string">&#x27;age&#x27;</span>: [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]&#125;)<br>res = pd.merge(boys, girls, on=<span class="hljs-string">&#x27;k&#x27;</span>, suffixes=[<span class="hljs-string">&#x27;_boy&#x27;</span>, <span class="hljs-string">&#x27;_girl&#x27;</span>], how=<span class="hljs-string">&#x27;inner&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache">    <span class="hljs-attribute">k</span>  age_boy  age_girl<br><span class="hljs-attribute">0</span>  K0        <span class="hljs-number">1</span>         <span class="hljs-number">4</span><br><span class="hljs-attribute">1</span>  K0        <span class="hljs-number">1</span>         <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h1></h1>]]></content>
    
    
    <categories>
      
      <category>programing languages</category>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>numpy教程</title>
    <link href="/2023/09/02/language/numpy/index/"/>
    <url>/2023/09/02/language/numpy/index/</url>
    
    <content type="html"><![CDATA[<h1>numpy教程</h1><p>阅读该教程，您需要python基础的预备知识</p><h2 id="矩阵基础">矩阵基础</h2><p>注意:矩阵必须满足所有行的元素个数相等,像<code>b=np.array([[5,6,3,4],[2,4,7]])</code>是不合法的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>arr=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>              [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]])<br><span class="hljs-built_in">print</span>(arr)<br><span class="hljs-built_in">print</span>([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>       [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arr是<span class="hljs-subst">&#123;arr.ndim&#125;</span>维矩阵&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;行数和列数为<span class="hljs-subst">&#123;arr.shape&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;arr中的元素总数为<span class="hljs-subst">&#123;arr.size&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[1 2 3]</span><br><span class="hljs-string"> [2 3 4]]</span><br><span class="hljs-string">[[1, 2, 3], [4, 5, 6]]</span><br>arr是<span class="hljs-number">2</span>维矩阵<br>行数和列数为(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>arr中的元素总数为<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="dtype元素的类型">dtype元素的类型</h3><p>定义矩阵时可以用dtype声明元素的类型,常见包括</p><ul><li>int64 64位整数</li><li>int32 32位整数</li><li>float32</li><li>float64</li><li>float16</li></ul><p>了解更多numpy的数据类型,<a href="http://t.csdn.cn/glff7">请阅读</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>arr=np.array([<span class="hljs-number">2</span>,<span class="hljs-number">2333</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],np.dtype(np.float64))<br><span class="hljs-built_in">print</span>(arr.dtype)<br><span class="hljs-built_in">print</span>(arr)<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">float64<br>[2.000e<span class="hljs-string">+00</span> 2.333e<span class="hljs-string">+03</span> 3.000e<span class="hljs-string">+00</span> 4.000e<span class="hljs-string">+00</span>]<br></code></pre></td></tr></table></figure><h3 id="zeros-全零矩阵">zeros 全零矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.zeros((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.dtype)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[0. 0. 0. 0.]</span><br><span class="hljs-string"> [0. 0. 0. 0.]</span><br><span class="hljs-string"> [0. 0. 0. 0.]]</span><br>float64<br></code></pre></td></tr></table></figure><h3 id="ones-全一矩阵">ones 全一矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.ones((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.dtype)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[1. 1. 1. 1.]</span><br><span class="hljs-string"> [1. 1. 1. 1.]</span><br><span class="hljs-string"> [1. 1. 1. 1.]]</span><br>float64<br></code></pre></td></tr></table></figure><h3 id="empty-元素都几乎接近0的矩阵">empty 元素都几乎接近0的矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.empty((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a.dtype)<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">[[6.95322371e<span class="hljs-string">-310</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span>]<br> [0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span>]<br> [0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span> 0.00000000e<span class="hljs-string">+000</span>]]<br>float64<br></code></pre></td></tr></table></figure><h3 id="arrange-某一区间的数列">arrange 某一区间的数列</h3><p><code>np.arrange(a,b,c)</code>等价于matlab中的<code>a:c:b</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">12</span>)<br><span class="hljs-built_in">print</span>(a)<br>b=np.arange(<span class="hljs-number">2</span>,<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(b)<br>c=np.arange(<span class="hljs-number">4</span>,<span class="hljs-number">15</span>,<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[<span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10 11]<br>[2<span class="hljs-number"> 3 </span>4<span class="hljs-number"> 5 </span>6<span class="hljs-number"> 7 </span>8 9]<br>[<span class="hljs-number"> 4 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 8 </span>10<span class="hljs-number"> 12 </span>14]<br></code></pre></td></tr></table></figure><h3 id="reshape-改变矩阵形状">reshape 改变矩阵形状</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">12</span>)<br>a=a.reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span> 3]<br> [<span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span> 7]<br> [<span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10 11]]<br></code></pre></td></tr></table></figure><h3 id="linspace-开始-结尾-分几段">linspace(开始,结尾,分几段)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.linspace(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(a.reshape(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[1.  1.5 2. ]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2.5 3.  3.5]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[4.  4.5 5. ]</span>]</span><br><span class="hljs-comment">[1.  1.5 2.  2.5 3.  3.5 4.  4.5 5. ]</span><br></code></pre></td></tr></table></figure><h3 id="随机矩阵">随机矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">[[<span class="hljs-number">0.81661957</span> <span class="hljs-number">0.66981303</span>]<br> [<span class="hljs-number">0.50054947</span> <span class="hljs-number">0.85381138</span>]<br> [<span class="hljs-number">0.36714028</span> <span class="hljs-number">0.16603213</span>]]<br></code></pre></td></tr></table></figure><h2 id="矩阵运算">矩阵运算</h2><h3 id="矩阵和标量的基本运算">矩阵和标量的基本运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a+<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(a-<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(a*<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a/<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a//<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(a*np.sin(a))<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">[1<span class="hljs-number"> 2 </span>3<span class="hljs-number"> 4 </span>5]<br>[3<span class="hljs-number"> 4 </span>5<span class="hljs-number"> 6 </span>7]<br>[-2 -1 <span class="hljs-number"> 0 </span><span class="hljs-number"> 1 </span> 2]<br>[<span class="hljs-number"> 5 </span>10<span class="hljs-number"> 15 </span>20 25]<br>[0.25 0.5  0.75 1.   1.25]<br>[0<span class="hljs-number"> 0 </span>0<span class="hljs-number"> 1 </span>1]<br>[<span class="hljs-number"> 1 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 9 </span>16 25]<br>[ 0.84147098  1.81859485  0.42336002 -3.02720998 -4.79462137]<br></code></pre></td></tr></table></figure><h3 id="矩阵元素的判断">矩阵元素的判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a&lt;=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>]<br>[ <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span>  <span class="hljs-literal">True</span> <span class="hljs-literal">False</span> <span class="hljs-literal">False</span>]<br></code></pre></td></tr></table></figure><h3 id="元素乘法和矩阵乘法">元素乘法和矩阵乘法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],<br>            [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]])<br>b=np.array([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],<br>            [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]])<br>c=a*b  <span class="hljs-comment"># 逐个元素相乘</span><br><span class="hljs-built_in">print</span>(c)<br>c_dot=np.dot(a,b) <span class="hljs-comment"># 矩阵乘法</span><br><span class="hljs-built_in">print</span>(c_dot)<br>c_dot_2=a.dot(b)  <span class="hljs-comment">#矩阵乘法的另一种写法</span><br><span class="hljs-built_in">print</span>(c_dot_2)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[0 1]</span><br><span class="hljs-string"> [0 3]]</span><br><span class="hljs-string">[[2 4]</span><br><span class="hljs-string"> [2 3]]</span><br><span class="hljs-string">[[2 4]</span><br><span class="hljs-string"> [2 3]]</span><br></code></pre></td></tr></table></figure><h3 id="求和sum-最小值min-最大值max">求和sum,最小值min,最大值max</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.random.random((<span class="hljs-number">3</span>,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">min</span>(a))<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">max</span>(a))<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">[[<span class="hljs-number">0.16496185</span> <span class="hljs-number">0.9437828</span> ]<br> [<span class="hljs-number">0.81840345</span> <span class="hljs-number">0.89624578</span>]<br> [<span class="hljs-number">0.26440633</span> <span class="hljs-number">0.74531292</span>]]<br><span class="hljs-number">3</span>.<span class="hljs-number">833113133002955</span><br><span class="hljs-number">0</span>.<span class="hljs-number">16496184822955373</span><br><span class="hljs-number">0</span>.<span class="hljs-number">9437827991060538</span><br></code></pre></td></tr></table></figure><p>使用axis  axis的意义是维度数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],<br>            [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],<br>            [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])<br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a,axis=<span class="hljs-number">0</span>))  <span class="hljs-comment"># 对列求和</span><br><span class="hljs-built_in">print</span>(np.<span class="hljs-built_in">sum</span>(a,axis=<span class="hljs-number">1</span>))  <span class="hljs-comment"># 对行求和</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">[<span class="hljs-number"> 6 </span><span class="hljs-number"> 9 </span>12 15]<br>[10<span class="hljs-number"> 14 </span>18]<br></code></pre></td></tr></table></figure><p>min,max,mean也适用axis</p><h3 id="argmin-argmax矩阵中最小最大值的索引">argmin,argmax矩阵中最小最大值的索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">2</span>,<span class="hljs-number">14</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(np.argmin(a))<br><span class="hljs-built_in">print</span>(np.argmax(a))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">0<br>11<br></code></pre></td></tr></table></figure><h3 id="mean平均值-median中位数">mean平均值 median中位数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">2</span>,<span class="hljs-number">14</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(np.mean(a))<br><span class="hljs-built_in">print</span>(np.average(a))<br><span class="hljs-built_in">print</span>(a.mean())<br><span class="hljs-built_in">print</span>(np.median(a))<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">5</span><br><span class="hljs-attribute">7</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="cumsum累加数组-diff数组差分">cumsum累加数组 diff数组差分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">2</span>,<span class="hljs-number">14</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.cumsum(a))<br><span class="hljs-built_in">print</span>(np.diff(a))<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 2 </span><span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span> 5]<br> [<span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span> 9]<br> [10<span class="hljs-number"> 11 </span>12 13]]<br>[<span class="hljs-number"> 2 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 9 </span>14<span class="hljs-number"> 20 </span>27<span class="hljs-number"> 35 </span>44<span class="hljs-number"> 54 </span>65<span class="hljs-number"> 77 </span>90]<br>[[1<span class="hljs-number"> 1 </span>1]<br> [1<span class="hljs-number"> 1 </span>1]<br> [1<span class="hljs-number"> 1 </span>1]]<br></code></pre></td></tr></table></figure><h3 id="sort排序每行">sort排序每行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.sort(a))<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[14<span class="hljs-number"> 13 </span>12 11]<br> [10 <span class="hljs-number"> 9 </span><span class="hljs-number"> 8 </span> 7]<br> [<span class="hljs-number"> 6 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 4 </span> 3]]<br>[[11<span class="hljs-number"> 12 </span>13 14]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]]<br></code></pre></td></tr></table></figure><h3 id="矩阵转置">矩阵转置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.transpose(a))<br><span class="hljs-built_in">print</span>(a.T)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[14 13 12 11]</span><br><span class="hljs-string"> [10  9  8  7]</span><br><span class="hljs-string"> [ 6  5  4  3]]</span><br><span class="hljs-string">[[14 10  6]</span><br><span class="hljs-string"> [13  9  5]</span><br><span class="hljs-string"> [12  8  4]</span><br><span class="hljs-string"> [11  7  3]]</span><br><span class="hljs-string">[[14 10  6]</span><br><span class="hljs-string"> [13  9  5]</span><br><span class="hljs-string"> [12  8  4]</span><br><span class="hljs-string"> [11  7  3]]</span><br></code></pre></td></tr></table></figure><h3 id="clip-矩阵-矩阵中保留数的下限-矩阵中保留数的上限">clip(矩阵,矩阵中保留数的下限,矩阵中保留数的上限)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">14</span>,<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>).reshape((<span class="hljs-number">3</span>,<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(np.clip(a,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>))<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[14 13 12 11]</span><br><span class="hljs-string"> [10  9  8  7]</span><br><span class="hljs-string"> [ 6  5  4  3]]</span><br><span class="hljs-string">[[9 9 9 9]</span><br><span class="hljs-string"> [9 9 8 7]</span><br><span class="hljs-string"> [6 5 5 5]]</span><br></code></pre></td></tr></table></figure><h2 id="矩阵索引">矩阵索引</h2><p>下标从0开始算</p><p>对于行向量,a[i]会取出下标为i的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">3</span>])<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10<span class="hljs-number"> 11 </span>12<span class="hljs-number"> 13 </span>14]<br>6<br></code></pre></td></tr></table></figure><p>对于3行4列的矩阵,a[i]取出第i行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>])<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [11<span class="hljs-number"> 12 </span>13 14]]<br>[11<span class="hljs-number"> 12 </span>13 14]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>][<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [11<span class="hljs-number"> 12 </span>13 14]]<br>12<br>12<br></code></pre></td></tr></table></figure><h3 id="利用冒号">利用冒号</h3><p>注意:取出来的都是行向量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">2</span>,:])  <span class="hljs-comment"># 第2行所有的数</span><br><span class="hljs-built_in">print</span>(a[:,<span class="hljs-number">1</span>])  <span class="hljs-comment"># 第1列所有的数</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]) <span class="hljs-comment"># 取第1行1~2列（不包括下标为3）</span><br><span class="hljs-built_in">print</span>(a[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>:<span class="hljs-number">4</span>:<span class="hljs-number">2</span>])  <span class="hljs-comment">#第0行，从第0列开始，每隔2个数取一次，直到下标为4（不包括下标为4）</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [11<span class="hljs-number"> 12 </span>13 14]]<br>[11<span class="hljs-number"> 12 </span>13 14]<br>[<span class="hljs-number"> 4 </span><span class="hljs-number"> 8 </span>12]<br>[8 9]<br>[3 5]<br></code></pre></td></tr></table></figure><h3 id="flat和flatten">flat和flatten</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a.flat)  <span class="hljs-comment"># 这是一个迭代器</span><br><span class="hljs-built_in">print</span>(a.flatten())  <span class="hljs-comment">#展开矩阵</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">&lt;numpy.flatiter object at 0x0000021DAA7D7CE0&gt;<br>[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span><span class="hljs-number"> 6 </span><span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10<span class="hljs-number"> 11 </span>12<span class="hljs-number"> 13 </span>14]<br></code></pre></td></tr></table></figure><h3 id="for循环遍历">for循环遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(row)  <span class="hljs-comment"># 取出所有行</span><br><span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> a.T:<br>    <span class="hljs-built_in">print</span>(col)  <span class="hljs-comment"># 取出所有列</span><br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [11<span class="hljs-number"> 12 </span>13 14]]<br>[3<span class="hljs-number"> 4 </span>5 6]<br>[<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br>[11<span class="hljs-number"> 12 </span>13 14]<br>[<span class="hljs-number"> 3 </span><span class="hljs-number"> 7 </span>11]<br>[<span class="hljs-number"> 4 </span><span class="hljs-number"> 8 </span>12]<br>[<span class="hljs-number"> 5 </span><span class="hljs-number"> 9 </span>13]<br>[<span class="hljs-number"> 6 </span>10 14]<br></code></pre></td></tr></table></figure><p>遍历所有元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">3</span>,<span class="hljs-number">15</span>).reshape(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> a.flat:<br>    <span class="hljs-built_in">print</span>(item,end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">[[<span class="hljs-number"> 3 </span><span class="hljs-number"> 4 </span><span class="hljs-number"> 5 </span> 6]<br> [<span class="hljs-number"> 7 </span><span class="hljs-number"> 8 </span><span class="hljs-number"> 9 </span>10]<br> [11<span class="hljs-number"> 12 </span>13 14]]<br>3<span class="hljs-number"> 4 </span>5<span class="hljs-number"> 6 </span>7<span class="hljs-number"> 8 </span>9<span class="hljs-number"> 10 </span>11<span class="hljs-number"> 12 </span>13<span class="hljs-number"> 14 </span><br></code></pre></td></tr></table></figure><h2 id="矩阵的合并">矩阵的合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>])<br>b=np.array([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])<br>c=np.vstack((a,b))  <span class="hljs-comment"># vertical stack</span><br>d=np.hstack((a,b))  <span class="hljs-comment"># horizontal stack</span><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[1 1 1]</span><br><span class="hljs-string"> [2 2 2]]</span><br>[<span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><p>转置合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>])[:,np.newaxis]<br>b=np.array([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])[:,np.newaxis]<br>d=np.hstack((a,b))<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[1 2]</span><br><span class="hljs-string"> [1 2]</span><br><span class="hljs-string"> [1 2]]</span><br></code></pre></td></tr></table></figure><h3 id="newaxis的使用">newaxis的使用</h3><p>newaxis用于增加维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(a.shape)<br>c=a[:,np.newaxis]<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(c.shape)<br>d=a[np.newaxis,:]<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(d.shape)<br></code></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua">(<span class="hljs-number">3</span>,)<br><span class="hljs-string">[[1]</span><br><span class="hljs-string"> [1]</span><br><span class="hljs-string"> [1]]</span><br>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><span class="hljs-string">[[1 1 1]]</span><br>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="concatenate矩阵拼接">concatenate矩阵拼接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.array([<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>])[:,np.newaxis]<br>b=np.array([<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>])[:,np.newaxis]<br><span class="hljs-built_in">print</span>(np.concatenate((a,b,b,a),axis=<span class="hljs-number">0</span>))<br><span class="hljs-built_in">print</span>(np.concatenate((a,b,b,a),axis=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[2]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1]</span>]</span><br><span class="hljs-comment">[<span class="hljs-comment">[1 2 2 1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1 2 2 1]</span></span><br><span class="hljs-comment"> <span class="hljs-comment">[1 2 2 1]</span>]</span><br></code></pre></td></tr></table></figure><h2 id="深浅拷贝">深浅拷贝</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">4</span>)<br>b=a<br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">is</span> a)<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>等号复制是浅拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">4</span>)<br>b=a<br><span class="hljs-built_in">print</span>(a)<br>a[<span class="hljs-number">0</span>]=<span class="hljs-number">11</span><br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">[0<span class="hljs-number"> 1 </span>2 3]<br>[11 <span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span> 3]<br>[11 <span class="hljs-number"> 1 </span><span class="hljs-number"> 2 </span> 3]<br></code></pre></td></tr></table></figure><p>利用copy深拷贝</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br>a=np.arange(<span class="hljs-number">4</span>)<br>b=a.copy()<br><span class="hljs-built_in">print</span>(b <span class="hljs-keyword">is</span> a)<br><span class="hljs-built_in">print</span>(a)<br>a[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]=[<span class="hljs-number">22</span>,<span class="hljs-number">33</span>]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">False<br>[0<span class="hljs-number"> 1 </span>2 3]<br>[<span class="hljs-number"> 0 </span>22<span class="hljs-number"> 33 </span> 3]<br>[0<span class="hljs-number"> 1 </span>2 3]<br></code></pre></td></tr></table></figure><h1></h1>]]></content>
    
    
    <categories>
      
      <category>programing languages</category>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>data-structures-and-algorithms</title>
    <link href="/2023/07/31/video/data-structures-and-algorithms/index/"/>
    <url>/2023/07/31/video/data-structures-and-algorithms/index/</url>
    
    <content type="html"><![CDATA[<h2 id="教学视频">教学视频</h2><p><strong>数据结构与算法-全程教学视频</strong></p><video controls>    <source src="教学视频.mp4"/>    <p>        您的浏览器不支持HTML5视频，可点击<a href="https://www.bilibili.com/video/BV1GJ411x7h7/?spm_id_from=333.337.search-card.all.click&vd_source=d972a716696a84ec73bd13ed88c0aa99">链接</a>观看    </p></video>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python-notes</title>
    <link href="/2023/07/23/language/python/index/"/>
    <url>/2023/07/23/language/python/index/</url>
    
    <content type="html"><![CDATA[<h1>python笔记</h1><h2 id="pycharm常用快捷键">pycharm常用快捷键</h2><table><thead><tr><th>ctrl+alt+s</th><th>打开软件设置</th></tr></thead><tbody><tr><td>ctrl+d</td><td>复制当前行代码</td></tr><tr><td>shift+alt+上/下</td><td>将当前行代码上移或下移</td></tr><tr><td>ctrl+shift+f10</td><td>运行当前代码文件</td></tr><tr><td>shift+f6</td><td>重命名文件</td></tr><tr><td>ctrl+a</td><td>全选</td></tr><tr><td>ctrl+f</td><td>搜索</td></tr><tr><td>ctrl+alt+L</td><td>reformat code</td></tr><tr><td>ctrl+alt+shift+L</td><td>reformat file</td></tr><tr><td>ctrl+/</td><td>注释选中行</td></tr></tbody></table><h2 id="1print语句">1print语句</h2><p>print()默认结尾换行,如果不需要换行可以添加end=‘’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;world&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helloworld</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello\tworld&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello\nworld&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">helloworld</span><br><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">world</span><br></code></pre></td></tr></table></figure><h2 id="2-1字面量python六种数据类型">2.1字面量python六种数据类型</h2><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703204741768.png" alt="image-20230703204741768"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">999</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">114.514</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="2-2注释">2.2注释</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">这个是多行注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-comment"># 这个是单行注释（#号和注释内容一般建议一个空格隔开）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">这个也是多行注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-3变量">2.3变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">money = <span class="hljs-number">10</span><br>money = money - <span class="hljs-number">5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;余额为&quot;</span>, money, <span class="hljs-string">&quot;元&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">余额为<span class="hljs-number"> 5 </span>元<br></code></pre></td></tr></table></figure><h2 id="2-4数据类型">2.4数据类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">string_type = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;hello world&quot;</span>)<br>int_type = <span class="hljs-built_in">type</span>(<span class="hljs-number">666</span>)<br>float_type = <span class="hljs-built_in">type</span>(<span class="hljs-number">114.514</span>)<br><span class="hljs-built_in">print</span>(string_type, int_type, float_type)<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt; &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="2-5数据类型转换">2.5数据类型转换</h2><table><thead><tr><th>语句(函数)</th><th>说明</th></tr></thead><tbody><tr><td>int(x)</td><td>将x转换为一个整数</td></tr><tr><td>float(x)</td><td>将x转换为一个浮点数</td></tr><tr><td>str(x)</td><td>将对象x转换为字符串</td></tr></tbody></table><p>万物皆可转字符串,只有字符串是数字时才能将字符串转数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">float_str = <span class="hljs-built_in">str</span>(<span class="hljs-number">114.514</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(float_str), float_str)<br>num = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;11&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num), num)<br>num2 = <span class="hljs-built_in">float</span>(<span class="hljs-string">&quot;1919.810&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(num2), num2)<br>fnum = <span class="hljs-built_in">float</span>(<span class="hljs-number">11</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(fnum), fnum)<br>inum = <span class="hljs-built_in">int</span>(<span class="hljs-number">114.514</span>)  <span class="hljs-comment"># 不会四舍五入，直接取整</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(inum), inum)<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;str&#x27;</span>&gt; <span class="hljs-number">114.514</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt; <span class="hljs-number">11</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; <span class="hljs-number">1919.81</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;float&#x27;</span>&gt; <span class="hljs-number">11.0</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;int&#x27;</span>&gt; <span class="hljs-number">114</span><br></code></pre></td></tr></table></figure><h2 id="2-6标识符">2.6标识符</h2><p>标识符命名只允许出现:</p><ul><li>英文字母</li><li>中文(不推荐)</li><li>数字(不可以开头)</li><li>下划线_</li></ul><h2 id="2-7运算符">2.7运算符</h2><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703215458152.png" alt="image-20230703215458152"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704075044254.png" alt="image-20230704075044254"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703215659037.png" alt="image-20230703215659037"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703215750236.png" alt="image-20230703215750236"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(-<span class="hljs-number">17</span>/<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(-<span class="hljs-number">17</span>//<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">10</span>//<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">0.3333333333333333<br><span class="hljs-deletion">-4.25</span><br><span class="hljs-deletion">-5</span><br>2<br></code></pre></td></tr></table></figure><p>整除取整方向默认为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">-\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">∞</span></span></span></span></p><p>Python 中一般以新行作为语句的结束标识，可以使用 \ 将一行语句分为多行显示。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">128</span><br>b = <span class="hljs-number">1024</span><br>c = <span class="hljs-number">512</span><br>d = a + \<br>    b - \<br>    c<br></code></pre></td></tr></table></figure><p>如果包含在 []、{}、() 括号中，则不需要使用 \。如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">arr = &#123;<br>    a,<br>    b,<br>    c<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8字符串的三种定义方式">2.8字符串的三种定义方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 单引号定义法</span><br>name1=<span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># 双引号定义法</span><br>name2=<span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-comment">#三引号定义法</span><br>name3=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">hello</span><br><span class="hljs-string">world</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(name3)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><br><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">world</span><br></code></pre></td></tr></table></figure><p>单引号定义法,可以内含双引号</p><p>双引号定义法,可以内含单引号</p><p>可以用转义字符\解除引号的效用</p><h2 id="2-9字符串拼接">2.9字符串拼接</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s1 = <span class="hljs-string">&quot;abcd&quot;</span><br>s2 = <span class="hljs-string">&quot;defg&quot;</span><br>s3 = s1 + s2<br><span class="hljs-built_in">print</span>(s3)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abcddefg</span><br></code></pre></td></tr></table></figure><h2 id="2-10字符串格式化">2.10字符串格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">114514</span><br>s = <span class="hljs-string">&quot;abcde&quot;</span><br>message1 = <span class="hljs-string">&quot;%s你好世界&quot;</span> % s<br><span class="hljs-built_in">print</span>(message1)<br>message1 = <span class="hljs-string">&quot;%s你好世界%s&quot;</span> % (s, num)<br><span class="hljs-built_in">print</span>(message1)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">abcde</span>你好世界<br><span class="hljs-attribute">abcde</span>你好世界<span class="hljs-number">114514</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;绩点&quot;</span><br>gpa = <span class="hljs-number">0.1</span><br>num = <span class="hljs-number">666</span><br>message = <span class="hljs-string">&quot;%s高达%f,老铁%d&quot;</span> % (s, gpa, num)<br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">绩点高达<span class="hljs-number">0.100000</span>,老铁<span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><h2 id="字符转ASCII和ASCII转字符串">字符转ASCII和ASCII转字符串</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&quot;a&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>))<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">97</span><br><span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><h2 id="字符串的大小写转化">字符串的大小写转化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># title将首字母变成大写,其余小写</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;wHat a beaUTIFul GIrl!!&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.title())<br><span class="hljs-comment"># upper将所有字母变成大写</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;Cpp Is The Best Programing Language&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.upper())<br><span class="hljs-comment"># lower将所有字母变成小写</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;I HATE PYTHOn&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>.lower())<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">What <span class="hljs-selector-tag">A</span> Beautiful Girl!!<br>CPP IS THE BEST PROGRAMING LANGUAGE<br><span class="hljs-selector-tag">i</span> hate python<br></code></pre></td></tr></table></figure><h2 id="2-11数字精度控制">2.11数字精度控制</h2><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703224027306.png" alt="image-20230703224027306"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230703224237500.png" alt="image-20230703224237500"></p><h2 id="2-12字符串格式化的一种快速写法">2.12字符串格式化的一种快速写法</h2><p>格式:<code>f”内容&#123;变量&#125;”</code>(不关心精度控制)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;绩点&quot;</span><br>gpa = <span class="hljs-number">0.1</span><br>num = <span class="hljs-number">666</span><br>message = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;s&#125;</span>高达<span class="hljs-subst">&#123;gpa&#125;</span>,大佬<span class="hljs-subst">&#123;num&#125;</span>&quot;</span><br><span class="hljs-built_in">print</span>(message)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">绩点高达0.1,大佬666<br></code></pre></td></tr></table></figure><h2 id="2-15input语句">2.15input语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;你是谁？&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ohhhhhhh!您就是那位著名的%s&quot;</span> % name)<br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">你是谁？练习时长两年半的个人练习生<br>ohhhhhhh!您就是那位著名的练习时长两年半的个人练习生<br></code></pre></td></tr></table></figure><p>input默认接受类型为string字符串</p><h2 id="3条件语句">3条件语句</h2><p>bool类型表示逻辑,True记作1,False记作0</p><p>python中的与或非: and or not</p><p><a href="https://blog.csdn.net/swansonge/article/details/109166865">参考链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">num1 = <span class="hljs-number">11</span><br>num2 = <span class="hljs-number">20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;11&gt;20结果是<span class="hljs-subst">&#123;<span class="hljs-number">11</span> &gt; <span class="hljs-number">20</span>&#125;</span>,类型为<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(<span class="hljs-number">11</span> &gt; <span class="hljs-number">20</span>)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-number">11</span>&gt;<span class="hljs-number">20</span>结果是<span class="hljs-literal">False</span>,类型为&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;bool&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">10</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>&lt;10&quot;</span>)<br><span class="hljs-keyword">elif</span> num &lt;= <span class="hljs-number">100</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;num&#125;</span>&lt;=100&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-number">20</span><br><span class="hljs-number">20</span>&lt;<span class="hljs-operator">=</span><span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">num</span> = <span class="hljs-built_in">int</span>(input())<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">num</span> &lt;= <span class="hljs-number">100</span>:<br>    pass  # pass 是空语句，它不做任何事情，一般用做占位语句，作用是保持程序结构的完整性。<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">num</span>)<br><br></code></pre></td></tr></table></figure><h2 id="4-1循环语句while">4.1循环语句while</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">1</span><br>add = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> x &lt;= <span class="hljs-number">100</span>:<br>    add += x<br>    x += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(add)<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">5050</span><br></code></pre></td></tr></table></figure><h2 id="4-2循环语句for">4.2循环语句for</h2><p>for 临时变量 in 序列类型:</p><p>字符串和range语句生成的都是序列类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;abcdef&quot;</span><br><span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> ch == <span class="hljs-string">&quot;a&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&quot;e&quot;</span>):<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(ch)<br></code></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">b</span><br>c<br>d<br></code></pre></td></tr></table></figure><p><code>range(num)</code></p><p>获得一个从0开始,到num结束的数字序列</p><p>range(5)取得的数据是[0,1,2,3,4]</p><p>range(num1,num2)</p><p>获得从num1开始,到num2结束的数字序列(不含num2本身)</p><p>range(5,10)取得的数据是[5,6,7,8,9]</p><p>range(num1,num2,step)</p><p>获得从num1开始,到num2结束的数字序列(不含num2本身)</p><p>数字间的步长,以step为准(默认为1)</p><p>例如,range(5,10,2)取得的数据为[5,7,9]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(x, end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">5 </span><span class="hljs-number">7</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span> <br></code></pre></td></tr></table></figure><h3 id="reduce代替for循环">reduce代替for循环</h3><p><code>reduce</code>函数在<code>python2</code>中是个内置函数，在<code>python3</code>中被移到<code>functools</code>模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x+y<br>ar=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>accumulate=reduce(add,ar)<br><span class="hljs-built_in">print</span>(accumulate)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">15<br></code></pre></td></tr></table></figure><p>解释: 1+2+3+4+5=15</p><p>作用:它用于对一个可迭代对象进行累积操作，将一个二元函数应用于序列的前两个元素，然后将结果与下一个元素继续应用该函数，直到序列中的所有元素都被处理完毕。</p><h2 id="5函数">5函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">strlen</span>(<span class="hljs-params">s</span>):<br>    a = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        a += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> a<br><br><br>s1 = <span class="hljs-string">&quot;hello world&quot;</span><br><span class="hljs-built_in">print</span>(strlen(s1))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">11<br></code></pre></td></tr></table></figure><p>对于没有返回值的函数,返回值为None类型(也可以return None或return)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">nofunc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nofunc&quot;</span>)<br><br><br><span class="hljs-built_in">print</span>(nofunc(), <span class="hljs-built_in">type</span>(nofunc()))<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">nofunc<br>nofunc<br><span class="hljs-keyword">None</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;NoneType&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>在if判断中None等同于False</p><p>None也可用于声明无初始内容的变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-literal">None</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br>a = <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(a, <span class="hljs-built_in">type</span>(a))<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">None &lt;<span class="hljs-keyword">class</span> &#x27;<span class="hljs-symbol">NoneType</span>&#x27;&gt;<br><span class="hljs-symbol">1</span> &lt;<span class="hljs-symbol">class</span> &#x27;<span class="hljs-symbol">int</span>&#x27;&gt;<br></code></pre></td></tr></table></figure><p>函数说明文档:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    add函数可以接受2个参数，进行两数相加</span><br><span class="hljs-string">    :param x:第一个数字</span><br><span class="hljs-string">    :param y:第二个数字</span><br><span class="hljs-string">    :return:两数之和</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    result = x + y<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;1+2=&quot;</span>, add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>注:函数内定义的变量在函数外是完全不可访问的</p><p>函数外定义的全局变量函数内可以访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">200</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test_a<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    num = <span class="hljs-number">500</span>  <span class="hljs-comment"># 局部变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test_b<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br>test_a()<br>test_b()<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">test<span class="hljs-emphasis">_a200</span><br><span class="hljs-emphasis">test_</span>b500<br>200<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-number">200</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_a</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test_a<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_b</span>():<br>    <span class="hljs-keyword">global</span> num<br>    num = <span class="hljs-number">500</span>  <span class="hljs-comment"># 全局变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;test_b<span class="hljs-subst">&#123;num&#125;</span>&quot;</span>)<br><br><br>test_a()<br>test_b()<br><span class="hljs-built_in">print</span>(num)<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">test<span class="hljs-emphasis">_a200</span><br><span class="hljs-emphasis">test_</span>b500<br>500<br></code></pre></td></tr></table></figure><h2 id="6-1-list数据容器-列表">6.1 list数据容器-列表</h2><h3 id="定义列表">定义列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">name_list = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>]<br><span class="hljs-built_in">print</span>(name_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(name_list))<br><span class="hljs-comment"># 列表可以存储多种不同元素</span><br>my_list = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">666</span>, <span class="hljs-literal">True</span>]<br><span class="hljs-built_in">print</span>(my_list)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(my_list))<br><span class="hljs-comment"># 列表支持嵌套</span><br>two_dimension = [[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br><span class="hljs-built_in">print</span>(two_dimension)<br><span class="hljs-built_in">print</span>((<span class="hljs-built_in">type</span>(two_dimension)))<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[&#x27;abc&#x27;, &#x27;def&#x27;, &#x27;ghi&#x27;]</span><br>&lt;<span class="hljs-keyword">class</span> &#x27;<span class="hljs-symbol">list</span>&#x27;&gt;<br>[&#x27;<span class="hljs-symbol">abc</span>&#x27;, <span class="hljs-symbol">666, <span class="hljs-symbol">True</span></span>]<br>&lt;<span class="hljs-symbol">class</span> &#x27;<span class="hljs-symbol">list</span>&#x27;&gt;<br>[[<span class="hljs-symbol">1, <span class="hljs-symbol">2</span>, <span class="hljs-symbol">3</span></span>], [<span class="hljs-symbol">4, <span class="hljs-symbol">5</span>, <span class="hljs-symbol">6</span></span>]]<br>&lt;<span class="hljs-symbol">class</span> &#x27;<span class="hljs-symbol">list</span>&#x27;&gt;<br></code></pre></td></tr></table></figure><h3 id="下标索引">下标索引</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704110534622.png" alt="image-20230704110534622"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704110628855.png" alt="image-20230704110628855"></p><h3 id="index方法-由元素找到第一次出现的下标">.index方法(由元素找到第一次出现的下标)</h3><p>列表.index(元素)</p><p>Return first index of value.<br>Raises ValueError if the value is not present.(报错)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>]<br>idx=mylist.index(<span class="hljs-string">&quot;abc&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;&quot;abc&quot;的下标位置为<span class="hljs-subst">&#123;idx&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;abc&quot;</span>的下标位置为<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="修改元素">修改元素[]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>]<br>mylist[<span class="hljs-number">1</span>]=<span class="hljs-string">&quot;bcd&quot;</span><br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;abc</span>&#x27;, <span class="hljs-symbol">&#x27;bcd</span>&#x27;, <span class="hljs-symbol">&#x27;ghi</span>&#x27;]<br></code></pre></td></tr></table></figure><h3 id="插入元素-insert">插入元素.insert()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>]<br>mylist.insert(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;666&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在下标2处插入元素后，mylist变成<span class="hljs-subst">&#123;mylist&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在下标<span class="hljs-number">2</span>处插入元素后，mylist变成<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;666&#x27;</span>, <span class="hljs-string">&#x27;ghi&#x27;</span>, <span class="hljs-string">&#x27;jkl&#x27;</span>, <span class="hljs-string">&#x27;mno&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="追加元素-append">追加元素.append()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>]<br>mylist.append(<span class="hljs-string">&quot;pqr&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在尾插元素后，mylist变成<span class="hljs-subst">&#123;mylist&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在尾插元素后，mylist变成<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;ghi&#x27;</span>, <span class="hljs-string">&#x27;jkl&#x27;</span>, <span class="hljs-string">&#x27;mno&#x27;</span>, <span class="hljs-string">&#x27;pqr&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="追加其他容器-extend">追加其他容器.extend()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>]<br>mylist.extend([<span class="hljs-string">&quot;pqr&quot;</span>, <span class="hljs-string">&quot;stu&quot;</span>, <span class="hljs-string">&quot;vwx&quot;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在追加列表后，mylist变成<span class="hljs-subst">&#123;mylist&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">在追加列表后，mylist变成<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;ghi&#x27;</span>, <span class="hljs-string">&#x27;jkl&#x27;</span>, <span class="hljs-string">&#x27;mno&#x27;</span>, <span class="hljs-string">&#x27;pqr&#x27;</span>, <span class="hljs-string">&#x27;stu&#x27;</span>, <span class="hljs-string">&#x27;vwx&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="删除指定下标处元素">删除指定下标处元素</h3><p><code>del 列表名[下标]</code>或<code>列表名.pop(下标)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>, <span class="hljs-string">&quot;pqr&quot;</span>, <span class="hljs-string">&quot;stu&quot;</span>, <span class="hljs-string">&quot;vwx&quot;</span>]<br><span class="hljs-keyword">del</span> mylist[<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;删除元素后，mylist变成<span class="hljs-subst">&#123;mylist&#125;</span>&quot;</span>)<br>element = mylist.pop(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;取出<span class="hljs-subst">&#123;element&#125;</span>后，列表变成<span class="hljs-subst">&#123;mylist&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">删除元素后，mylist变成<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;jkl&#x27;</span>, <span class="hljs-string">&#x27;mno&#x27;</span>, <span class="hljs-string">&#x27;pqr&#x27;</span>, <span class="hljs-string">&#x27;stu&#x27;</span>, <span class="hljs-string">&#x27;vwx&#x27;</span>]</span><br>取出jkl后，列表变成<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;abc&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;mno&#x27;</span>, <span class="hljs-string">&#x27;pqr&#x27;</span>, <span class="hljs-string">&#x27;stu&#x27;</span>, <span class="hljs-string">&#x27;vwx&#x27;</span>]</span><br></code></pre></td></tr></table></figure><h3 id="找到并删除元素remove">找到并删除元素remove</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>mylist.remove(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[1, 3, 2, 3]</span><br></code></pre></td></tr></table></figure><p>只删除从左到右的第一个</p><h3 id="清空列表-clear">清空列表.clear()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>mylist.clear()<br><span class="hljs-built_in">print</span>(mylist)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[]</span><br></code></pre></td></tr></table></figure><h3 id="统计元素数量-count">统计元素数量.count()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(my_list.count(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h3 id="列表长度">列表长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(my_list))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">5<br></code></pre></td></tr></table></figure><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704125810615.png" alt="image-20230704125810615"></p><p>列表长度上限为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>63</mn></msup><mo>−</mo><mn>1</mn><mo>=</mo><mn>9223372036854775807</mn></mrow><annotation encoding="application/x-tex">2^{63}-1=9223372036854775807</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9223372036854775807</span></span></span></span></p><h3 id="遍历容器">遍历容器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>]<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> my_list:<br>    <span class="hljs-built_in">print</span>(ele, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&quot;这&quot;</span>, <span class="hljs-string">&quot;是&quot;</span>, <span class="hljs-string">&quot;一个&quot;</span>, <span class="hljs-string">&quot;测试&quot;</span>]<br><span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1):<br>    <span class="hljs-built_in">print</span>(index, item)<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span>这<br><span class="hljs-symbol">1 </span>是<br><span class="hljs-symbol">2 </span>一个<br><span class="hljs-symbol">3 </span>测试<br></code></pre></td></tr></table></figure><p>可以设置下标从哪个数开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">list1 = [<span class="hljs-string">&quot;这&quot;</span>, <span class="hljs-string">&quot;是&quot;</span>, <span class="hljs-string">&quot;一个&quot;</span>, <span class="hljs-string">&quot;测试&quot;</span>]<br><span class="hljs-keyword">for</span> index, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(list1, <span class="hljs-number">1</span>):<br>    <span class="hljs-built_in">print</span>(index, item)<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>这<br><span class="hljs-symbol">2 </span>是<br><span class="hljs-symbol">3 </span>一个<br><span class="hljs-symbol">4 </span>测试<br></code></pre></td></tr></table></figure><h3 id="拷贝容器-copy">拷贝容器.copy</h3><p><code>l1=l2</code>是深拷贝,修改<code>l2</code>,<code>l1</code>会跟着改变</p><p><code>l1-l2.copy()</code>是浅拷贝,修改<code>l2</code>,<code>l1</code>不会跟着改变</p><h2 id="6-7-tuple数据容器-元组">6.7 tuple数据容器-元组</h2><p>和list的区别是不可修改</p><h3 id="定义">定义:</h3><p><code>(元素,元素,元素,......)</code></p><p>空元组:<code>变量名称=()</code></p><p><code>变量名称=tuple()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义单个元素的元组</span><br>t = (<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;类型是<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(t)&#125;</span>,内容是<span class="hljs-subst">&#123;t&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型是&lt;<span class="hljs-keyword">class</span> &#x27;<span class="hljs-symbol">str</span>&#x27;&gt;,内容是<span class="hljs-symbol">hello</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义单个元素的元组需要加一个逗号,以便和数学公式区分</span><br>t = (<span class="hljs-string">&quot;hello&quot;</span>,)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;类型是<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(t)&#125;</span>,内容是<span class="hljs-subst">&#123;t&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(t))<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">类型是&lt;<span class="hljs-keyword">class</span> &#x27;<span class="hljs-symbol">tuple</span>&#x27;&gt;,内容是(&#x27;<span class="hljs-symbol">hello</span>&#x27;,)<br><span class="hljs-symbol">1</span><br></code></pre></td></tr></table></figure><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704140301050.png" alt="image-20230704140301050"></p><p>元组不可修改,但元组中的列表可以修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">t = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">5</span>)<br>t[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>] = -<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(t)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-name">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><h2 id="6-8string数据容器-字符串">6.8string数据容器-字符串</h2><p>字符串可以通过下标进行访问</p><ul><li>从前往后,下标从0开始递增</li><li>从后往前,下标从-1开始递减</li></ul><p>同元组一样,字符串是一个无法修改的数据容器</p><h3 id="index方法">index方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;you are a handsome boy&quot;</span><br><span class="hljs-built_in">print</span>(s.index(<span class="hljs-string">&quot;hand&quot;</span>))  <span class="hljs-comment"># 返回hand第一次出现时h的下标</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h3 id="replace方法-替换">.replace方法(替换)</h3><p>语法:<code>字符串.replace(字符串1,字符串2)</code></p><p>功能:将字符串内的全部: 字符串1,替换为字符串2</p><p>注意:不是修改字符串本身,而是得到了一个新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;cats and dogs are good cats and dogs and cats and dogs do things cats and dogs like do&quot;</span><br>s1 = s.replace(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;tiger&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;s=<span class="hljs-subst">&#123;s&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;s1=<span class="hljs-subst">&#123;s1&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">s=cats <span class="hljs-keyword">and </span>dogs are good cats <span class="hljs-keyword">and </span>dogs <span class="hljs-keyword">and </span>cats <span class="hljs-keyword">and </span>dogs do things cats <span class="hljs-keyword">and </span>dogs like do<br><span class="hljs-built_in">s1</span>=tigers <span class="hljs-keyword">and </span>dogs are good tigers <span class="hljs-keyword">and </span>dogs <span class="hljs-keyword">and </span>tigers <span class="hljs-keyword">and </span>dogs do things tigers <span class="hljs-keyword">and </span>dogs like do<br></code></pre></td></tr></table></figure><h3 id="split方法-分割">.split方法(分割)</h3><p>语法:<code>字符串.split(分隔符字符串)</code></p><p>功能:按照指定的分隔符字符串,将字符串划分成多个字符串,并存入列表对象中</p><p>注意:字符串本身不变,而是得到了一个列表对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;cats and dogs are good cats and dogs and cats and dogs do things cats and dogs like do&quot;</span><br>l = s.split(<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;s=<span class="hljs-subst">&#123;s&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;s1=<span class="hljs-subst">&#123;l&#125;</span>,type(l)=<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(l)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">s=cats <span class="hljs-keyword">and</span> dogs are good cats <span class="hljs-keyword">and</span> dogs <span class="hljs-keyword">and</span> cats <span class="hljs-keyword">and</span> dogs <span class="hljs-keyword">do</span> things cats <span class="hljs-keyword">and</span> dogs <span class="hljs-keyword">like</span> <span class="hljs-keyword">do</span><br>s1=[<span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;dogs&#x27;</span>, <span class="hljs-string">&#x27;are&#x27;</span>, <span class="hljs-string">&#x27;good&#x27;</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;dogs&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;dogs&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>, <span class="hljs-string">&#x27;things&#x27;</span>, <span class="hljs-string">&#x27;cats&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;dogs&#x27;</span>, <span class="hljs-string">&#x27;like&#x27;</span>, <span class="hljs-string">&#x27;do&#x27;</span>],<span class="hljs-keyword">type</span>(l)=&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;list&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="strip方法-规整字符串">.strip方法(规整字符串)</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704143727745.png" alt="image-20230704143727745"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;12abcde1&quot;</span><br><span class="hljs-built_in">print</span>(s.strip(<span class="hljs-string">&quot;12&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abcde</span><br></code></pre></td></tr></table></figure><h3 id="count方法统计字符串中某字符串出现的次数">.count方法统计字符串中某字符串出现的次数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;114514514114514514114114&quot;</span><br><span class="hljs-built_in">print</span>(s.count(<span class="hljs-string">&quot;114&quot;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h3 id="len统计字符串长度">len统计字符串长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;114514514114514514114114&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">24<br></code></pre></td></tr></table></figure><h3 id="汇总">汇总</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704144414126.png" alt="image-20230704144414126"></p><h3 id="Python-中常用处理字符串的相关函数">Python 中常用处理字符串的相关函数</h3><p><a href="https://leetcode.cn/problems/valid-palindrome/solutions/294819/xiong-mao-shua-ti-python3-fu-xi-tie-hui-gu-chang-y/">原文链接</a></p><p><code>string.capitalize()</code> 把字符串的第一个字符大写<br><code>string.count(str, beg=0, end=len(string)) </code>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数<br><code>string.endswith(obj, beg=0, end=len(string))</code> 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False.<br><code>string.find(str, beg=0, end=len(string)) </code>检测 str 是否包含在 string 中，如果 beg 和 end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1<br><code>string.index(str, beg=0, end=len(string)) </code>跟find()方法一样，只不过如果str不在 string中会报一个异常.<br><code>string.isalnum() </code>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False<br><code>string.isalpha() </code>如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False<br><code>string.isdecimal() </code>如果 string 只包含十进制数字则返回 True 否则返回 False.<br><code>string.isdigit() </code>如果 string 只包含数字则返回 True 否则返回 False.<br><code>string.islower() </code>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False<br><code>string.isnumeric() </code>如果 string 中只包含数字字符，则返回 True，否则返回 False<br><code>string.isspace()</code> 如果 string 中只包含空格，则返回 True，否则返回 False.<br><code>string.istitle() </code>如果 string 是标题化的(见 title())则返回 True，否则返回 False<br><code>string.isupper() </code>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False<br><code>string.join(seq) </code>以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串<br><code>string.lower()</code> 转换 string 中所有大写字符为小写.<br><code>string.lstrip() </code>截掉 string 左边的空格<br><code>max(str) </code>返回字符串 str 中最大的字母。<br><code>min(str)</code> 返回字符串 str 中最小的字母。<br><code>string.replace(str1, str2, num=string.count(str1)) </code>把 string 中的 str1 替换成 str2,如果 num 指定，则替换不超过 num 次.<br><code>string.split(str=&quot;&quot;, num=string.count(str)) </code>以 str 为分隔符切片 string，如果 num 有指定值，则仅分隔 num+ 个子字符串<br><code>string.startswith(obj, beg=0,end=len(string))</code> 检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查.<br><code>string.strip([obj]) </code>在 string 上执行 lstrip()和 rstrip()<br><code>string.swapcase() </code>翻转 string 中的大小写<br><code>string.title() </code>返回&quot;标题化&quot;的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())<br><code>string.translate(str, del=&quot;&quot;) </code>根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中<br><code>string.upper()</code> 转换 string 中的小写字母为大写</p><h2 id="6-10-取子序列-序列的切片">6.10(取子序列)序列的切片</h2><p>序列:内容连续,有序,可使用下标索引的一类数据容器</p><p>列表、元组、字符串均可以视为序列</p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704145308052.png" alt="image-20230704145308052"></p><p>注意:此操作不会影响序列本身,而是会得到一个新的序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mylist = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br>result1 = mylist[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br>result2 = mylist[<span class="hljs-number">2</span>:<span class="hljs-number">9</span>:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(result1)<br><span class="hljs-built_in">print</span>(result2)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[1, 2, 3]</span><br><span class="hljs-string">[2, 4, 6, 8]</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">mytuple = (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<br>r1 = mytuple[:]  <span class="hljs-comment"># 都不写表示从头到尾</span><br>r2 = mytuple[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;r1=<span class="hljs-subst">&#123;r1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;r2=<span class="hljs-subst">&#123;r2&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r1</span>=(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>)<br><span class="hljs-attribute">r2</span>=(<span class="hljs-number">10</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="6-12set集合">6.12set集合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>&#125;<br>b = &#123;&#125;  <span class="hljs-comment"># 注意:这里的b是字典而不是集合 </span><br>c = <span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">print</span>(a, b, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(b))<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">11</span>&#125; &#123;&#125; <span class="hljs-keyword">set</span>()<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>因为集合是无序的,所以不支持下标索引访问</p><p>但是集合和列表一样,是允许修改的</p><h3 id="add添加元素">.add添加元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>a.add(<span class="hljs-number">1</span>)<br>a.add(<span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;1, 2, 3, 4, 5, 6, 7, 11&#125;</span><br></code></pre></td></tr></table></figure><h3 id="remove移除元素">.remove移除元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br>a.remove(<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;2, 4, 5, 6, 7, 11&#125;</span><br></code></pre></td></tr></table></figure><h3 id="pop取出元素">.pop取出元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">11</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(a) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(a.pop())<br>a = &#123;<span class="hljs-string">&quot;ab&quot;</span>, <span class="hljs-string">&quot;idq&quot;</span>, <span class="hljs-string">&quot;sq&quot;</span>, <span class="hljs-string">&quot;kq&quot;</span>, <span class="hljs-string">&quot;yc&quot;</span>, <span class="hljs-string">&quot;mw&quot;</span>&#125;<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(a) &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(a.pop())<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">11</span><br><span class="hljs-built_in">sq</span><br>yc<br>kq<br>mw<br>idq<br>ab<br></code></pre></td></tr></table></figure><p>取出的过程对于字符串是随机的,即每次运行结果都不同</p><h3 id="difference集合差集">.difference集合差集</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704163340854.png" alt="image-20230704163340854"></p><h3 id="difference-update集合的差集并更新左集合">.difference_update集合的差集并更新左集合</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704163603047-1688459764156-1.png" alt="image-20230704163603047"></p><h3 id="union集合合并">.union集合合并</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704163847187.png" alt="image-20230704163847187"></p><h3 id="集合长度">集合长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">9<br></code></pre></td></tr></table></figure><h3 id="集合遍历">集合遍历</h3><p>集合不支持下标索引,所以不能用while循环遍历集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">set1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br><span class="hljs-keyword">for</span> ele <span class="hljs-keyword">in</span> set1:<br>    <span class="hljs-built_in">print</span>(ele, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <br></code></pre></td></tr></table></figure><h3 id="总结">总结</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704164456346.png" alt="image-20230704164456346"></p><h2 id="6-14-dict字典">6.14 dict字典</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d1=<span class="hljs-subst">&#123;d1&#125;</span> with type<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(d1)&#125;</span>&quot;</span>)<br>d2 = &#123;&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d2=<span class="hljs-subst">&#123;d2&#125;</span> with type<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(d2)&#125;</span>&quot;</span>)<br>d3 = <span class="hljs-built_in">dict</span>()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;d3=<span class="hljs-subst">&#123;d3&#125;</span> with type<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(d3)&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">d1=&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">100</span>&#125; <span class="hljs-keyword">with</span> <span class="hljs-keyword">type</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>d2=&#123;&#125; <span class="hljs-keyword">with</span> <span class="hljs-keyword">type</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br>d3=&#123;&#125; <span class="hljs-keyword">with</span> <span class="hljs-keyword">type</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;dict&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><p>字典不允许键值重复</p><p>key和value可以是任意数据类型,但key不能为字典(必须可哈希)</p><h3 id="访问元素">[]访问元素</h3><p>不可以使用下标索引,但可以根据key找到value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>&#125;<br><span class="hljs-built_in">print</span>(d1[<span class="hljs-string">&quot;b&quot;</span>])<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">98<br></code></pre></td></tr></table></figure><h3 id="新增元素-更新元素">[]新增元素,更新元素</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704170925784.png" alt="image-20230704170925784"></p><p>dict不支持访问不存在的元素(以下是错误代码)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;d1[&quot;g&quot;]=<span class="hljs-subst">&#123;d1[<span class="hljs-string">&quot;g&quot;</span>]&#125;</span>&#x27;</span>)  <span class="hljs-comment"># 代码编译错误</span><br></code></pre></td></tr></table></figure><h3 id="pop删除元素">.pop删除元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br>d1.pop(<span class="hljs-string">&quot;d&quot;</span>)<br><span class="hljs-built_in">print</span>(d1)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;a&#x27;: <span class="hljs-number">97</span>, &#x27;b&#x27;: <span class="hljs-number">98</span>, &#x27;c&#x27;: <span class="hljs-number">99</span>, &#x27;e&#x27;: <span class="hljs-number">101</span>, &#x27;f&#x27;: <span class="hljs-number">102</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="clear清空元素">.clear清空元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br>d1.clear()<br><span class="hljs-built_in">print</span>(d1)<br></code></pre></td></tr></table></figure><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="keys获取全部的key">.keys获取全部的key</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br>k = d1.keys()<br><span class="hljs-built_in">print</span>(k)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(k))<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">dict_keys</span><span class="hljs-params">([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>])</span></span><br>&lt;class <span class="hljs-string">&#x27;dict_keys&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="遍历容器-2">遍历容器</h3><p>方式1:通过key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br>k = d1.keys()<br><span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> k:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;key=<span class="hljs-subst">&#123;k1&#125;</span>,value=<span class="hljs-subst">&#123;d1[k1]&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">key</span>=a,value=97 <span class="hljs-attribute">key</span>=b,value=98 <span class="hljs-attribute">key</span>=c,value=99 <span class="hljs-attribute">key</span>=d,value=100 <span class="hljs-attribute">key</span>=e,value=101 <span class="hljs-attribute">key</span>=f,value=102 <br></code></pre></td></tr></table></figure><p>方式2:直接for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> d1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;key=<span class="hljs-subst">&#123;k1&#125;</span>,value=<span class="hljs-subst">&#123;d1[k1]&#125;</span>&quot;</span>, end=<span class="hljs-string">&quot; &quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">key</span>=a,value=97 <span class="hljs-attribute">key</span>=b,value=98 <span class="hljs-attribute">key</span>=c,value=99 <span class="hljs-attribute">key</span>=d,value=100 <span class="hljs-attribute">key</span>=e,value=101 <span class="hljs-attribute">key</span>=f,value=102 <br></code></pre></td></tr></table></figure><h3 id="len统计元素数量">len统计元素数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">6<br></code></pre></td></tr></table></figure><h3 id="判断元素是否在容器内">判断元素是否在容器内</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;c&quot;</span> <span class="hljs-keyword">in</span> d1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;p&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d1:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not in&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-number">97</span> <span class="hljs-keyword">in</span> d1.values():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;in&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;not in&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">in</span><br><span class="hljs-attribute">not in</span><br><span class="hljs-attribute">in</span><br></code></pre></td></tr></table></figure><h3 id="总结-2">总结</h3><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704173113950.png" alt="image-20230704173113950"></p><h2 id="五类容器的总结">五类容器的总结</h2><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704173413765.png" alt="image-20230704173413765"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704185950275.png" alt="image-20230704185950275"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230704190147277.png" alt="image-20230704190147277"></p><p>万物皆可转列表(list)<code>list&#123;container&#125;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>b1 = <span class="hljs-string">&quot;abcdefg&quot;</span><br>c1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(a1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(b1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(c1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>]<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>]  <span class="hljs-comment">%字典转列表只保留key</span><br></code></pre></td></tr></table></figure><p>转tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>b1 = <span class="hljs-string">&quot;abcdefg&quot;</span><br>c1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(a1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(b1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(c1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">tuple</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>(<span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;b</span>&#x27;, <span class="hljs-symbol">&#x27;c</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;e</span>&#x27;, <span class="hljs-symbol">&#x27;f</span>&#x27;, <span class="hljs-symbol">&#x27;g</span>&#x27;)<br>(<span class="hljs-name">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>(<span class="hljs-symbol">&#x27;a</span>&#x27;, <span class="hljs-symbol">&#x27;b</span>&#x27;, <span class="hljs-symbol">&#x27;c</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;e</span>&#x27;, <span class="hljs-symbol">&#x27;f</span>&#x27;)<br></code></pre></td></tr></table></figure><p>转string</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>b1 = <span class="hljs-string">&quot;abcdefg&quot;</span><br>c1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(a1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(b1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(c1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1, 2, 3, 4, 5)</span><br>abcdefg<br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>&#123;<span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-number">102</span>&#125;<br></code></pre></td></tr></table></figure><p>转set</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>b1 = <span class="hljs-string">&quot;abcdefg&quot;</span><br>c1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;e&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;f&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(a1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(b1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(c1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">set</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>&#125;  <span class="hljs-comment">%被打乱了</span><br>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;<br>&#123;<span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>&#125;  <span class="hljs-comment">%被打乱了</span><br></code></pre></td></tr></table></figure><h3 id="sorted通用排序功能">sorted通用排序功能</h3><p><code>sorted(容器,[reverse=True])</code>   返回一个list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>)<br>b1 = <span class="hljs-string">&quot;bhwjdQNA1wq,&quot;</span><br>c1 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;r&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;l&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(a1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(b1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(c1))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(d1))<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br>[&#x27;,&#x27;, <span class="hljs-symbol">&#x27;1</span>&#x27;, <span class="hljs-symbol">&#x27;A</span>&#x27;, <span class="hljs-symbol">&#x27;N</span>&#x27;, <span class="hljs-symbol">&#x27;Q</span>&#x27;, <span class="hljs-symbol">&#x27;b</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;h</span>&#x27;, <span class="hljs-symbol">&#x27;j</span>&#x27;, <span class="hljs-symbol">&#x27;q</span>&#x27;, <span class="hljs-symbol">&#x27;w</span>&#x27;, <span class="hljs-symbol">&#x27;w</span>&#x27;]<br>[<span class="hljs-name">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br>[<span class="hljs-symbol">&#x27;c</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;l</span>&#x27;, <span class="hljs-symbol">&#x27;q</span>&#x27;, <span class="hljs-symbol">&#x27;r</span>&#x27;, <span class="hljs-symbol">&#x27;x</span>&#x27;]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>)<br>b1 = <span class="hljs-string">&quot;bhwjdQNA1wq,&quot;</span><br>c1 = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;<br>d1 = &#123;<span class="hljs-string">&quot;d&quot;</span>: <span class="hljs-number">97</span>, <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-number">98</span>, <span class="hljs-string">&quot;q&quot;</span>: <span class="hljs-number">99</span>, <span class="hljs-string">&quot;r&quot;</span>: <span class="hljs-number">100</span>, <span class="hljs-string">&quot;l&quot;</span>: <span class="hljs-number">101</span>, <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-number">102</span>&#125;<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(a1, reverse=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(b1, reverse=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(c1, reverse=<span class="hljs-literal">True</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(d1, reverse=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-name">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>]<br>[<span class="hljs-symbol">&#x27;w</span>&#x27;, <span class="hljs-symbol">&#x27;w</span>&#x27;, <span class="hljs-symbol">&#x27;q</span>&#x27;, <span class="hljs-symbol">&#x27;j</span>&#x27;, <span class="hljs-symbol">&#x27;h</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;b</span>&#x27;, <span class="hljs-symbol">&#x27;Q</span>&#x27;, <span class="hljs-symbol">&#x27;N</span>&#x27;, <span class="hljs-symbol">&#x27;A</span>&#x27;, <span class="hljs-symbol">&#x27;1</span>&#x27;, &#x27;,&#x27;]<br>[<span class="hljs-name">8</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>]<br>[<span class="hljs-symbol">&#x27;x</span>&#x27;, <span class="hljs-symbol">&#x27;r</span>&#x27;, <span class="hljs-symbol">&#x27;q</span>&#x27;, <span class="hljs-symbol">&#x27;l</span>&#x27;, <span class="hljs-symbol">&#x27;d</span>&#x27;, <span class="hljs-symbol">&#x27;c</span>&#x27;]<br></code></pre></td></tr></table></figure><h2 id="7-1函数多返回值">7.1函数多返回值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>, <span class="hljs-number">22</span><br><br><br>x, y = test01()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x=<span class="hljs-subst">&#123;x&#125;</span>,y=<span class="hljs-subst">&#123;y&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>=<span class="hljs-number">11</span>,y=<span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>, <span class="hljs-number">4.5</span>, <span class="hljs-string">&quot;14&quot;</span><br><br><br>x, y, z = test01()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x=<span class="hljs-subst">&#123;x&#125;</span>,y=<span class="hljs-subst">&#123;y&#125;</span>,z=<span class="hljs-subst">&#123;z&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">x</span>=<span class="hljs-number">11</span>,y=<span class="hljs-number">4</span>.<span class="hljs-number">5</span>,z=<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h2 id="7-2-函数的多种参数使用形式">7.2 函数的多种参数使用形式</h2><h3 id="位置参数">位置参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(name, age, gender)<br><br><br>test01(<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;沃尔玛塑料袋&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tom</span> <span class="hljs-number">10</span> 沃尔玛塑料袋<br></code></pre></td></tr></table></figure><h3 id="关键字参数">关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(name, age, gender)<br><br><br>test01(name=<span class="hljs-string">&#x27;Tom&#x27;</span>, age=<span class="hljs-number">10</span>, gender=<span class="hljs-string">&#x27;武装直升机&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tom</span> <span class="hljs-number">10</span> 武装直升机<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">name, age, gender</span>):  <span class="hljs-comment"># 可以打乱顺序</span><br>    <span class="hljs-built_in">print</span>(name, age, gender)<br><br><br>test01(name=<span class="hljs-string">&#x27;Tom&#x27;</span>, gender=<span class="hljs-string">&#x27;武装直升机&#x27;</span>, age=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tom</span> <span class="hljs-number">10</span> 武装直升机<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">name, age, gender</span>):<br>    <span class="hljs-built_in">print</span>(name, age, gender)<br><br><br>test01(<span class="hljs-string">&#x27;Tom&#x27;</span>, gender=<span class="hljs-string">&#x27;武装直升机&#x27;</span>, age=<span class="hljs-number">10</span>)  <span class="hljs-comment"># 关键字参数可以和位置参数混用</span><br><span class="hljs-comment"># 要求位置参数必须在关键词参数前面,关键词参数之间不存在先后顺序</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tom</span> <span class="hljs-number">10</span> 武装直升机<br></code></pre></td></tr></table></figure><h3 id="缺省参数">缺省参数</h3><p>默认参数必须放在最后</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">name, age, gender=<span class="hljs-string">&quot;草履虫&quot;</span></span>):<br>    <span class="hljs-built_in">print</span>(name, age, gender)<br><br><br>test01(<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Tom</span> <span class="hljs-number">10</span> 草履虫<br></code></pre></td></tr></table></figure><h3 id="不定长参数">不定长参数</h3><p>位置传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test01</span>(<span class="hljs-params">*args</span>):  <span class="hljs-comment"># 所有参数都会被args变量收集,并形成一个元组tuple</span><br>    <span class="hljs-built_in">print</span>(args)<br><br><br>test01(<span class="hljs-string">&#x27;Jerry&#x27;</span>)<br>test01(<span class="hljs-string">&#x27;Tom&#x27;</span>, <span class="hljs-number">10</span>)<br>test01(<span class="hljs-string">&#x27;Trump&#x27;</span>, <span class="hljs-number">77</span>, <span class="hljs-string">&#x27;Walmart bag&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-symbol">&#x27;Jerry</span>&#x27;,)<br>(<span class="hljs-symbol">&#x27;Tom</span>&#x27;, <span class="hljs-number">10</span>)<br>(<span class="hljs-symbol">&#x27;Trump</span>&#x27;, <span class="hljs-number">77</span>, <span class="hljs-symbol">&#x27;Walmart</span> bag&#x27;)<br></code></pre></td></tr></table></figure><p>关键字传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">**kwargs</span>):  <span class="hljs-comment"># 所有参数会被kwargs收集,并形成一个字典dict</span><br>    <span class="hljs-built_in">print</span>(kwargs)<br><br><br>user(name=<span class="hljs-string">&#x27;TOM&#x27;</span>, age=<span class="hljs-number">18</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">110</span>)<br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;name&#x27;: &#x27;TOM&#x27;, &#x27;age&#x27;: <span class="hljs-number">18</span>, &#x27;id&#x27;: <span class="hljs-number">110</span>&#125;<br></code></pre></td></tr></table></figure><p>args        -&gt;   arguments</p><p>kwargs   -&gt;   key word arguments</p><h2 id="7-3函数作为参数传递">7.3函数作为参数传递</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">compute</span>):<br>    result = compute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(compute))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><br><br>test_func(add)<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">3</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;function&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="7-4-lambda匿名函数">7.4 lambda匿名函数</h2><p>lambda 传入参数: 函数体(一行代码)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_func</span>(<span class="hljs-params">compute</span>):<br>    result = compute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    <span class="hljs-built_in">print</span>(result)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(compute))<br><br><br>test_func(<span class="hljs-keyword">lambda</span> x, y: x + y)  <span class="hljs-comment"># 可以不写return,默认是return</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">3</span><br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;function&#x27;</span>&gt;<br></code></pre></td></tr></table></figure><hr><h2 id="9-4模块的概念和导入">9.4模块的概念和导入</h2><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230705103353164.png" alt="image-20230705103353164"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230705103529040.png" alt="image-20230705103529040"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time  <span class="hljs-comment"># 导入python内置的time模块（time.py这个代码文件）</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><p>导入time模块后,就可以通过time.访问其中的内容(类,函数,变量)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep  <span class="hljs-comment"># 只导入time.py中sleep这一个函数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># time.sleep(1)  # 报错</span><br>sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *  <span class="hljs-comment"># *表示导入time.py中所有函数</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># time.sleep(1)  # 报错</span><br>sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache  <span class="hljs-comment"># cache装饰器</span><br></code></pre></td></tr></table></figure><p>给模块起别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time <span class="hljs-keyword">as</span> tt  <span class="hljs-comment"># 导入time.py中所有函数并起别名</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># time.sleep(1)  # 报错</span><br><span class="hljs-comment"># sleep(1)  # 报错</span><br>tt.sleep(<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><p>给函数起别名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep <span class="hljs-keyword">as</span> sl  <span class="hljs-comment"># 导入sleep函数命名为sl</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>)<br><span class="hljs-comment"># sleep(2)  #报错</span><br>sl(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><h2 id="9-5自定义模块">9.5自定义模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_hi</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Hi, <span class="hljs-subst">&#123;name&#125;</span>&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    print_hi(<span class="hljs-string">&#x27;PyCharm&#x27;</span>)<br></code></pre></td></tr></table></figure><p>运行模块时会输出<code>Hi, PyCharm</code></p><p>在其他文件导入模块时,不会输出<code>Hi, PyCharm</code></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230721091434918.png" alt="image-20230721091434918"></p><h2 id="9-6-自定义python包">9.6 自定义python包</h2><p>什么是Python包</p><p>从物理上看，包就是一个文件夹，在该文件夹下包含了一个<code>__init__.py</code> 文件，该文件夹可用于包含多个模块文件</p><p>从逻辑上看，包的本质依然是模块</p><h3 id="导入包">导入包</h3><p>方式一：</p><p>导入:   <code>import 包名.模块名</code></p><p>使用:    <code>包名.模块名.目标函数</code></p><p>方式二:</p><p>导入:   <code>from 包名 import 模块名</code></p><p>使用:   <code>模块名.目标函数</code></p><p>方式三:</p><p>导入:   <code>from 包名.模块名 import 目标函数</code></p><p>使用:   <code>目标函数</code></p><p>方式四:</p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230721093216149.png" alt="image-20230721093216149"></p><h2 id="9-7安装第三方包">9.7安装第三方包</h2><h3 id="什么是第三方包">什么是第三方包</h3><p>我们知道，包可以包含一堆的Python模块，而每个模块又内含许多的功能。</p><p>所以，我们可以认为：一个包，就是一堆同类型功能的集合体。</p><p>在Python程序的生态中，有许多非常多的第三方包（非Python官方），可以极大的帮助我们提高开发效率，如：</p><ul><li><p>科学计算中常用的： numpy包</p></li><li><p>数据分析中常用的：pandas包</p></li><li><p>大数据计算中常用的：pyspark、apache-flink包</p></li><li><p>图形可视化常用的: matplotlib,pyecharts</p></li><li><p>人工智能常用的：tensorflow</p></li><li><p>等</p></li></ul><p>这些第三方的包，极大的丰富了Python的生态，提高了开发效率。</p><p>但是由于是第三方，所以Python没有内置，所以我们需要安装它们才可以导入使用哦。</p><h3 id="安装第三方包-pip">安装第三方包 -pip</h3><p>第三方包的安装非常简单，我们只需要使用Python内置的pip程序即可。</p><p>打开我们许久未见的：命令提示符程序，在里面输入：</p><p>pip install 包名称</p><p>即可通过网络快速安装第三方包</p><p>pip的网络优化</p><p>由于pip是连接的国外的网站进行包的下载,所以有的时候会速度很慢。</p><p>我们可以通过如下命令,让其连接国内的网站进行包的安装:</p><p><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名称</code></p><h2 id="二-1-1类和对象">二.1.1类和对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cla</span>:<br>    a = <span class="hljs-literal">None</span><br>    b = <span class="hljs-literal">None</span><br>    c = <span class="hljs-literal">None</span><br>    d = <span class="hljs-literal">None</span><br><br><br>c = cla()<br>c.a = <span class="hljs-string">&quot;abc&quot;</span><br>c.b = <span class="hljs-number">1</span><br>c.c = <span class="hljs-number">114.514</span><br>c.d = <span class="hljs-literal">True</span><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(c))<br><span class="hljs-built_in">print</span>(c.a)<br></code></pre></td></tr></table></figure><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">&lt;<span class="hljs-number">__m</span>ain<span class="hljs-number">__</span>.cla <span class="hljs-keyword">object</span> at <span class="hljs-number">0</span>x<span class="hljs-number">0000025</span>DE<span class="hljs-number">9</span>D<span class="hljs-number">36</span>ED<span class="hljs-number">0</span>&gt;<br>&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;__main__.cla&#x27;</span>&gt;<br>abc<br></code></pre></td></tr></table></figure><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230706124337439.png" alt="image-20230706124337439"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230706124628423.png" alt="image-20230706124628423"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">man</span>:<br>    name = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sayhi</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我是<span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sayhi1</span>(<span class="hljs-params">self, msg</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;我是<span class="hljs-subst">&#123;self.name&#125;</span>,<span class="hljs-subst">&#123;msg&#125;</span>&quot;</span>)<br><br><br>he = man()<br>he.name = <span class="hljs-string">&quot;iurefbref&quot;</span><br>he.sayhi()<br>he.sayhi1(<span class="hljs-string">&quot;hhhhhhh&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">我是iurefbref<br>我是iurefbref,hhhhhhh<br></code></pre></td></tr></table></figure><p>(python不支持函数重载)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params">a, b</span>):  <span class="hljs-comment"># 覆盖上面的f1定义</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b&quot;</span>)<br><br>f1(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 报错</span><br>f1(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)  <span class="hljs-comment"># 正常</span><br></code></pre></td></tr></table></figure><h2 id="1-4构造方法">1.4构造方法</h2><p>Python类可以使用：<code>__init__()</code>方法，称之为构造方法。</p><p>可以实现：</p><p>在创建类对象（构造类）的时候，会自动执行</p><p>在创建类对象（构造类）的时候，将传入参数自动传递给<code>__init__</code>方法使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br>    name = <span class="hljs-literal">None</span><br>    age = <span class="hljs-literal">None</span><br>    tel = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br><br>stu = student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1145141919810&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br><br>stu = student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1145141919810&quot;</span>)<br></code></pre></td></tr></table></figure><p>这样写也是对的</p><h2 id="1-5魔术方法">1.5魔术方法</h2><p>上文学习的<code>__init__</code>构造方法，是Python类内置的方法之一。</p><p>这些内置的类方法,各自有各自特殊的功能,这些内置方法我们称之为:魔术方法</p><ul><li><code>__init__</code>构造方法</li><li><code>__str__</code>字符串方法, 控制类转换成字符串时的行为</li><li><code>__lt__</code>小于,大于符号比较</li><li><code>__le__</code>小于等于,大于等于符号比较</li><li><code>__eq__</code>==符号比较</li></ul><h3 id="str-方法-类似重载cout"><code>__str__</code>方法(类似重载<code>cout</code>)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Student类对象, name = <span class="hljs-subst">&#123;self.name&#125;</span> , age = <span class="hljs-subst">&#123;self.age&#125;</span> , tel = <span class="hljs-subst">&#123;self.tel&#125;</span>&quot;</span><br><br><br>stu = student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1145141919810&quot;</span>)<br><span class="hljs-built_in">print</span>(stu)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Student</span>类对象, name = 张三 , age = <span class="hljs-number">31</span> , tel = <span class="hljs-number">1145141919810</span><br></code></pre></td></tr></table></figure><h3 id="lt-方法-类似重载‘-’-’-’"><code>__lt__</code>方法(类似重载‘&lt;’,’&gt;’)</h3><p><code>__lt__</code>本质上是小于符号比较的(lower than),但它也能做到大于符号比较</p><p>写该函数时,只需返回一个<code>bool</code>变量,表示用小于符号时为true的条件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Student类对象, name = <span class="hljs-subst">&#123;self.name&#125;</span> , age = <span class="hljs-subst">&#123;self.age&#125;</span> , tel = <span class="hljs-subst">&#123;self.tel&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.age &lt; other.age<br><br><br>stu1 = student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1145141919810&quot;</span>)<br>stu2 = student(<span class="hljs-string">&quot;里斯&quot;</span>, <span class="hljs-number">29</span>, <span class="hljs-string">&quot;1919810114514&quot;</span>)<br><span class="hljs-built_in">print</span>(stu1 &lt; stu2)<br><span class="hljs-built_in">print</span>(stu1 &gt; stu2)<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">False</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="le-方法-类似重载"><code>__le__</code>方法(类似重载&gt;=,&lt;=)</h3><p>less equal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Student类对象, name = <span class="hljs-subst">&#123;self.name&#125;</span> , age = <span class="hljs-subst">&#123;self.age&#125;</span> , tel = <span class="hljs-subst">&#123;self.tel&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__le__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.age &lt;= other.age<br><br><br>stu1 = student(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1145141919810&quot;</span>)<br>stu2 = student(<span class="hljs-string">&quot;里斯&quot;</span>, <span class="hljs-number">31</span>, <span class="hljs-string">&quot;1919810114514&quot;</span>)<br><span class="hljs-built_in">print</span>(stu1 &lt;= stu2)<br><span class="hljs-built_in">print</span>(stu1 &gt;= stu2)<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-literal">True</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="eq-方法-类似重载"><code>__eq__</code>方法(类似重载==,!=)</h3><p>equal</p><p>代码略</p><p>需要注意,对象自带比较==和!=的方法,当然只是比较内存地址是否相等</p><h2 id="1-6封装">1.6封装</h2><h3 id="私有成员">私有成员</h3><p>既然现实事物有不公开的属性和行为，那么作为现实事物在程序中映射的类，也应该支持。</p><p>类中提供了私有成员的形式来支持。</p><ul><li>私有成员变量</li><li>私有成员方法</li></ul><p>定义私有成员的方式非常简单,只需要:</p><ul><li><p>私有成员变量:变量名以<code>__</code>开头(2个下划线)</p></li><li><p>私有成员方法:方法名以<code>__</code>开头（2个下划线）</p></li></ul><p>即可完成私有成员的设置</p><h2 id="1-8继承">1.8继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, age, tel</span>):<br>        self.name = name<br>        self.age = age<br>        self.tel = tel<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Student类对象, name = <span class="hljs-subst">&#123;self.name&#125;</span> , age = <span class="hljs-subst">&#123;self.age&#125;</span> , tel = <span class="hljs-subst">&#123;self.tel&#125;</span>&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__le__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">return</span> self.age &lt;= other.age<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dalao</span>(<span class="hljs-title class_ inherited__">student</span>):<br>    GPA = <span class="hljs-number">5.0</span><br><br><br>d1 = dalao(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&quot;114514&quot;</span>)<br><span class="hljs-built_in">print</span>(d1.GPA)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>多继承:</p><p><code>class 类名(父类1,父类2,...):</code></p><p>括号内越靠左,优先级越高(存在同名方法时)</p><p>复写</p><p>子类继承父类的成员属性和成员方法后，如果对其“不满意”，那么可以进行复写。</p><p>即:在子类中重新定义同名的属性或方法即可。</p><p>调用父类同名成员</p><p>一旦复写父类成员，那么类对象调用成员的时候，就会调用复写后的新成员</p><p>如果需要使用被复写的父类的成员，需要特殊的调用方式：</p><ul><li><p>方式1：调用父类成员</p><ul><li><p>使用成员变量:父类名.成员变量</p></li><li><p>使用成员方法:父类名.成员方法(self)</p></li></ul></li><li><p>方式2:使用super()调用父类成员</p><ul><li><p>使用成员方法: super().成员方法()</p></li><li><p>使用成员变量：super().成员变量</p></li></ul></li></ul><h2 id="1-10变量的类型注解">1.10变量的类型注解</h2><p>类型注解</p><p>Python在3.5版本的时候引入了类型注解,以方便静态类型检查工具,IDE等第三方工具。</p><p>类型注解:在代码中涉及数据交互的地方,提供数据类型的注解(显式的说明)。</p><p>主要功能：帮助第三方IDE工具（如PyCharm）对代码进行类型推断，协助做代码提示</p><p>帮助开发者自身对变量进行类型注释</p><p>支持：</p><ul><li><p>变量的类型注解</p></li><li><p>函数(方法)形参列表和返回值的类型注解</p></li></ul><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230721115848877.png" alt="image-20230721115848877"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230721115923957.png" alt="image-20230721115923957"></p><p><img src="./python%E7%AC%94%E8%AE%B0.assets/image-20230721120105365.png" alt="image-20230721120105365"></p><p>按住需要用的函数和<code>alt+enter</code>可以自动搜索并导入包</p><p>类型注解是提示性的,而不是决定性的,以下的代码不会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">var: <span class="hljs-built_in">int</span> = <span class="hljs-string">&quot;itheima&quot;</span><br><span class="hljs-built_in">print</span>(var)<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">itheima</span><br></code></pre></td></tr></table></figure><p>对于函数:形参注释</p><p><code>def 函数方法名(形参名: 类型, 形参名:类型, ...)-&gt;返回值类型:</code></p><p>union用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">Union</span><br><br>my_list: <span class="hljs-built_in">list</span>[<span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>]] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">&quot;itheima&quot;</span>, <span class="hljs-string">&quot;itcast&quot;</span>]<br></code></pre></td></tr></table></figure><h2 id="1-13多态">1.13多态</h2><p>话不多说,上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span>:  <span class="hljs-comment"># 成为抽象类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 说明是空实现</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span>(<span class="hljs-title class_ inherited__">animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;汪汪汪&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span>(<span class="hljs-title class_ inherited__">animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;喵喵喵&quot;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">robot</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">speak</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;滋滋滋&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_noise</span>(<span class="hljs-params">ani: animal</span>):<br>    ani.speak()<br><br><br>a = animal()<br>b = dog()<br>c = cat()<br>d = robot()<br>make_noise(a)<br>make_noise(b)<br>make_noise(c)<br>make_noise(d)<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">汪汪汪<br>喵喵喵<br>滋滋滋<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>programing languages</category>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux</title>
    <link href="/2023/07/05/linux/index/"/>
    <url>/2023/07/05/linux/index/</url>
    
    <content type="html"><![CDATA[<h1>linux笔记</h1><p><strong>CJL_sysu</strong></p><h2 id="配置-WSL">配置:WSL</h2><p>WSL(windows subsystem for Linux)</p><p>使用WSL获得Ubuntu系统环境</p><p>WSL作为Windows10系统带来的全新特性，正在逐步颠覆开发人员既有的选择。</p><ul><li><p>传统方式获取Linux操作系统环境，是安装完整的虚拟机，如VMware</p></li><li><p>使用WSL，可以以非常轻量化的方式，得到Linux系统环境</p></li></ul><p>目前,开发者正在逐步抛弃以虚拟机的形式获取Linux系统环境,而在逐步拥抱WSL环境。</p><p>所以，课程也紧跟当下趋势，为同学们讲解如何使用WSL，简单、快捷的获得Linux系统环境。</p><p>所以，为什么要用WSL，其实很简单：</p><ul><li><p>开发人员都在用，大家都用的，我们也要学习</p></li><li><p>实在是太方便了，简单、好用、轻量化、省内存</p></li></ul><h2 id="1-ls"><a href="http://1.ls">1.ls</a></h2><p>list show</p><h3 id="ls-a-l-h-Linux路径">ls [-a -l -h] [Linux路径]</h3><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tcl">[cjl-linux@localhost ~]$ ls /<br>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  <span class="hljs-keyword">proc</span><span class="hljs-title">  root</span> <span class="hljs-title"> run</span> <span class="hljs-title"> sbin</span> <span class="hljs-title"> srv</span> <span class="hljs-title"> sys</span> <span class="hljs-title"> tmp</span> <span class="hljs-title"> usr</span> <span class="hljs-title"> var</span><br></code></pre></td></tr></table></figure><h3 id="a表示显示隐藏文件"><code>-a</code>表示显示隐藏文件</h3><p>.点开头的文件默认隐藏</p><pre>[cjl-linux@localhost ~]$ ls -a<font color="#005FFF">.</font>  <font color="#005FFF">..</font>  .bash_history  .bash_logout  .bash_profile  .bashrc  <font color="#005FFF">.cache</font>  <font color="#005FFF">.config</font>  <font color="#005FFF">.dbus</font>  <font color="#005FFF">Desktop</font>  <font color="#005FFF">Documents</font>  <font color="#005FFF">Downloads</font>  .esd_auth  .ICEauthority  <font color="#005FFF">.local</font>  <font color="#005FFF">.mozilla</font>  <font color="#005FFF">Music</font>  <font color="#005FFF">Pictures</font>  <font color="#005FFF">.pki</font>  <font color="#005FFF">Public</font>  <font color="#005FFF">Templates</font>  <font color="#005FFF">Videos</font></pre><h3 id="l表示以列表-竖向排列方式-展示内容-并展示更多信息"><code>-l</code>表示以列表(竖向排列方式)展示内容,并展示更多信息</h3><pre>[cjl-linux@localhost ~]$ ls -ltotal 0drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Desktop</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Documents</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Downloads</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Music</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Pictures</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Public</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Templates</font>drwxr-xr-x. 2 cjl-linux cjl-linux 6 May 26 07:01 <font color="#005FFF">Videos</font></pre><h3 id="l和-a可以共用"><code>-l</code>和<code>-a</code>可以共用</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> -<span class="hljs-keyword">a</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">la</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span><br></code></pre></td></tr></table></figure><pre>[cjl-linux@localhost ~]$ ls -latotal 32drwx------. 16 cjl-linux cjl-linux 4096 May 27 03:27 <font color="#005FFF">.</font>drwxr-xr-x.  3 root      root        23 May 26 06:59 <font color="#005FFF">..</font>-rw-------.  1 cjl-linux cjl-linux   51 May 27 03:53 .bash_history-rw-r--r--.  1 cjl-linux cjl-linux   18 Oct 30  2018 .bash_logout-rw-r--r--.  1 cjl-linux cjl-linux  193 Oct 30  2018 .bash_profile-rw-r--r--.  1 cjl-linux cjl-linux  231 Oct 30  2018 .bashrcdrwx------. 17 cjl-linux cjl-linux 4096 May 26 07:09 <font color="#005FFF">.cache</font>drwxr-xr-x. 14 cjl-linux cjl-linux  261 May 26 07:01 <font color="#005FFF">.config</font>drwx------.  3 cjl-linux cjl-linux   25 May 26 07:01 <font color="#005FFF">.dbus</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Desktop</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Documents</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Downloads</font>-rw-------.  1 cjl-linux cjl-linux   16 May 26 07:01 .esd_auth-rw-------.  1 cjl-linux cjl-linux  934 May 27 03:27 .ICEauthoritydrwx------.  3 cjl-linux cjl-linux   19 May 26 07:01 <font color="#005FFF">.local</font>drwxr-xr-x.  6 cjl-linux cjl-linux   81 May 26 07:02 <font color="#005FFF">.mozilla</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Music</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Pictures</font>drwxrw----.  3 cjl-linux cjl-linux   19 May 26 07:08 <font color="#005FFF">.pki</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Public</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Templates</font>drwxr-xr-x.  2 cjl-linux cjl-linux    6 May 26 07:01 <font color="#005FFF">Videos</font></pre><hr><pre>[cjl-linux@localhost ~]$ ls -la /total 24dr-xr-xr-x.  17 root root  224 May 26 06:58 <font color="#005FFF">.</font>dr-xr-xr-x.  17 root root  224 May 26 06:58 <font color="#005FFF">..</font>lrwxrwxrwx.   1 root root    7 May 26 06:42 <font color="#00FFFF">bin</font> -&gt; <font color="#005FFF">usr/bin</font>dr-xr-xr-x.   5 root root 4096 May 27 02:42 <font color="#005FFF">boot</font>drwxr-xr-x.  19 root root 3280 May 27 03:26 <font color="#005FFF">dev</font>drwxr-xr-x. 143 root root 8192 May 27 03:26 <font color="#005FFF">etc</font>drwxr-xr-x.   3 root root   23 May 26 06:59 <font color="#005FFF">home</font>lrwxrwxrwx.   1 root root    7 May 26 06:42 <font color="#00FFFF">lib</font> -&gt; <font color="#005FFF">usr/lib</font>lrwxrwxrwx.   1 root root    9 May 26 06:42 <font color="#00FFFF">lib64</font> -&gt; <font color="#005FFF">usr/lib64</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">media</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">mnt</font>drwxr-xr-x.   3 root root   16 May 26 06:49 <font color="#005FFF">opt</font>dr-xr-xr-x. 225 root root    0 May 27 03:26 <font color="#005FFF">proc</font>dr-xr-x---.   3 root root  151 May 26 07:00 <font color="#005FFF">root</font>drwxr-xr-x.  41 root root 1260 May 27 03:28 <font color="#005FFF">run</font>lrwxrwxrwx.   1 root root    8 May 26 06:42 <font color="#00FFFF">sbin</font> -&gt; <font color="#005FFF">usr/sbin</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">srv</font>dr-xr-xr-x.  13 root root    0 May 27 03:26 <font color="#005FFF">sys</font>drwxrwxrwt.  20 root root 4096 May 27 03:53 <span style="background-color:#8AE234"><font color="#000000">tmp</font></span>drwxr-xr-x.  13 root root  155 May 26 06:42 <font color="#005FFF">usr</font>drwxr-xr-x.  21 root root 4096 May 26 07:00 <font color="#005FFF">var</font></pre><h3 id="h用易于阅读的方式列出文件大小-如K-M-G"><code>-h</code>用易于阅读的方式列出文件大小,如<code>K</code>,<code>M</code>,<code>G</code></h3><p><code>-h</code>必须搭配<code>-l</code>使用</p><pre>[cjl-linux@localhost ~]$ ls -lh /total 24Klrwxrwxrwx.   1 root root    7 May 26 06:42 <font color="#00FFFF">bin</font> -&gt; <font color="#005FFF">usr/bin</font>dr-xr-xr-x.   5 root root 4.0K May 27 02:42 <font color="#005FFF">boot</font>drwxr-xr-x.  19 root root 3.3K May 27 03:26 <font color="#005FFF">dev</font>drwxr-xr-x. 143 root root 8.0K May 27 03:26 <font color="#005FFF">etc</font>drwxr-xr-x.   3 root root   23 May 26 06:59 <font color="#005FFF">home</font>lrwxrwxrwx.   1 root root    7 May 26 06:42 <font color="#00FFFF">lib</font> -&gt; <font color="#005FFF">usr/lib</font>lrwxrwxrwx.   1 root root    9 May 26 06:42 <font color="#00FFFF">lib64</font> -&gt; <font color="#005FFF">usr/lib64</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">media</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">mnt</font>drwxr-xr-x.   3 root root   16 May 26 06:49 <font color="#005FFF">opt</font>dr-xr-xr-x. 230 root root    0 May 27 03:26 <font color="#005FFF">proc</font>dr-xr-x---.   3 root root  151 May 26 07:00 <font color="#005FFF">root</font>drwxr-xr-x.  41 root root 1.3K May 27 03:28 <font color="#005FFF">run</font>lrwxrwxrwx.   1 root root    8 May 26 06:42 <font color="#00FFFF">sbin</font> -&gt; <font color="#005FFF">usr/sbin</font>drwxr-xr-x.   2 root root    6 Apr 10  2018 <font color="#005FFF">srv</font>dr-xr-xr-x.  13 root root    0 May 27 03:26 <font color="#005FFF">sys</font>drwxrwxrwt.  20 root root 4.0K May 27 03:53 <span style="background-color:#8AE234"><font color="#000000">tmp</font></span>drwxr-xr-x.  13 root root  155 May 26 06:42 <font color="#005FFF">usr</font>drwxr-xr-x.  21 root root 4.0K May 26 07:00 <font color="#005FFF">var</font></pre><h2 id="2-cd和pwd命令">2.cd和pwd命令</h2><p>cd:change directory</p><p><code>cd [linux路径]</code></p><ul><li>cd不需要选项,只有参数,表示要切换到哪个目录</li><li>cd命令直接执行,不写参数,表示回到用户的home目录</li></ul><pre>[cjl-linux@localhost ~]$ ls<font color="#005FFF">Desktop</font>  <font color="#005FFF">Documents</font>  <font color="#005FFF">Downloads</font>  <font color="#005FFF">Music</font>  <font color="#005FFF">Pictures</font>  <font color="#005FFF">Public</font>  <font color="#005FFF">Templates</font>  <font color="#005FFF">Videos</font>[cjl-linux@localhost ~]$ cd /[cjl-linux@localhost /]$ ls<font color="#00FFFF">bin</font>  <font color="#005FFF">boot</font>  <font color="#005FFF">dev</font>  <font color="#005FFF">etc</font>  <font color="#005FFF">home</font>  <font color="#00FFFF">lib</font>  <font color="#00FFFF">lib64</font>  <font color="#005FFF">media</font>  <font color="#005FFF">mnt</font>  <font color="#005FFF">opt</font>  <font color="#005FFF">proc</font>  <font color="#005FFF">root</font>  <font color="#005FFF">run</font>  <font color="#00FFFF">sbin</font>  <font color="#005FFF">srv</font>  <font color="#005FFF">sys</font>  <span style="background-color:#8AE234"><font color="#000000">tmp</font></span>  <font color="#005FFF">usr</font>  <font color="#005FFF">var</font>[cjl-linux@localhost /]$ cd[cjl-linux@localhost ~]$ ls<font color="#005FFF">Desktop</font>  <font color="#005FFF">Documents</font>  <font color="#005FFF">Downloads</font>  <font color="#005FFF">Music</font>  <font color="#005FFF">Pictures</font>  <font color="#005FFF">Public</font>  <font color="#005FFF">Templates</font>  <font color="#005FFF">Videos</font></pre><p><code>pwd</code>=print work directory</p><p>通过<code>ls</code>来验证当前工作目录是不恰当的</p><p>可以通过<code>pwd</code>命令查看当前所在的工作目录</p><pre>[cjl-linux@localhost ~]$ pwd/home/cjl-linux[cjl-linux@localhost ~]$ cd /[cjl-linux@localhost /]$ pwd/[cjl-linux@localhost /]$ cd /bin[cjl-linux@localhost bin]$ pwd/bin</pre><h2 id="3-相对路径和绝对路径和特殊路径符">3.相对路径和绝对路径和特殊路径符</h2><ul><li><code>cd /home/cjl-linux/Desktop</code>是绝对路径</li><li><code>cd Desktop</code>是相对路径</li></ul><p>返回上一级</p><p>特殊路径符</p><ul><li><code>.</code>表示当前目录<code>cd ./Desktop</code>表示切换到当前目录下的Desktop目录内,和<code>cd Desktop</code>效果一致</li><li><code>..</code>表示上一级目录,例如<code>cd ../..</code>切换到上二级目录</li><li><code>~</code>表示HOME目录,例如<code>cd ~/Desktop</code>切换到HOME内的Desktop目录</li></ul><h2 id="4-mkdir创建目录">4.<code>mkdir</code>创建目录</h2><p><code>mkdir</code>==Make Directory</p><p>语法:<code>mkdir [-p] Linux路径</code></p><p>Linux路径可用绝对路径和相对路径</p><p>-p选项可选,表示自动创建不存在的父目录,适用于创建连续多层级的目录</p><pre>[cjl-linux@localhost ~]$ mkdir test01[cjl-linux@localhost ~]$ ls<font color="#005FFF">Desktop</font>  <font color="#005FFF">Documents</font>  <font color="#005FFF">Downloads</font>  <font color="#005FFF">Music</font>  <font color="#005FFF">Pictures</font>  <font color="#005FFF">Public</font>  <font color="#005FFF">Templates</font>  <font color="#005FFF">test01</font>  <font color="#005FFF">Videos</font></pre><pre>[cjl-linux@localhost ~]$ mkdir -p ./test01/01/02/03</pre><p>注意:创建文件夹需要修改权限,只能在home目录内进行,涉及到权限问题,home外无法成功</p><pre>[cjl-linux@localhost test01]$ mkdir /mytestmkdir: cannot create directory ‘/mytest’: Permission denied</pre><h2 id="5-文件操作命令touch-cat-more">5.文件操作命令<code>touch</code>,<code>cat</code>,<code>more</code></h2><p>touch创建文件</p><p><code>touch Linux路径</code></p><p>touch命令无选项,参数必填,表示要创建的文件路径,相对,绝对,特殊路径符均可以使用</p><pre>[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>[cjl-linux@localhost test01]$ touch test.txt[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>  test.txt</pre><p>linux中文件一般为黑色,文件夹为蓝色</p><p>cat,more查看文件内容</p><p><code>cat linux路径</code> cat没有选项,只有必填参数,参数表示被查看的文件路径,相对,绝对,特殊路径符都可以使用</p><p><code>Ctrl +L</code>可以清空屏幕</p><pre>[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>  test.txt[cjl-linux@localhost test01]$ cat test.txt#include&lt;iostream&gt;using namespace std;int main(){cout&lt;&lt;&quot;hello world!&quot;&lt;&lt;endl;return 0;}</pre><p>more命令可以查看文件内容,与cat不同的是:</p><ul><li>cat是直接将内容全部显示出来</li><li>more支持翻页,如果文件内容过多,可以一页页地展示</li></ul><p>可以尝试查看<code>more /etc/services</code></p><p>空格翻页,q退出查看</p><h2 id="6-cp复制-mv移动-rm删除命令">6.<code>cp</code>复制,<code>mv</code>移动,<code>rm</code>删除命令</h2><h3 id="cp命令">cp命令:</h3><p><code>cp [-r] 参数1 参数2</code></p><p>-r选项可选,用于复制文件夹使用,表示递归</p><p>参数1,Linux路径,表示被复制的文件或文件夹</p><p>参数2,Linux路径,表示要复制去的地方</p><pre>[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>  test.txt[cjl-linux@localhost test01]$ cp test.txt test2.txt[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>  test2.txt  test.txt</pre><pre>[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">20230528</font>  test2.txt  test.txt[cjl-linux@localhost test01]$ cp -r 01 01cpy[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">01cpy</font>  <font color="#005FFF">20230528</font>  test2.txt  test.txt</pre><h3 id="mv命令">mv命令</h3><p>mv命令来自move</p><p><code>mv 参数1 参数2</code> 没有可选的选项</p><p>参数1表示被移动的文件或文件夹</p><p>参数2表示要移动去的地方,如果目标不存在,则进行改名,确保目标存在</p><pre>[cjl-linux@localhost test01]$ ls<font color="#005FFF">01</font>  <font color="#005FFF">01cpy</font>  <font color="#005FFF">20230528</font>  test2.txt  test.txt[cjl-linux@localhost test01]$ mv test.txt 01/02/[cjl-linux@localhost test01]$ cd 01/02[cjl-linux@localhost 02]$ ls<font color="#005FFF">03</font>  test.txt</pre><p><code>mv</code>可以用于改名</p><pre>[cjl-linux@localhost Desktop]$ lstest3.txt[cjl-linux@localhost Desktop]$ mv test3.txt test.txt[cjl-linux@localhost Desktop]$ lstest.txt</pre><p>移动文件夹</p><pre>[cjl-linux@localhost Desktop]$ mv ../test01/01 .</pre><h3 id="rm命令">rm命令</h3><p>rm来自单词remove</p><p><code>rm [-r -f] 参数1 参数2 参数3 ....</code></p><p>同cp命令一样,-r选项用于删除文件夹</p><p>-f表示force,强制删除(不会弹出提示确认信息)</p><ul><li>普通用户删除内容不会弹出提示,只有root管理员用户删除内容会有提示</li><li>所以一般用户用不到-f选项</li></ul><p>参数1,参数2,参数3…表示要删除的文件或1文件夹路径,用空格分开</p><pre>[cjl-linux@localhost Desktop]$ ls<font color="#005FFF">01</font>  test01.txt  test.txt[cjl-linux@localhost Desktop]$ rm test.txt[cjl-linux@localhost Desktop]$ ls<font color="#005FFF">01</font>  test01.txt</pre><p>rm支持通配符*,用来模糊匹配</p><ul><li>test*匹配任何以test开头的内容</li><li>*test匹配任何以test结尾的内容</li><li><code>*test*</code>表示匹配任何包含test的内容</li></ul><p>可以通过<code>su - root</code>,并输入密码123456(和普通用户默认一样)临时切换到root用户体验</p><p>通过输入exit命令,退回普通用户(临时用root,用完记得退出)</p><pre>[root@localhost test01]# ls<font color="#005FFF">01cpy</font>  <font color="#005FFF">20230528</font>  test1.txt  test2.txt  test3.txt[root@localhost test01]# rm test1.txtrm: remove regular file ‘test1.txt’? y[root@localhost test01]# ls<font color="#005FFF">01cpy</font>  <font color="#005FFF">20230528</font>  test2.txt  test3.txt</pre><h2 id="7-查找命令which和find">7.查找命令<code>which</code>和<code>find</code></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">cjl@debian:~$ which pwd<br>/usr/bin/pwd<br></code></pre></td></tr></table></figure><pre>[cjl-linux@localhost ~]$ which pwd/usr/bin/pwd</pre><p><code>cd</code>,<code>pwd</code>等命令相当于二进制程序，可以用<code>which</code>命令找到它们文件的存放地址</p><p>which只针对  <strong>命令</strong>  的程序文件查找</p><p>find用于按文件名查找文件，语法：</p><p><code>find 起始路径 -name &quot;被查找文件名&quot;</code></p><p>为了在整个系统进行搜索，要切换到root用户获得管理员权限<code>su - root</code>或<code>su root</code>(亲测可行)</p><p><code>su</code>命令意思是switch user</p><p>在根目录查找名字为test的文件</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">root<span class="hljs-variable">@debian</span><span class="hljs-symbol">:/home/cjl</span><span class="hljs-comment"># find / -name &quot;test&quot;</span><br>/usr/lib/python3.<span class="hljs-number">11</span>/test<br>/usr/bin/test<br>root<span class="hljs-variable">@debian</span><span class="hljs-symbol">:/home/cjl</span><span class="hljs-comment"># </span><br></code></pre></td></tr></table></figure><pre>[cjl-linux@localhost ~]$ su rootPassword: [root@localhost cjl-linux]# find / -name &quot;test&quot;find: ‘/run/user/1000/gvfs’: Permission denied/usr/bin/test/usr/lib/modules/3.10.0-957.el7.x86_64/kernel/drivers/ntb/test/usr/lib/alsa/init/test/usr/lib64/python2.7/test/usr/lib64/python2.7/unittest/test/usr/share/espeak-data/voices/test/usr/src/kernels/3.10.0-957.el7.x86_64/drivers/ntb/test/usr/src/kernels/3.10.0-957.el7.x86_64/include/config/test/usr/src/kernels/3.10.0-957.el7.x86_64/lib/raid6/test</pre><h3 id="通配符">通配符</h3><p>使用通配符*来做模糊查询</p><p><code>test*</code>匹配任何以<code>test</code>开头的内容</p><p><code>*test</code>匹配任何以<code>test</code>结尾的内容</p><p><code>*test*</code>匹配任何包含<code>test</code>的内容</p><pre>[root@localhost ~]# find / -name &quot;*test&quot;</pre><p>…</p><h3 id="find命令按照大小查找">find命令按照大小查找</h3><p><code>find 起始路径 -size +|-n [kMG]</code></p><p>+,-表示大于和小于</p><p>n表示大小数字</p><p>kMG表示大小单位,  k(<strong>小写字母</strong>)表示kB ,  M表示MB,   G表示GB</p><p>查找小于10kB的文件:<code>find / -size -10k</code></p><p>查找大于100MB的文件:<code>find / -size +100M</code></p><p>查找大于1GB的文件:<code>find / -size +1G</code></p><p>注:   文件很多输出不停   ,   用快捷键<code>ctrl+C</code>可以强制停止输出`</p><h3 id="passwd修改密码">passwd修改密码</h3><p>在root用户下</p><p><code>passwd</code>修改root密码</p><p><code>passwd cjl-linux</code>修改用户cjl-linux的密码</p><h2 id="8-grep和wc和管道符">8.grep和wc和管道符</h2><h3 id="grep命令过滤文件内容">grep命令过滤文件内容</h3><p><code>grep [-n] 关键字 文件路径</code></p><ul><li><p>-n  可选,表示在结果中显示匹配的行的行号</p></li><li><p>参数,关键字,必填,表示过滤的关键字, 带有空格或其他特殊符号,建议使用“  ”将关键字包围起来</p></li><li><p>参数,文件路径,必填,表示要过滤的内容的文件路径,==可作为内容输入端口==</p></li></ul><pre>[cjl-linux@localhost ~]$ cat test.txt114514 1919810itheima is a brand of itcastitcast stock code is 003032[cjl-linux@localhost ~]$ grep &quot;itheima&quot; test.txt<font color="#EF2929"><b>itheima</b></font> is a brand of itcast[cjl-linux@localhost ~]$ grep &quot;itcast&quot; test.txtitheima is a brand of <font color="#EF2929"><b>itcast</b></font><font color="#EF2929"><b>itcast</b></font> stock code is 003032[cjl-linux@localhost ~]$ grep -n &quot;code&quot; test.txt<font color="#4E9A06">3</font><font color="#06989A">:</font>itcast stock <font color="#EF2929"><b>code</b></font> is 003032</pre><h3 id="wc命令统计内容数量-统计文件信息">wc命令统计内容数量(统计文件信息)</h3><p>可以通过<code>wc</code>命令统计文件的行数、单词数量等</p><p>语法: <code>wc [-c  -m -l -w]  文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项,  -m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，==可作为内容输入端口==</li></ul><pre>[cjl-linux@localhost ~]$ cat test.txt114514 1919810itheima is a brand of itcastitcast stock code is 003032[cjl-linux@localhost ~]$ wc test.txt 3 13 72 test.txt</pre><p>3表示行数    13表示单词数量(按照空格划分)    59字节数</p><p>包含选项:</p><pre>[cjl-linux@localhost ~]$ wc -c test.txt72 test.txt[cjl-linux@localhost ~]$ wc -m test.txt72 test.txt[cjl-linux@localhost ~]$ wc -l test.txt3 test.txt[cjl-linux@localhost ~]$ wc -w test.txt13 test.txt</pre><h3 id="管道符的概念和使用">管道符的概念和使用</h3><p>管道符：|</p><p>管道符的含义是:将管道符左边命令的结果,作为右边命令的输入</p><pre>[cjl-linux@localhost ~]$ grep itheima test.txt<font color="#EF2929"><b>itheima</b></font> is a brand of itcast[cjl-linux@localhost ~]$ cat test.txt | grep itheima<font color="#EF2929"><b>itheima</b></font> is a brand of itcast[cjl-linux@localhost ~]$ cat test.txt | wc -l3</pre><pre>[cjl-linux@localhost ~]$ ls<font color="#005FFF">Desktop</font>  <font color="#005FFF">Documents</font>  <font color="#005FFF">Downloads</font>  <font color="#005FFF">Music</font>  <font color="#005FFF">Pictures</font>  <font color="#005FFF">Public</font>  <font color="#005FFF">Templates</font>  <font color="#005FFF">test01</font>  test.txt  <font color="#005FFF">Videos</font>[cjl-linux@localhost ~]$ ls | grep test<font color="#EF2929"><b>test</b></font>01<font color="#EF2929"><b>test</b></font>.txt</pre><p>管道符可以嵌套</p><pre>[cjl-linux@localhost ~]$ cat test.txt | grep itcastitheima is a brand of <font color="#EF2929"><b>itcast</b></font><font color="#EF2929"><b>itcast</b></font> stock code is 003032[cjl-linux@localhost ~]$ cat test.txt | grep itcast | grep itheima<font color="#EF2929"><b>itheima</b></font> is a brand of itcast</pre><h2 id="9-echo-tail-重定向符">9.echo-tail-重定向符</h2><h3 id="使用echo命令输出内容">使用echo命令输出内容</h3><p>可以使用echo命令在命令行内输出指定内容</p><p>语法：<code>echo 输出的内容</code></p><p>无需选项，只有一个参数，表示要输出的内容，复杂内容可以用“  ”包围</p><p>演示：在终端上显示： Hello Linux</p><pre>[cjl-linux@localhost ~]$ echo &quot;Hello Linux&quot;Hello Linux</pre><p>带有空格或 \ 等特殊符号，建议使用双引号包围</p><p>因为不包围的话，空格后很容易被识别为参数2，尽管echo不受影响，但是要养成习惯哦</p><pre>[cjl-linux@localhost ~]$ echo Hello LinuxHello Linux</pre><h3 id="反引号ˋ的使用">反引号<code>ˋ</code>的使用</h3><p>看一下如下命令:echo pwd</p><pre>[cjl-linux@localhost ~]$ echo pwdpwd</pre><p>本意是想，输出当前的工作路径，但是pwd被作为普通字符输出了。</p><p>我们可以通过将命令用反引号（通常也称之为飘号)`将其包围</p><p>被`包围的内容，会被作为命令执行，而非普通字符</p><pre>[cjl-linux@localhost ~]$ echo `pwd`/home/cjl-linux</pre><h3 id="重定向符号的使用">重定向符号的使用</h3><p>两个特殊符号，重定向符： &gt;和&gt;&gt;</p><ul><li><p><code>&gt;</code>,将左侧命令的结果，覆盖写入到符号右侧指定的文件中</p></li><li><p><code>&gt;&gt;</code>，将左侧命令的结果，追加写入到符号右侧指定的文件中</p></li></ul><p>示例1:   <code>&gt;</code>    覆盖内容</p><pre>[cjl-linux@localhost ~]$ cat test.txt114514 1919810[cjl-linux@localhost ~]$ echo &quot;hello linux&quot; &gt; test.txt[cjl-linux@localhost ~]$ cat test.txthello linux</pre><p>示例2:   <code>&gt;&gt;</code>   追加内容</p><pre>[cjl-linux@localhost ~]$ echo &quot;114514 1919810&quot; &gt;&gt; test.txt[cjl-linux@localhost ~]$ cat test.txthello linux114514 1919810</pre><pre>[cjl-linux@localhost ~]$ ls &gt;&gt; test.txt[cjl-linux@localhost ~]$ cat test.txthello linux114514 1919810DesktopDocumentsDownloadsMusicPicturesPublicTemplatestest01test.txtVideos</pre><h3 id="tail命令跟踪文件更改">tail命令跟踪文件更改</h3><p>使用tail命令，可以查看文件尾部内容，跟踪文件的最新更改，语法如下：</p><p><code>tail [-f -num] Linux路径</code></p><ul><li><p>参数，Linux路径，表示被跟踪的文件路径</p></li><li><p>选项，-f，表示持续跟踪文件的最新更改(follow)</p><p>(这个程序不会自动结束,如果在文件尾部追加内容,屏幕上会自动更新文件的内容)</p><p>快捷键<code>Ctrl+C</code>可以停止该命令的执行</p></li><li><p>选项，-num，表示，查看尾部多少行，不填默认10行</p></li></ul><pre>[cjl-linux@localhost ~]$ ls &gt; test.txt[cjl-linux@localhost ~]$ ls / &gt;&gt;test.txt[cjl-linux@localhost ~]$ tail test.txtoptprocrootrunsbinsrvsystmpusrvar</pre><p>只看5行:</p><pre>[cjl-linux@localhost ~]$ tail -5 test.txtsrvsystmpusrvar</pre><h2 id="10-VI编辑器">10. VI编辑器</h2><p>vi\vim编辑器介绍</p><p>vi\vim是visual interface的简称，是Linux中最经典的文本编辑器</p><p>同图形化界面中的文本编辑器一样,vi是命令行下对文本文件进行编辑的绝佳选择。</p><p>vim 是 vi 的加强版本，兼容 vi 的所有指令，不仅能编辑文本，而且还具有 shell 程序编辑的功能，可以不同颜色的字体来辨别语法的正确性，极大方便了程序的设计和编辑性。</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/010.png" alt="010"></p><p>命令模式</p><p>如果需要通过vi/vim编辑器编辑文件，请通过如下命令：</p><p><code>vi 文件路径</code></p><p><code>vim 文件路径</code></p><p>vim兼容全部的vi功能，后续全部使用vim命令</p><ul><li>如果文件路径表示的文件==不存在==，那么此命令会用于==编辑新文件==</li><li>如果文件路径表示的文件==存在==，那么此命令用于==编辑已有文件==</li></ul><p>通过vi/vim命令编辑文件，会打开一个新的窗口，此时这个窗口就是：命令模式窗口</p><p>命令模式是vi编辑器的入口和出口，如上图</p><ul><li>进入vi编辑器会进入命令模式</li><li>通过命令模式输入键盘指令，可以进入输入模式</li><li>输入模式需要退回到命令模式,然后通过命令可以进入底线命令模式</li></ul><p>在命令模式下</p><ul><li>按两次y,再按一次p,可以复制粘贴当前行</li><li>按两次d,可以删除当前行</li><li>按一次u,可以撤销</li></ul><p>退出时输入wq  ,  w表示保存   ,   q表示退出</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/010-1.png" alt="010-1"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/010-2.png" alt="010-2"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/010-3.png" alt="010-3"></p><p>:set paste 开启时 可以保证在输入模式粘贴时格式不错乱</p><h2 id="11-root用户">11.root用户</h2><p>root用户（超级管理员）</p><p>无论是Windows、MacoS、Linux均采用多用户的管理模式进行权限管理。</p><p>在Linux系统中,拥有最大权限的账户名为: root (超级管理员)</p><p>而在前期,我们一直使用的账户是普通的用户:cjl-linux</p><p>普通用户的权限，一般在其HOME目录内是不受限的</p><p>一旦出了HOME目录,大多数地方,普通用户仅有只读和执行权限,无修改权限</p><h3 id="su和exit命令">su和exit命令</h3><p>在前面，我们接触过su命令切换到root账户。</p><p>su命令就是用于账户切换的系统命令,其来源英文单词： Switch User</p><p>语法：<code>su [-] [用户名]</code></p><ul><li><code>-</code>符号是可选的,表示是否在切换用户后加载环境变量(后续讲解),==建议带上==</li><li>参数：用户名，表示要切换的用户,用户名也可以省略,省略表示切换到root</li><li>切换用户后，可以通过<code>exit</code>或<code>logout</code>命令退回上一个用户，也可以使用快捷键：<code>ctrl +d</code></li><li>使用普通用户，切换到其它用户需要输入密码，如切换到root用户</li><li>使用root用户切换到其它用户，无需密码，可以直接切换</li></ul><h3 id="sudo命令">sudo命令</h3><p>在我们得知root密码的时候，可以通过su命令切换到root得到最大权限。</p><p>但是我们不建议长期使用root用户，避免带来系统损坏。</p><p>我们可以使用sudo命令，为普通的命令授权，临时以root身份执行。</p><p>语法： <code>sudo 其它命令</code></p><p>在其它命令之前，带上sudo，即可为这一条命令临时赋予root授权</p><p>但是并不是所有的用户，都有权利使用sudo,我们==需要为普通用户配置sudo认证==</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/011-1.png" alt="011-1"></p><h2 id="12-用户和用户组">12. 用户和用户组</h2><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/012-1.png" alt="012-1"></p><h3 id="用户组管理">用户组管理</h3><p>以下命令需root用户执行</p><ul><li>创建用户组</li></ul><p><code>groupadd 用户组名</code></p><ul><li>删除用户组</li></ul><p><code>groupdel 用户组名</code></p><p>为后续演示，我们创建一个itcast用户组: groupadd itcast</p><h3 id="用户管理">用户管理</h3><p>以下命令需root用户执行</p><ul><li><p>创建用户</p><p><code>useradd [-g -d] 用户名</code></p><ul><li>选项：-g指定用户的组，不指定-g，会创建同名组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g</li><li>选项：-d指定用户HOME路径，不指定，HOME目录默认在： /home/用户名</li></ul></li><li><p>删除用户</p><p><code>userdel [-r] 用户名</code></p><ul><li>选项：-r，删除用户的HOME目录，不使用-r，删除用户时，HOME目录保留</li></ul></li><li><p>查看用户所属组</p><p><code>id [用户名]</code></p><ul><li>参数:用户名,被查看的用户,如果不提供则查看自身</li></ul></li><li><p>修改用户所属组</p><p><code>usermod -aG</code></p><p>用户组 用户名，将指定用户加入指定用户组</p></li></ul><pre>[root@localhost ~]# useradd test2 -g itcast -d /home/test222[root@localhost ~]# su - test2[test2@localhost ~]$ pwd/home/test222</pre><pre>[root@localhost ~]# userdel test2[root@localhost ~]# cd /home[root@localhost home]# ls<font color="#005FFF">cjl-linux</font>  <font color="#005FFF">test222</font></pre><pre>[root@localhost home]# id uid=0(root) gid=0(root) groups=0(root) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023[root@localhost home]# id cjl-linuxuid=1000(cjl-linux) gid=1000(cjl-linux) groups=1000(cjl-linux)</pre><pre>[root@localhost home]# useradd test4[root@localhost home]# id test4uid=1001(test4) gid=1002(test4) groups=1002(test4)[root@localhost home]# usermod -aG itcast test4[root@localhost home]# id test4uid=1001(test4) gid=1002(test4) groups=1002(test4),1001(itcast)</pre><ul><li><p>查看当前系统中有哪些用户</p><p><code>getent passwd</code></p><p>共有7份信息,  分别是:   用户名:   密码(x):  用户ID:   组ID:   描述信息(无用):  HOME目录:  执行终端(默认bash)</p></li><li><p>查看当前系统中有哪些用户组</p><p>语法： <code>getent group</code></p><p>包含3份信息，组名称：组认证(显示为×)：组ID</p></li></ul><h2 id="13-查看权限控制信息">13.查看权限控制信息</h2><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/13-1.png" alt="13-1"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/13-2.png" alt="13-2"></p><pre>[cjl-linux@localhost ~]$ ls -ltotal 8drwxr-xr-x. 3 cjl-linux cjl-linux  34 May 29 19:18 <font color="#005FFF">Desktop</font>drwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Documents</font>drwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Downloads</font>-rw-rw-r--. 1 cjl-linux cjl-linux  72 Jul  7 06:42 hello.txtdrwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Music</font>drwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Pictures</font>drwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Public</font>drwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Templates</font>drwxrwxr-x. 4 cjl-linux cjl-linux  52 May 29 18:07 <font color="#005FFF">test01</font>-rw-rw-r--. 1 cjl-linux cjl-linux 168 Jul  7 06:16 test.txtdrwxr-xr-x. 2 cjl-linux cjl-linux   6 May 26 07:01 <font color="#005FFF">Videos</font></pre><p>rwx</p><p>那么，rwx到底代表什么呢？</p><ul><li><p>r表示读权限</p></li><li><p>w表示写权限</p></li><li><p>x表示执行权限</p></li></ul><p>针对文件、文件夹的不同, rwx的含义有细微差别</p><ul><li><p>r,针对文件可以查看文件内容</p><ul><li>针对文件夹，可以查看文件夹内容，如ls命令</li></ul></li><li><p>w,针对文件表示可以修改此文件</p><ul><li>针对文件夹，可以在文件夹内：创建、删除、改名等操作</li></ul></li><li><p>x,针对文件表示可以将文件作为程序执行</p><ul><li>针对文件夹，表示可以更改工作目录到此文件夹，即cd进入</li></ul></li></ul><h2 id="14-chmod命令修改权限信息">14.chmod命令修改权限信息</h2><p>我们可以使用chmod命令,修改文件、文件夹的权限信息。</p><p>注意，只有文件、文件夹的所属用户或root用户可以修改。</p><p>语法： <code>chmod [-R] 权限 文件或文件夹</code></p><ul><li>选项：-R，对文件夹内的全部内容应用同样的操作</li></ul><p>示例：</p><ul><li><p><code>chmod u=rwx,g=rx,o=x hello.txt </code>，将文件权限修改为：rwxr-x–x</p><ul><li>其中：u表示user所属用户权限，g表示group组权限，o表示other其它用户权限</li></ul></li><li><p><code>chmod-R u=rwx,g=rx,o=x test</code>, 将文件夹test以及文件夹内全部内容权限设置为： rwxr-x–x</p></li></ul><h3 id="权限的数字序号">权限的数字序号</h3><p>除此之外，还有快捷写法：<code>chmod 751 hello.txt</code></p><p>权限可以用3位数字来代表,第一位数字表示用户权限,第二位表示用户组权限,第三位表示其它用户权限。</p><p>数字的细节如下：r记为4,w记为2,x记为1，可以有：</p><ul><li><p>0:    无任何权限，  即  —</p></li><li><p>1： 仅有×权限，    即 --x</p></li><li><p>2:    仅有w权限 ,     即 -w-</p></li><li><p>3:    有w和x权限,    即 -wx</p></li><li><p>4： 仅有r权限,        即 r–</p></li><li><p>5:    有r和x权限,     即 r-x</p></li><li><p>6:    有r和w权限,    即 rw-</p></li><li><p>7:    有全部权限,     即 rwx</p></li></ul><p>所以751表示： rwx(7) r-x(5)–x(1)</p><h2 id="chown命令修改所属用户">chown命令修改所属用户</h2><p>chown命令change owner</p><p>使用chown命令,可以修改文件、文件夹的所属用户和用户组</p><p><strong>普通用户无法修改所属为其它用户或组，所以此命令只适用于root用户执行</strong></p><p>语法: <code>chown [-R][用户][:][用户组]文件或文件夹</code></p><ul><li><p>选项，-R， 同chmod，对文件夹内全部内容应用相同规则</p></li><li><p>选项，用户，修改所属用户</p></li><li><p>选项，用户组，修改所属用户组</p></li><li><p>：用于分隔用户和用户组</p></li></ul><p>示例：</p><ul><li><p><code>chown root hello.txt</code>, 将hello.txt所属用户修改为root</p></li><li><p><code>chown :root hello.txt</code>,将hello.txt所属用户组修改为root</p></li><li><p><code>chown root:itheima hello.txt</code>, 将hello.txt所属用户修改为root,用户组修改为itheima</p></li><li><p><code>chown -R root test</code>，将文件夹test的所属用户修改为root并对文件夹内全部内容应用同样规则</p></li></ul><h2 id="15-linux各类小技巧快捷键">15.linux各类小技巧快捷键</h2><h3 id="ctrl-c-强制停止">ctrl + c 强制停止</h3><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/15-1.png" alt="15-1"></p><h3 id="ctrl-d退出或登出">ctrl+d退出或登出</h3><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/15-2.png" alt="15-2"></p><pre>[root@localhost ~]# pythonPython 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; print(&quot;hello world&quot;)hello world</pre><h3 id="history查看历史命令">history查看历史命令</h3><p>可以查看历史输入过的全部命令（序号越大，时间距离现在越近）</p><pre>[cjl-linux@localhost ~]$ history | grep ch   72  tou<font color="#EF2929"><b>ch</b></font> test.txt  131  whi<font color="#EF2929"><b>ch</b></font> pwd  136  whi<font color="#EF2929"><b>ch</b></font> cd  143  tou<font color="#EF2929"><b>ch</b></font> test.txt  163  e<font color="#EF2929"><b>ch</b></font>o &quot;Hello Linux&quot;  164  e<font color="#EF2929"><b>ch</b></font>o Hello Linux  165  e<font color="#EF2929"><b>ch</b></font>o pwd  166  e<font color="#EF2929"><b>ch</b></font>o `pwd`  168  e<font color="#EF2929"><b>ch</b></font>o &quot;114514 1919810&quot;&gt; test.txt  170  e<font color="#EF2929"><b>ch</b></font>o &quot;hello linux&quot; &gt; test.txt  172  e<font color="#EF2929"><b>ch</b></font>o &quot;114514 1919810&quot; &gt;&gt; test.txt  201  <font color="#EF2929"><b>ch</b></font>mod u=rwx,g=r,o=w test.txt  211  <font color="#EF2929"><b>ch</b></font>mod 700 test.txt  219  history | grep <font color="#EF2929"><b>ch</b></font></pre><p>使用！自动匹配最近执行过的命令（用!py代替python)   py是第一个以py开头的命令</p><pre>  220  python  221  history  222  pwd  223  ls  224  ls -l  225  history[cjl-linux@localhost ~]$ !pypythonPython 2.7.5 (default, Oct 30 2018, 23:45:53) [GCC 4.8.5 20150623 (Red Hat 4.8.5-36)] on linux2Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</pre><h3 id="ctrl-r历史命令搜索">ctrl+r历史命令搜索</h3><p>如果搜索到的内容是你需要的，那么：</p><ul><li>回车键可以直接执行</li><li>键盘左右键，可以得到此命令（不执行）</li></ul><p>会在history自下而上搜索</p><h3 id="光标移动快捷键">光标移动快捷键</h3><ul><li><p>ctrl + a,跳到命令开头</p></li><li><p>ctrl + e,跳到命令结尾</p></li><li><p>ctrl+键盘左键,向左跳一个单词</p></li><li><p>ctrl + 键盘右键,向右跳一个单词</p></li></ul><h3 id="ctrl-L清屏">ctrl+L清屏</h3><p>clear也有同样效果</p><h2 id="16-软件安装">16.软件安装</h2><h3 id="yum进行软件安装-centOS">yum进行软件安装(centOS)</h3><p>Linux系统的应用商店</p><p>操作系统安装软件有许多种方式，一般分为：</p><ul><li><p>下载安装包自行安装</p><ul><li><p>如 win系统使用 exe文 件、Msi文 件等</p></li><li><p>如Mac系 统 使用 dmg文 件、pkg文 件 等</p></li></ul></li><li><p>系统的应用商店内安装</p><ul><li><p>如 win系 统 有 Microsoft Store商 店</p></li><li><p>如Mac系 统有AppStore商店</p></li></ul></li></ul><p>Linux系统同样支持这两种方式,我们首先,先来学习使用: Linux命令行内的&quot;应用商店&quot;, yum命令安装软件</p><p>.rpm是linux的软件安装包格式</p><p>yum:RPM包软件管理器，用于自动化安装配置Linux软件，并可以自动解决依赖问题。</p><p>语法: <code>yum [-y] [install | remove | search]软件名称</code></p><ul><li><p>选项： -y， 自动确认，无需手动确认安装或卸载过程</p></li><li><p>install: 安装</p></li><li><p>remove: 卸载</p></li><li><p>search: 搜索</p></li></ul><p>yum命令需要root权限哦，可以su切换到root,或使用sudo提权。</p><p>yum命令需要联网</p><h3 id="apt进行软件安装-Ubuntu-debian">apt进行软件安装(Ubuntu,debian)</h3><p>前面学习的各类Linux命令，都是通用的。但是软件安装，CentOS系统和Ubuntu是使用不同的包管理器。</p><p>CentOS使用yum管理器，Ubuntu使用apt管理器</p><p>通过前面学习的WSL环境，我们可以得到Ubuntu运行环境。</p><p>语法：<code>apt [-y] [install | removesearch] 软件名称</code></p><p>用法和yum一致，同样需要root权限</p><ul><li>apt install wget, 安装wget</li><li>apt remove wget, 移除wget</li><li>apt search wget, 搜索wget</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe">cjl<span class="hljs-meta">@debian:$ sudo su-root</span><br>[sudo] password <span class="hljs-keyword">for</span> cjl: <span class="hljs-type"></span><br>root<span class="hljs-meta">@debian:# apt install wget </span><br>Reading <span class="hljs-keyword">package</span> lists... Done <br>Building dependency tree... Done <br>Reading state information... Done <br>wget <span class="hljs-keyword">is</span> already the <span class="hljs-keyword">new</span><span class="hljs-type">est</span> version (<span class="hljs-number">1.21</span><span class="hljs-number">.3</span><span class="hljs-number">-1</span>+b2).<br><span class="hljs-number">0</span> upgraded, <span class="hljs-number">0</span> <span class="hljs-keyword">new</span><span class="hljs-type">ly</span> installed, <span class="hljs-number">0</span> to remove and <span class="hljs-number">0</span> not upgraded.<br></code></pre></td></tr></table></figure><h2 id="17-systemctl控制软件启动关闭">17.systemctl控制软件启动关闭</h2><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/17-01.png" alt="17-01"></p><pre>[cjl-linux@localhost ~]$ systemctl status firewalld<font color="#8AE234"><b>●</b></font> firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)   Active: <font color="#8AE234"><b>active (running)</b></font> since Sat 2023-07-08 02:01:30 PDT; 1h 57min ago     Docs: man:firewalld(1) Main PID: 6557 (firewalld)    Tasks: 2   CGroup: /system.slice/firewalld.service           └─6557 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</pre><p>systemctl命令</p><p>除了内置的服务以外，部分第三方软件安装后也可以以systemctl进行控制。</p><ul><li>yum install -y ntp, 安装ntp软件</li></ul><p>可以通过ntpd服务名，配合systemctl进行控制</p><ul><li>yum install -y httpd, 安装apache服务器软件</li></ul><p>可以通过httpd服务名，配合systemctl进行控制</p><pre>[root@localhost ~]# yum install -y ntp[root@localhost ~]# systemctl status ntpd● ntpd.service - Network Time Service   Loaded: loaded (/usr/lib/systemd/system/ntpd.service; disabled; vendor preset: disabled)   Active: inactive (dead)</pre><p>部分软件安装后没有自动集成到systemctl中，我们可以手动添加。</p><p>这部分内容在后续章节和大家详细讲解。</p><h2 id="18-ln软链接-快捷方式">18.ln软链接(快捷方式)</h2><p>In命令创建软连接</p><p>在系统中创建软链接,可以将文件、文件夹链接到其它位置。</p><p>类似Windows系统中的_快捷方式_</p><p>语法： <code>ln -s 参数1 参数2</code></p><ul><li><p>-s选项，创建软连接</p></li><li><p>参数1：被链接的文件或文件夹</p></li><li><p>参数2: 要链接去的目的地</p></li></ul><p>实例：</p><ul><li><p>In -s /etc/yum.conf ~/yum.conf</p></li><li><p>In -s /etc/yum ~/yum</p></li></ul><p>注：<code>~</code>表示HOME目录</p><pre>[cjl-linux@localhost etc]$ ln -s /etc/yum.conf ~/yum.conf[cjl-linux@localhost etc]$ cd ~/[cjl-linux@localhost ~]$ ls -ltotal 8drwxr-xr-x. 3 cjl-linux cjl-linux 34 May 29 19:18 <font color="#005FFF">Desktop</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Documents</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Downloads</font>-rw-rw-r--. 1 cjl-linux cjl-linux 72 Jul  7 06:42 hello.txtdrwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Music</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Pictures</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Public</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Templates</font>drwxrwxr-x. 4 cjl-linux cjl-linux 52 May 29 18:07 <font color="#005FFF">test01</font>-rwx------. 1 root      cjl-linux 57 Jul  7 22:46 <font color="#00AF00">test.txt</font>drwxr-xr-x. 2 cjl-linux cjl-linux  6 May 26 07:01 <font color="#005FFF">Videos</font>lrwxrwxrwx. 1 cjl-linux cjl-linux 13 Jul  8 04:22 <font color="#00FFFF">yum.conf</font> -&gt; /etc/yum.conf</pre><h2 id="19-日期和时区">19.日期和时区</h2><h3 id="date-命令查看日期时间">date 命令查看日期时间</h3><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/19-1.png" alt="19-1"></p><pre>[cjl-linux@localhost ~]$ date2023年 07月 08日 星期六 04:42:29 PDT[cjl-linux@localhost ~]$ date +%Y-%m-%d2023-07-08[cjl-linux@localhost ~]$ date &quot;+%Y-%m-%d %H:%M:%S&quot;2023-07-08 04:45:13[cjl-linux@localhost ~]$ date +&quot;%Y-%m-%d %H:%M:%S&quot;2023-07-08 04:45:39</pre><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/19-2.png" alt="19-2"></p><h3 id="修改linux系统的时区">修改linux系统的时区</h3><pre>[cjl-linux@localhost ~]$ su - 密码：上一次登录：六 7月  8 04:38:25 PDT 2023pts/0 上[root@localhost ~]# rm -f /etc/localtime [root@localhost ~]# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime[root@localhost ~]# dateSat Jul  8 19:59:18 CST 2023</pre><h3 id="手动使用ntp进行时间同步和校准">手动使用ntp进行时间同步和校准</h3><pre>[root@localhost ~]# ntpdate -u ntp.aliyun.com 8 Jul 20:04:29 ntpdate[14028]: adjust time server 203.107.6.88 offset 0.001643 sec</pre><h2 id="20-IP地址和主机名">20.IP地址和主机名</h2><h3 id="IP地址">IP地址</h3><p>每一台联网的电脑都会有一个地址，用于和其它计算机进行通讯</p><p>IP地址主要有2个版本, V4版本和V6版本(V6很少用,课程暂不涉及)</p><p>IPv4版本的地址格式是: a.b.c.d,其中abcd表示0-255的数字,如192.168.88.101就是一个标准的IP地址</p><p>可以通过命令: ifconfig,查看本机的ip地址,如无法使用ifconfig命令,可以安装: yum -y install net-tools</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cjl</span>@CJL的Huawei:~$ ifconfig<br><span class="hljs-attribute">eth0</span>: flags=<span class="hljs-number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="hljs-number">1500</span><br>        <span class="hljs-attribute">inet</span> <span class="hljs-number">172.22.139.108</span>  netmask <span class="hljs-number">255.255.240.0</span>  broadcast <span class="hljs-number">172.22.143.255</span><br>        <span class="hljs-attribute">inet6</span> fe80::<span class="hljs-number">215</span>:<span class="hljs-number">5</span>dff:febf:<span class="hljs-number">629</span>b  prefixlen <span class="hljs-number">64</span>  scopeid <span class="hljs-number">0</span>x20&lt;link&gt;<br>        <span class="hljs-attribute">ether</span> <span class="hljs-number">00</span>:<span class="hljs-number">15</span>:<span class="hljs-number">5</span>d:bf:<span class="hljs-number">62</span>:<span class="hljs-number">9</span>b  txqueuelen <span class="hljs-number">1000</span>  (Ethernet)<br>        <span class="hljs-attribute">RX</span> packets <span class="hljs-number">179</span>  bytes <span class="hljs-number">219537</span> (<span class="hljs-number">219</span>.<span class="hljs-number">5</span> KB)<br>        <span class="hljs-attribute">RX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span>  overruns <span class="hljs-number">0</span>  frame <span class="hljs-number">0</span><br>        <span class="hljs-attribute">TX</span> packets <span class="hljs-number">98</span>  bytes <span class="hljs-number">6788</span> (<span class="hljs-number">6</span>.<span class="hljs-number">7</span> KB)<br>        <span class="hljs-attribute">TX</span> errors <span class="hljs-number">0</span>  dropped <span class="hljs-number">0</span> overruns <span class="hljs-number">0</span>  carrier <span class="hljs-number">0</span>  collisions <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>可知IP地址为<code>172.22.139.108</code></p><h3 id="特殊IP地址">特殊IP地址</h3><ul><li>127.0.0.1   用于指代本机</li><li>0.0.0.0     ,特殊IP地址<ul><li>可以用于指代本机</li><li>可以在端口绑定中用来确定绑定关系(后续讲解)</li><li>在一些IP地址限制中，表示所有IP的意思，如放行规则设置为0.0.0.0，表示允许任意IP访问</li></ul></li></ul><h3 id="主机名">主机名</h3><p>每一台电脑除了对外联络地址（IP地址)以外,也可以有一个名字，称之为主机名</p><p>无论是Windows或Linux系统,都可以给系统设置主机名</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">cjl<span class="hljs-variable">@CJL</span>的<span class="hljs-title class_">Huawei</span><span class="hljs-symbol">:~</span><span class="hljs-variable">$ </span>hostname<br><span class="hljs-variable constant_">CJL</span>的<span class="hljs-title class_">Huawei</span><br></code></pre></td></tr></table></figure><h3 id="修改主机名">修改主机名</h3><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/20-1.png" alt="20-1"></p><pre>[root@localhost ~]# hostnamelocalhost.localdomain[root@localhost ~]# hostnamectl set-hostname &quot;CJL Linux&quot;[root@localhost ~]# hostnamecjllinux</pre><h3 id="域名解析">域名解析</h3><p>IP地址实在是难以记忆， 有没有什么办法可以通过主机名或替代的字符地址去代替数字化的IP地址呢？</p><p>实际上，我们一直都是通过字符化的地址去访问服务器，很少指定IP地址</p><p>比如,我们在浏览器内打开: <a href="http://www.baidu.com">www.baidu.com</a>,会打开百度的网址</p><p>其中，<a href="http://www.baidu.com">www.baidu.com</a>，是百度的网址，我们称之为：域名</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/20-2.png" alt="20-2"></p><h2 id="21-配置linux固定IP地址">21.配置linux固定IP地址</h2><h3 id="为什么需要固定IP">为什么需要固定IP</h3><p>当前我们虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。</p><p>DHCP:动态获取IP地址,即每次重启设备后都会获取一次,可能导致IP地址频繁变更</p><p>原因1:办公电脑IP地址变化无所谓,但是我们要远程连接到Linux系统,如果IP地址经常变化我们就要频繁修改适配很麻烦</p><p>原因2:在刚刚我们配置了虚拟机IP地址和主机名的映射,如果IP频繁更改,我们也需要频繁更新映射关系</p><p>综上所述，我们需要IP地址固定下来，不要变化了。</p><p>在VMware Workstation中配置固定IP</p><p>配置固定IP需要2个大步骤：</p><ol><li>在VMware Workstation (或Fusion)中配置IP地址网关和网段(IP地址的范围)</li><li>在Linux系统中手动修改配置文件,固定IP</li></ol><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/21-1.png" alt="21-1"></p><pre>[cjl-linux@cjllinux etc]$ ifconfigens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 192.168.88.130  netmask 255.255.255.0  broadcast 192.168.88.255</pre><h2 id="21-网络请求和下载">21.网络请求和下载</h2><h3 id="1-掌握使用ping命令检查服务器是否可联通">1.掌握使用ping命令检查服务器是否可联通</h3><p>可以通过ping命令,检查指定的网络服务器是否是可联通状态</p><p>语法： <code>ping [-c num] ip或主机名</code></p><p>选项： -c， 检查的次数，不使用-c选项，将无限次数持续检查</p><p>参数：ip或主机名，被检查的服务器的ip地址或主机名地址</p><h3 id="2-掌握使用wget命令下载文件">2.掌握使用wget命令下载文件</h3><p>wget是非交互式的文件下载器,可以在命令行内下载网络文件</p><p>语法： <code>wget [-b] url</code></p><p>选项：-b,可选，后台下载，会将日志写入到当前工作目录的wget-log</p><p>文件参数：url，下载链接</p><h3 id="3-掌握使用curl命令发起网络请求">3.掌握使用curl命令发起网络请求</h3><p>示例：</p><p>向cip.cc发起网络请求: <code>curl cip.cc</code></p><p>向python.itheima.com发起网络请求: <code>curl python.itheima.com</code>(会得到网站的html代码)</p><p>通过curl下载hadoop-3.3.0安装包: <code>curl-O http://archive.apache.org/dist/hadoop/common/hadoop3.3.0/hadoop-3.3.0.tar.gz</code></p><pre>[cjl-linux@cjllinux ~]$ curl cip.ccIP: 58.249.112.87地址: 中国  广东  广州运营商: 联通</pre><p>数据二: 广东省广州市 | 联通</p><p>数据三: 中国广东省广州市 | 联通</p><p>URL: <a href="http://www.cip.cc/58.249.112.87">http://www.cip.cc/58.249.112.87</a></p><h2 id="22-端口">22.端口</h2><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/22-1.png" alt="22-1"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/22-2.png" alt="22-2"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/22-3.png" alt="image-20230711193430563"></p><p>1.什么是端口？</p><p>端口是指计算机和外部交互的出入口，可以分为物理端口和虚拟端口</p><ul><li><p>物理端口：USB、HDMI、DP、VGA、RJ45等</p></li><li><p>虚拟端口：操作系统和外部交互的出入口</p></li></ul><p>IP只能确定计算机,通过端口才能锁定要交互的程序</p><p>2.端口的划分</p><ul><li><p>公认端口：1~1023，用于系统内置或常用知名软件绑定使用</p></li><li><p>注册端口：1024~49151，用于松散绑定使用（用户自定义）</p></li><li><p>动态端口：49152~65535，用于临时使用（多用于出口)</p></li></ul><p>3.查看端口占用</p><ul><li><p><code>nmap IP地址</code>，查看指定IP的对外暴露端口</p></li><li><p>``netstat-anp | grep 端口号`,查看本机指定端口号的占用情况</p></li></ul><h2 id="23-进程">23.进程</h2><p>程序运行在操作系统中,是被操作系统所管理的。</p><p>为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个：进程</p><p>并会为每一个进程都分配一个独有的:进程ID(进程号)</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/23-1.png" alt="23-1"></p><h3 id="关闭进程">关闭进程</h3><p>在Windows系统中,可以通过任务管理器选择进程后,点击结束进程从而关闭它。</p><p>同样，在Linux中，可以通过kill命令关闭进程。</p><p>语法: <code>kill [-9] 进程ID</code></p><p>选项：-9，表示强制关闭进程。不使用此选项会向进程发送信号要求其关闭，但是否关闭看进程自身的处理机制。</p><p>命令关闭:</p><p>窗口1:</p><pre>[cjl-linux@cjllinux ~]$ tail已终止</pre><p>窗口2:</p><pre>[cjl-linux@cjllinux ~]$ ps -ef | grep tailcjl-lin+  11617   9258  0 22:03 pts/0    00:00:00 <font color="#EF2929"><b>tail</b></font>cjl-lin+  11619  11517  0 22:03 pts/1    00:00:00 grep --color=auto <font color="#EF2929"><b>tail</b></font>[cjl-linux@cjllinux ~]$ kill 11617</pre><p>强制关闭:</p><p>窗口1:</p><pre>[cjl-linux@cjllinux ~]$ tail已杀死</pre><p>窗口2:</p><pre>[cjl-linux@cjllinux ~]$ ps -ef | grep tailcjl-lin+  11662   9258  0 22:05 pts/0    00:00:00 <font color="#EF2929"><b>tail</b></font>cjl-lin+  11665  11517  0 22:05 pts/1    00:00:00 grep --color=auto <font color="#EF2929"><b>tail</b></font>[cjl-linux@cjllinux ~]$ kill -9 11662</pre><h2 id="24-主机状态监控">24.主机状态监控</h2><h3 id="top查看系统资源占用">top查看系统资源占用</h3><p>可以通过top命令查看CPU、内存使用情况,类似Windows的任务管理器</p><p>默认每5秒刷新一次,语法：直接输入top即可,按q或ctrl + c退出</p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/24-1.png" alt="24-1"></p><p><img src="./linux%E7%AC%94%E8%AE%B0.assets/24-2.png" alt="24-2"></p><h3 id="top命令选项">top命令选项</h3><p>top命令也支持选项：</p><p>选项 功能</p><p>-p 只显示某个进程的信息</p><p>-d 设置刷新时间，默认是5s</p><p>-c 显示产生进程的完整命令,默认是进程名</p><p>-n 指定刷新次数,比如<code>top -n 3</code>,刷新输出3次后退出</p><p>-b 以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件,比如 <code>top -b -n 3 &gt; /tmp/top.tmp</code></p><p>-i  不显示任何闲置（idle)或无用（zombie) 的进程</p><p>-u 查找特定用户启动的进程</p><h3 id="top交互式选项">top交互式选项</h3><p>当top以交互式运行(非-b选项启动),可以用以下交互式命令进行控制</p><p>按键    功能</p><p>h键 按下h键，会显示帮助画面</p><p>c键 按下c键,会显示产生进程的完整命令,等同于-c参数,再次按下c键,变为默认显示</p><p>f键  按下f键,可以选择需要展示的项目</p><p>M键按下M键,根据驻留内存大小(RES)排序</p><p>P键 按下P键，根据CPU使用百分比大小进行排序</p><p>T键 按下T键，根据时间/累计时间进行排序</p><p>E键 按下E键，切换顶部内存显示单位</p><p>e键 按下e键，切换进程内存显示单位</p><p>l键  按下l键，切换显示平均负载和启动时间信息。</p><p>i键  按下i键,不显示闲置或无用的进程,等同于-i参数，再次按下,变为默认显示</p><p>t键  按下t键，切换显示CPU状态信息m键按下m键，切换显示内存信息</p><h3 id="df磁盘信息监控">df磁盘信息监控</h3><p>使用df命令,可以查看硬盘的使用情况</p><p>语法： <code>df [-h]</code></p><p>选项： -h,以更加人性化的单位显示</p><pre>[cjl-linux@cjllinux ~]$ df -h文件系统        容量  已用  可用 已用% 挂载点/dev/sda3        38G  6.0G   32G   16% /devtmpfs        895M     0  895M    0% /devtmpfs           910M     0  910M    0% /dev/shmtmpfs           910M   11M  900M    2% /runtmpfs           910M     0  910M    0% /sys/fs/cgroup/dev/sda1       297M  157M  140M   53% /boottmpfs           182M   32K  182M    1% /run/user/1000</pre><p>磁盘信息监控</p><p>可以使用iostat查看CPU、磁盘的相关信息</p><p>语法:<code>iostat [-x] [num1] [num2]</code></p><p>选项： -x， 显示更多信息</p><p>num1:数字,刷新间隔,</p><p>num2:数字,刷新几次</p><p><strong>(后面的图片都存在云端了，感谢黑马程序员:smile:)</strong></p><h3 id="iostat命令">iostat命令</h3><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h3 id="sar命令">sar命令</h3><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="25-环境变量">25.环境变量</h2><p>在讲解which命令的时候,我们知道使用的一系列命令其实本质上就是一个个的可执行程序。</p><p>比如，cd命令的本体就是: /usr/bin/cd这个程序文件。</p><p>我们是否会有疑问，为何无论当前工作目录在哪里，都能执行: /usr/bin/cd这个程序呢？</p><p>环境变量是操作系统（Windows、Linux、Mac）在运行的时候，记录的一些关键性信息，用以辅助系统运行。</p><p>在Linux系统中执行：env命令即可查看当前系统中记录的环境变量</p><p>环境变量是一种KeyValue型结构</p><h3 id="环境变量：PATH">环境变量：PATH</h3><p>在前面提出的问题中，我们说无论当前工作目录是什么，都能执行/usr/bin/cd这个程序，这个就是借助环境变量中：PATH这个项目的值来做到的。</p><pre>[cjl-linux@cjllinux ~]$ env | grep PATH<font color="#EF2929"><b>PATH</b></font>=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/cjl-linux/.local/bin:/home/cjl-linux/binWINDOW<font color="#EF2929"><b>PATH</b></font>=1</pre><p>当执行任何命令，都会按照顺序，从上述路径中搜索要执行的程序的本体</p><p>比如执行cd命令，就从第三个目录/usr/bin中搜索到了cd命令，并执行</p><h3 id="符号">$符号</h3><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><pre>[cjl-linux@cjllinux ~]$ echo $PATH/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/home/cjl-linux/.local/bin:/home/cjl-linux/bin</pre><h3 id="自行设置环境变量">自行设置环境变量</h3><p>PATH记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><ul><li><p>临时设置：export 变量名=变量值</p><pre>[cjl-linux@cjllinux ~]$ export MYNAME=CJL[cjl-linux@cjllinux ~]$ echo &quot;$MYNAME is handsome&quot;CJL is handsome</pre><p>重启终端窗口后，临时设置的环境变量就不再可用</p></li><li><p>永久设置：</p><ul><li><p>针对用户，设置用户HOME目录内：<code>~/.bashrc</code>文件</p><pre><font color="#3465A4"># .bashrc</font><font color="#3465A4"># Source global definitions</font><font color="#AF5F00">if [</font> <font color="#AF5F00">-f</font> /etc/bashrc <font color="#AF5F00">]</font>; <font color="#AF5F00">then</font><font color="#AF5F00">        . </font>/etc/bashrc<font color="#AF5F00">fi</font><p><font color="#3465A4"># Uncomment the following line if you don't like systemctl's auto-paging feature:</font><br><font color="#3465A4"># export SYSTEMD_PAGER=</font></p><p><font color="#3465A4"># User specific aliases and functions</font><br><font color="#AF5F00">export</font><font color="#06989A"> MYNAME=CJL</font></p><p>然后用<code>source .bashrc</code>使更改生效</p></li><li><p>针对全局，设置<code>/etc/profile</code></p></li><li><p>并通过语法：source 配置文件，进行立刻生效，或重新登录FinalShell生效</p></li></ul></li></ul><h3 id="自定义环境变量PATH">自定义环境变量PATH</h3><p>环境变量PATH这个项目里面记录了系统执行命令的搜索路径。</p><p>这些搜索路径我们也可以自行添加到PATH中去。</p><p>测试：</p><p>•在当前HOME目录内创建文件夹，myenv，在文件夹内创建文件mkhaha</p><p>•通过vim编辑器，在mkhaha文件内填入：echo 哈哈哈哈哈</p><p>完成上述操作后，随意切换工作目录，执行mkhaha命令尝试一下，会发现无法执行</p><p>•修改PATH的值</p><p>临时修改PATH：export PATH=$PATH:/home/itheima/myenv，再次执行mkhaha，无论在哪里都能执行了</p><p>或将export PATH=$PATH:/home/itheima/myenv，填入用户环境变量文件或系统环境变量文件中去</p><h2 id="26-上传和下载">26.上传和下载</h2><p>我们可以通过FinalShell工具，方便地和虚拟机进行数据交换。</p><p>在FinalShell软件的下方窗体中，提供了Linux的文件系统视图，可以方便的：</p><p>•浏览文件系统，找到合适的文件，右键点击下载，即可传输到本地电脑</p><p>•浏览文件系统，找到合适的目录，将本地电脑的文件拓展进入，即可方便的上传数据到Linux中</p><h3 id="rz-sz命令">rz,sz命令</h3><p>当然，除了通过FinalShell的下方窗体进行文件的传输以外，也可以通过rz、sz命令进行文件传输。</p><p>rz、sz命令需要安装，可以通过：yum -y install lrzsz，即可安装。</p><p>rz命令，进行上传，语法：直接输入rz即可</p><p>sz命令进行下载，语法：sz 要下载的文件</p><h2 id="27-压缩文件">27.压缩文件</h2><p>市面上有非常多的压缩格式</p><p>•zip格式：Linux、Windows、MacOS，常用</p><p>•7zip：Windows系统常用</p><p>•rar：Windows系统常用</p><p>•tar：Linux、MacOS常用</p><p>•gzip：Linux、MacOS常用</p><p>在Windows系统中常用的软件如：winrar、bandizip等软件，都支持各类常见的压缩格式，这里不多做讨论。</p><p>我们现在要学习，如何在Linux系统中操作：tar、gzip、zip这三种压缩格式</p><p>完成文件的压缩、解压操作</p><h3 id="tar命令">tar命令</h3><p>Linux和Mac系统常用有2种压缩格式，后缀名分别是：</p><p>•.tar，称之为tarball，归档文件，即简单的将文件组装到一个.tar的文件内，并没有太多文件体积的减少，仅仅是简单的封装</p><p>•.gz，也常见为.tar.gz，gzip格式压缩文件，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</p><p>针对这两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>语法：</p><p>•-c，(create)创建压缩文件，用于压缩模式</p><p>•-v，显示压缩、解压过程，用于查看进度</p><p>•-x，解压模式</p><p>•-f，要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</p><p>•-z，gzip模式，不使用-z就是普通的tarball格式</p><p>•-C，选择解压的目的地，用于解压模式</p><h4 id="压缩">压缩</h4><p>tar的常用组合为：</p><p>•tar -cvf test.tar 1.txt 2.txt 3.txt</p><p>将1.txt 2.txt 3.txt 压缩到test.tar文件内</p><p>•tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</p><p>将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</p><p>注意：</p><p>•-z选项如果使用的话，一般处于选项位第一个</p><p>•-f选项，必须在选项位最后一个</p><h4 id="解压">解压</h4><p>常用的tar解压组合有</p><p>•tar -xvf test.tar</p><p>解压test.tar，将文件解压至当前目录</p><p>•tar -xvf test.tar -C /home/itheima</p><p>解压test.tar.gz，将文件解压至指定目录（/home/itheima）</p><p>•tar -zxvf test.tar.gz -C /home/itheima</p><p>以Gzip模式解压test.tar.gz，将文件解压至指定目录（/home/itheima）</p><p>注意：</p><p>•-f选项，必须在选项组合体的最后一位</p><p>•-z选项，建议在开头位置</p><p>•-C选项单独使用，和解压所需的其它参数分开</p><h3 id="zip命令压缩">zip命令压缩</h3><p>可以使用zip命令，压缩文件为zip压缩包</p><p>语法：</p><p>•-r，被压缩的包含文件夹的时候，需要使用-r选项，和rm、cp等命令的-r效果一致</p><p>示例：</p><p>•zip test.zip a.txt b.txt c.txt</p><p>将a.txt b.txt c.txt 压缩到test.zip文件内</p><p>•zip -r test.zip test itheima a.txt</p><p>将test、itheima两个文件夹和a.txt文件，压缩到test.zip文件内</p><h4 id="unzip命令解压">unzip命令解压</h4><p>使用unzip命令，可以方便的解压zip压缩包</p><p>语法：</p><p>•-d，指定要解压去的位置，同tar的-C选项</p><p>•参数，被解压的zip压缩包文件</p><p>示例：</p><p>•unzip test.zip，将test.zip解压到当前目录</p><p>•unzip test.zip -d /home/itheima，将test.zip解压到指定文件夹内（/home/itheima）</p><p>注意:同名内容会被替换</p><h2 id="28-ssh命令">28.ssh命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh [用户名]@[IP地址] <br></code></pre></td></tr></table></figure><h2 id="29-给命令起别名">29.给命令起别名</h2><p>编辑~/.bashrc</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># .bashrc</span><br><br><span class="hljs-comment"># User specific aliases and functions</span><br><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">rm</span>=<span class="hljs-string">&#x27;rm -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cp</span>=<span class="hljs-string">&#x27;cp -i&#x27;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">mv</span>=<span class="hljs-string">&#x27;mv -i&#x27;</span><br><span class="hljs-built_in">alias</span> dps=<span class="hljs-string">&#x27;docker ps --format &quot;table &#123;&#123;.ID&#125;&#125;\t&#123;&#123;.Image&#125;&#125;\t&#123;&#123;.Ports&#125;&#125;\t&#123;&#123;.Names&#125;&#125;&quot;&#x27;</span><br><span class="hljs-built_in">alias</span> dis=<span class="hljs-string">&quot;docker images&quot;</span><br><br><span class="hljs-built_in">alias</span> 别名 = <span class="hljs-string">&quot;你的命令&quot;</span><br><br><br><span class="hljs-comment"># Source global definitions</span><br><span class="hljs-keyword">if</span> [ -f /etc/bashrc ]; <span class="hljs-keyword">then</span><br>        . /etc/bashrc<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>然后执行<code>source ~/.bashrc</code></p><h2 id="30-磁盘挂载">30.磁盘挂载</h2><p><code>fdisk -l</code> 查看当前的磁盘</p><p><code>df -h</code> 查看当前硬盘的挂载情况</p><ol><li><p>格式化数据盘</p><p>例如要挂载/dev/vdb, 执行<code>mkfs.ext4 /dev/vdb</code></p></li><li><p>创建将要挂载的目录，例如<code>mkdir /data1</code></p></li><li><p>将新数据盘挂载在该目录下</p><p><code>mount /dev/vdb /data1</code></p></li><li><p>使用<code>df -h</code>，看是否挂载成功</p></li><li><p>设置系统重启后自动挂载数据盘</p><p><code>echo '/dev/vdb /data1 ext4 defaults 0 0' &gt;&gt; /etc/fstab</code></p><p><code>cat /etc/fstab</code>查看是否设置成功</p></li></ol><h2 id="31-nginx">31. nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install nginx<br>ps -ef | grep nginx <span class="hljs-comment"># 查看nginx的进程</span><br>lsof -i:80  <span class="hljs-comment"># 查看80端口的占用情况</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>nginx -s quit</td><td>优雅停止</td></tr><tr><td>nginx -s stop</td><td>立即停止</td></tr><tr><td>nginx -s reload</td><td>重载配置文件，修改配置文件后需要执行这个以让配置文件生效</td></tr><tr><td>nginx -s reopen</td><td>重新打开日志文件</td></tr><tr><td>nginx -V</td><td>查看nginx的安装目录、编译参数等</td></tr><tr><td>nginx -t</td><td>检查nginx配置文件是否有语法错误</td></tr></tbody></table><p>输入<code>nginx -V</code>，可以看到<code>--conf-path=/etc/nginx/nginx.conf</code>为配置文件地址，</p><p>上传</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">/var/www$ sudo <span class="hljs-built_in">chmod</span> -R 777 html<br>/var/www$ sudo <span class="hljs-built_in">chmod</span> -R 755 html<br></code></pre></td></tr></table></figure><h3 id="配置https">配置https</h3><p>在server块中加入：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl ;<br>        <span class="hljs-comment">#listen [::]:443 ssl default_server;</span><br>        <span class="hljs-comment">#server_name localhost;</span><br>        <span class="hljs-attribute">ssl_certificate</span>      /var/www/cert/algorithmpark.xyz.pem;<br>        <span class="hljs-attribute">ssl_certificate_key</span>  /var/www/cert/algorithmpark.xyz.key;<br>        <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;<br>        <span class="hljs-attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>        <span class="hljs-attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<br>        <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br></code></pre></td></tr></table></figure><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo nginx -t  <span class="hljs-comment"># 检查语法错误</span><br>sudo nginx -s reload  <span class="hljs-comment"># 重启nginx</span><br>sudo nginx  <span class="hljs-comment"># 看有没有异常</span><br></code></pre></td></tr></table></figure><p>如果nginx的端口被占用了，执行下面的语句杀死占用的进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo lsof -i:80<br>sudo <span class="hljs-built_in">kill</span> 进程号<br>sudo nginx<br></code></pre></td></tr></table></figure><p>在server块外面添加以下内容，设置重定向，以让来自http的请求自动跳转到https</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">server&#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>        server_name algorithmpark.xyz www.algorithmpark.xyz;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> https:<span class="hljs-regexp">//</span>$server_name$request_uri;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="32-jupyter-notebook">32. jupyter notebook</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip3 install --upgrade pip<br>pip3 install jupyter<br>sudo jupyter notebook --generate-config<br></code></pre></td></tr></table></figure><pre>Writing default config to: /root/.jupyter/jupyter_notebook_config.py</pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi /root/.jupyter/jupyter_notebook_config.py<br></code></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">c.NotebookApp.ip=<span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment">##访问ip，一般为服务器公网或者私网ip</span><br>c.NotebookApp.open_browser = <span class="hljs-literal">False</span><br>c.NotebookApp.port =<span class="hljs-number">8002</span> <span class="hljs-comment">##指定的访问配置端口</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">nohup</span> jupyter notebook --allow-root&amp;<br></code></pre></td></tr></table></figure><p>nohup 全称：no hang up（不挂起）。也就是说，当前交互命令行退出的时候，程序还在运行。</p><p>nohup Command [Arg…] [ &amp;] 最后的&quot; &amp;&quot;：表示后台运行，不霸占交互命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">tail</span> -f nohup.out  <span class="hljs-comment"># 查看jupyter notebook的log</span><br></code></pre></td></tr></table></figure><p>如何杀死jupyter进程？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ps -ef|grep jupyter<br><span class="hljs-built_in">kill</span> 进程号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>专业技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>algorithm-notes</title>
    <link href="/2023/07/04/algorithm-notes/index/"/>
    <url>/2023/07/04/algorithm-notes/index/</url>
    
    <content type="html"><![CDATA[<h1>Algorithm-learning-notes</h1><p>算法笔记+个人代码（菜，仅供参考）</p><p>笔记未完成，正在更新</p><p>已完成：数组、排序、链表、哈希表、栈和队列、二叉树、回溯、贪心、动态规划</p><p>正在更新：图论、字符串、单调栈</p><p>版本：2023-12-07</p><p>点击开启黑夜模式：<a href="./dark.html">darkmode</a></p><h1>基础算法总结</h1><p>题目参考：<a href="https://www.programmercarl.com/">https://www.programmercarl.com/</a></p><h2 id="时空复杂度理论">时空复杂度理论</h2><p>使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Θ</span></span></span></span>表示法，分别表示算法的效率上限（上界）、下限（下界）、和等限（确界），其数学上的具体定义见表</p><table><thead><tr><th style="text-align:center">记号</th><th style="text-align:center">定义</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi></mrow><annotation encoding="application/x-tex">O</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 若存在两个正常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n\ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)\le c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的渐进上限为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Ω</mi></mrow><annotation encoding="application/x-tex">\Omega</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Ω</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Ω</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\Omega (g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Ω</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 若存在两个正常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi></mrow><annotation encoding="application/x-tex">c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n\ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≥</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)\ge c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的渐进下限为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">Θ</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi mathvariant="normal">Θ</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=\Theta (g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 若存在正常数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">c_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n\ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>时，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><msub><mi>c</mi><mn>2</mn></msub><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c_1\cdot g(n)\le f(n)\le c_2\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5945em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5945em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>的渐进确界为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td></tr></tbody></table><p>如果<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi><mi>c</mi><mo>&gt;</mo><mn>0</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\exist c&gt;0,n_0&gt;0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∃</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> (<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为整数)，使对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>n</mi><mo>≥</mo><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">\forall n\ge n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>≤</mo><mi>c</mi><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)\le c\cdot g(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4445em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>那么，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>g</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(g(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></p><p><strong>例1:</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">f(n)=2n^2+3n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mn>6</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">c=6,n_0=100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>n</mi><mo>&gt;</mo><mn>100</mn></mrow><annotation encoding="application/x-tex">\forall n&gt;100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span>，有</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>3</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>6</mn><msup><mi>n</mi><mn>2</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>c</mi><msup><mi>n</mi><mn>2</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align}f(n)&amp;=2n^2+3n+1\\&amp;\le 2n^2+3n^2+n^2\\&amp;=6n^2\\&amp;=cn^2\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.0964em;vertical-align:-2.7982em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2982em;"><span style="top:-5.4341em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-0.8618em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7982em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2982em;"><span style="top:-5.4341em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">3</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.3859em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">6</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-0.8618em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">c</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7982em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2982em;"><span style="top:-5.2982em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-3.7741em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-0.7259em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7982em;"><span></span></span></span></span></span></span></span></span></p><p>由定义可证<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p><strong>例2：</strong> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow><annotation encoding="application/x-tex">f(n)=n\log_2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span></span>，证明<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.02</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(n^{1.02})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.02</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">c=1,n_0=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi><mi>n</mi><mo>&gt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\forall n&gt;3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">∀</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>，有</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n&gt;3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>&lt;</mo><msup><mi>n</mi><mn>0.02</mn></msup></mrow><annotation encoding="application/x-tex">\log_2n&lt;n^{0.02}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0.02</span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mi>n</mi><mo>⋅</mo><msup><mi>n</mi><mn>0.02</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr><mtr><mtd class ="mtr-glue"></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mi>n</mi><mn>1.02</mn></msup></mrow></mstyle></mtd><mtd class ="mtr-glue"></mtd><mtd class ="mml-eqn-num"></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align}f(n)&amp;=n\log_2n\\&amp;\le n\cdot n^{0.02}\\&amp;=n^{1.02}\end{align}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5482em;vertical-align:-2.0241em;"></span><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5241em;"><span style="top:-4.6841em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6359em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0241em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5241em;"><span style="top:-4.6841em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0.02</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.6359em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.02</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0241em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5241em;"><span style="top:-4.5482em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-3.0241em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:2.8641em;"></span><span class="eqn-num"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0241em;"><span></span></span></span></span></span></span></span></span></p><p>由定义可证<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.02</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)=O(n^{1.02})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.02</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>时间复杂度的量级比较：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.01</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">!</mo><mo stretchy="false">)</mo><mo>&lt;</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)&lt;O(\log_2n)&lt;O(\sqrt n)&lt;O(n)&lt;O(n\log_2n)&lt;O(n^{1.01})&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0992em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8492em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="padding-left:0.833em;">n</span></span><span style="top:-2.8092em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1908em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.01</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>对于空间复杂度</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S(n)=O(f(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span>，其中n为问题的规模，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>为语句关于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>所占存储空间的函数</p><h2 id="1-数组专题">(1)数组专题</h2><h3 id="数组1-二分查找">数组1:二分查找</h3><p><a href="https://www.bilibili.com/video/BV1fA4y1o715?vd_source=0746909e8642dc821f4dc86699071129">手把手带你撕出正确的二分法 | 二分查找法 | 二分搜索法 | LeetCode：704. 二分查找</a>(参考视频)</p><p><a href="https://leetcode.cn/problems/binary-search/description/">leetcode704</a></p><p><strong>左闭右闭模板:</strong></p><p>注意四个细节:</p><ul><li><p><code>right=len-1</code></p></li><li><p><code>left&lt;=right</code></p></li><li><p><code>right=mid-1</code></p></li><li><p><code>left=mid+1</code></p></li></ul><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=len<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)<span class="hljs-comment">//左闭右闭</span><br>        &#123;<br>            <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&gt;target)<br>                right=mid<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span> <br>                left=mid+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left=<span class="hljs-number">0</span><br>        right=<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> left&lt;=right:  <span class="hljs-comment">## 左闭右闭</span><br>            mid=(left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid]==target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid]&gt;target:<br>                right=mid-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>左闭右开模板:</strong></p><p>注意四个细节:</p><ul><li><code>right=nums.size()</code></li><li><code>left&lt;right</code></li><li><code>left=mid+1</code></li><li><code>right=mid</code></li></ul><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(left&lt;right) <span class="hljs-comment">//左闭右开</span><br>        &#123;<br>            <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target)<br>                <span class="hljs-keyword">return</span> mid;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&lt;target)<br>                left=mid+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                right=mid;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        left=<span class="hljs-number">0</span><br>        right=<span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">while</span> left&lt;right:  <span class="hljs-comment">## 左闭右开</span><br>            mid=(left+right)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid]==target:<br>                <span class="hljs-keyword">return</span> mid<br>            <span class="hljs-keyword">elif</span> nums[mid]&lt;target:<br>                left=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right=mid<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><strong>递归版二分查找</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> <span class="hljs-comment">//递归版</span></span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;BinarySearch=[&amp;](<span class="hljs-type">int</span> le,<span class="hljs-type">int</span> ri)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(le&gt;ri)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <span class="hljs-type">int</span> mid=(le+ri)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]==target)<br>            &#123;<br>                <span class="hljs-keyword">return</span> mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid]&gt;target)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">BinarySearch</span>(le,mid<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">BinarySearch</span>(mid+<span class="hljs-number">1</span>,ri);<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">BinarySearch</span>(<span class="hljs-number">0</span>,nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="数组3-有序数组的平方">数组3:有序数组的平方</h3><p><a href="https://www.bilibili.com/video/BV1QB4y1D7ep?vd_source=0746909e8642dc821f4dc86699071129">双指针法经典题目 | LeetCode：977.有序数组的平方</a>(参考视频)</p><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">leetcode977</a></p><p>推荐双指针法,由绝对值最小的数开始往两边遍历</p><p>当然也可以由两边向中间遍历数组</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortedSquares</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        idx=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(le):<br>            <span class="hljs-keyword">if</span> idx+<span class="hljs-number">1</span>&lt;le <span class="hljs-keyword">and</span> <span class="hljs-built_in">abs</span>(nums[idx+<span class="hljs-number">1</span>])&gt;<span class="hljs-built_in">abs</span>(nums[idx]):<br>                <span class="hljs-keyword">break</span><br>        left=idx-<span class="hljs-number">1</span><br>        right=idx+<span class="hljs-number">1</span><br>        arr=[nums[idx]**<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> left&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right&lt;le:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(nums[left])&lt;<span class="hljs-built_in">abs</span>(nums[right]):<br>                    arr.append(nums[left]**<span class="hljs-number">2</span>)<br>                    left-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>: <br>                    arr.append(nums[right]**<span class="hljs-number">2</span>)<br>                    right+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> left&gt;=<span class="hljs-number">0</span>:<br>                arr.append(nums[left]**<span class="hljs-number">2</span>)<br>                left-=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> right&lt;le:<br>                arr.append(nums[right]**<span class="hljs-number">2</span>)<br>                right+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure><h3 id="数组4-长度最小的子数组-滑动窗口">数组4:长度最小的子数组|滑动窗口</h3><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">leetcode209</a></p><p><a href="https://www.bilibili.com/video/BV1tZ4y1q7XE?vd_source=0746909e8642dc821f4dc86699071129">拿下滑动窗口！ | LeetCode 209 长度最小的子数</a>(参考视频)</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minSubArrayLen</span>(<span class="hljs-params">self, target: <span class="hljs-built_in">int</span>, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        left=add=<span class="hljs-number">0</span><br>        right=-<span class="hljs-number">1</span><br>        ret=inf<br>        <span class="hljs-keyword">while</span> right+<span class="hljs-number">1</span>&lt;le:<br>            <span class="hljs-keyword">while</span> add&lt;=target <span class="hljs-keyword">and</span> right+<span class="hljs-number">1</span>&lt;le:<br>                right+=<span class="hljs-number">1</span><br>                add+=nums[right]<br>                <span class="hljs-keyword">if</span> add&gt;=target:<br>                    ret=<span class="hljs-built_in">min</span>(ret,right-left+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">while</span> add&gt;target:<br>                add-=nums[left]<br>                left+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> add&gt;=target:<br>                    ret=<span class="hljs-built_in">min</span>(ret,right-left+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ret==inf:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span> :<br>            <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h2 id="2-排序专题">(2)排序专题:</h2><p>数组排序:<a href="https://leetcode.cn/problems/sort-an-array/description/">leetcode912</a></p><p>单链表排序:<a href="https://leetcode.cn/problems/sort-list/">leetcode148</a>(测试用例很容易超时,matrix的面试题,当年我就没做出来:confounded:)</p><p>对链表进行插入排序:<a href="https://leetcode.cn/problems/insertion-sort-list/description/">leetcode147</a>(不容易超时)</p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230726124830123.png" alt="image-20230726124830123"></p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20231020150620423.png" alt="image-20231020150620423"></p><h4 id="1插入排序">1插入排序</h4><p>支持数组和链表</p><h5 id="数组的插入排序排序">数组的插入排序排序</h5><p>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>,因为只使用了常数个临时变量</p><p>最好时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,对应于数组已经有序的情况</p><p>最坏时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,对应数组完全逆序的情况</p><p>平均时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>具有稳定性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> <span class="hljs-comment">//插入排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//数组长度</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i<span class="hljs-number">-1</span>]&gt;nums[i])<br>            &#123;<br>                <span class="hljs-type">int</span> tmp=nums[i];<span class="hljs-comment">//取出当前遍历的元素</span><br>                <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">for</span>(;j&gt;=<span class="hljs-number">0</span>&amp;&amp;nums[j]&gt;tmp;--j)<span class="hljs-comment">//向左遍历，直到遍历到小于或等于tmp的元素</span><br>                    nums[j+<span class="hljs-number">1</span>]=nums[j];<span class="hljs-comment">//将比tmp大的元素右移一格</span><br>                nums[j+<span class="hljs-number">1</span>]=tmp;<span class="hljs-comment">//将tmp插入新的位置</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交会超时)</em></p><h5 id="插入排序优化-折半插入排序">插入排序优化:折半插入排序</h5><p>当遍历到第<code>i</code>个1元素时,<code>[0,i-1]</code>的所有元素时有序的,可以利用二分查找的方法找到插入位置</p><p>然鹅, 时间复杂度没有质的飞跃</p><p>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>最好时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,对应于数组已经有序的情况</p><p>最坏时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,对应数组完全逆序的情况</p><p>平均时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>具有稳定性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> <span class="hljs-comment">//插入排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//数组长度</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(nums[i<span class="hljs-number">-1</span>]&gt;nums[i])<br>            &#123;<br>                <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=i<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">while</span>(left&lt;=right)<span class="hljs-comment">//二分查找</span><br>                &#123;<br>                    <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">if</span>(nums[i]&gt;=nums[mid])<span class="hljs-comment">//这里取等是为了算法的稳定性</span><br>                        left=mid+<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">else</span> <br>                        right=mid<span class="hljs-number">-1</span>;<br>                &#125;<br>                <span class="hljs-comment">//将[left,i-1]的所有元素右移</span><br>                <span class="hljs-type">int</span> tmp=nums[i];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=left;--j)<br>                    nums[j+<span class="hljs-number">1</span>]=nums[j];<br>                nums[left]=tmp;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交会超时)</em></p><h5 id="链表的插入排序">链表的插入排序</h5><p>空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>,只额外开辟了常数级别的空间</p><p>最好时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,对应于数组已经有序的情况</p><p>最坏时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,对应数组完全逆序的情况</p><p>平均时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>具有稳定性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-comment">//插入排序</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>)<span class="hljs-comment">//保证链表长度≥1</span><br>            <span class="hljs-keyword">return</span> head;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode* i=head;<br>        <span class="hljs-keyword">while</span>(i-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i-&gt;val&gt;i-&gt;next-&gt;val)<br>            &#123;<br>                ListNode* tmp=i-&gt;next;<span class="hljs-comment">//取出当前节点</span><br>                i-&gt;next=tmp-&gt;next;<span class="hljs-comment">//将当前节点从链表删除</span><br>                ListNode* j=dummyhead;<br>                <span class="hljs-keyword">while</span>(j-&gt;next-&gt;val&lt;=tmp-&gt;val)<br>                    j=j-&gt;next;<br>                tmp-&gt;next=j-&gt;next;<br>                j-&gt;next=tmp;<span class="hljs-comment">//将当前tmp节点插入链表</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                i=i-&gt;next;<br>        &#125;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode148提交会超时,leetcode147提交通过,16ms,9.3MB)</em></p><h4 id="2希尔排序">2希尔排序</h4><p>仅支持数组,不适用链表</p><p><em>先追求表中元素部分有序,再逐渐逼近全局有序</em></p><p>每一轮都按照一个给定的间隔进行插入排序,这个间隔应当逐渐减少,最后必须为1</p><p>以下的代码中, 步长(间隔)从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac n 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>开始递减,每次变为原来的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac 1 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>,直到变为1</p><p>空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>时间复杂度:和增量序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>d</mi><mn>3</mn></msub><mo separator="true">,</mo><mo>⋯</mo></mrow><annotation encoding="application/x-tex">d_1,d_2,d_3,\cdots</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span>的选择有关,目前无法用数学手段证明确切的时间复杂度</p><p>最坏时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,也就是取<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">d=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的时候,这时候希尔排序退化为插入排序</p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>在某个范围内时,可达<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^{1.3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>不具有稳定性,例如:</p><p>原始序列:              65   49   <u>49</u></p><p>第一趟:d=2           <u>49</u>   49   65</p><p>第一趟:d=1           <u>49</u>   49   65</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> <span class="hljs-comment">//希尔排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//数组长度</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d=n/<span class="hljs-number">2</span>;d&gt;=<span class="hljs-number">1</span>;d/=<span class="hljs-number">2</span>)<span class="hljs-comment">//步长变化</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=d;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i-d]&gt;nums[i])<br>                &#123;<br>                    <span class="hljs-type">int</span> tmp=nums[i];<br>                    <span class="hljs-type">int</span> j=i-d;<br>                    <span class="hljs-keyword">for</span>(;j&gt;=<span class="hljs-number">0</span>&amp;&amp;nums[j]&gt;tmp;j-=d)<br>                        nums[j+d]=nums[j];<br>                    nums[j+d]=tmp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>(在leetcode912提交通过,224ms,65MB)</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:  <span class="hljs-comment">## 希尔排序</span><br>        n=<span class="hljs-built_in">len</span>(nums)<br>        d=n//<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> d&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(d):<br>                j=d+i<br>                <span class="hljs-keyword">while</span> j&lt;n:<br>                    <span class="hljs-keyword">if</span> nums[j-d]&gt;nums[j]:<br>                        tmp=nums[j]<br>                        k=j-d<br>                        <span class="hljs-keyword">while</span> k&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[k]&gt;tmp:<br>                            nums[k+d]=nums[k]<br>                            k-=d<br>                        nums[k+d]=tmp<br>                    j+=d<br>            d//=<span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><p>(在leetcode912提交通过,1208ms,22MB)</p><h4 id="3冒泡排序">3冒泡排序</h4><h5 id="数组的冒泡排序">数组的冒泡排序</h5><p>可用于数组和链表</p><p>空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>时间复杂度</p><p>最好情况(有序):<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>最坏情况(逆序):<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>平均时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>具有稳定性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> <span class="hljs-comment">//冒泡排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//数组长度</span><br>        <span class="hljs-comment">//每一轮都把最小的元素移动到前面</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//本趟冒泡是否发生交换的标志</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n<span class="hljs-number">-2</span>;j&gt;=i;--j)<span class="hljs-comment">//一趟冒泡</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j]&gt;nums[j+<span class="hljs-number">1</span>])<span class="hljs-comment">//如果逆序</span><br>                &#123;<br>                    flag=<span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">swap</span>(nums[j],nums[j+<span class="hljs-number">1</span>]);<span class="hljs-comment">//交换</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)<span class="hljs-comment">//本趟遍历没有交换，当前数组已经有序，不需要继续循环</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交会超时)</em></p><h5 id="链表的冒泡排序">链表的冒泡排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_MAX 0x7fffffff</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<span class="hljs-comment">//冒泡排序</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>||head-&gt;next==<span class="hljs-literal">nullptr</span>)<span class="hljs-comment">//保证链表长度&gt;1</span><br>            <span class="hljs-keyword">return</span> head;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<span class="hljs-comment">//虚拟头节点</span><br>        <span class="hljs-type">int</span> cur_max=INT_MAX;<br>        ListNode* pre=dummyhead,*left=head,*right=head-&gt;next;<br>        <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">nullptr</span>&amp;&amp;right-&gt;val&lt;=cur_max)<br>        &#123;<br>            <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">nullptr</span>&amp;&amp;right-&gt;val&lt;=cur_max)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(left-&gt;val&gt;right-&gt;val)<br>                &#123;<br>                    left-&gt;next=right-&gt;next;<br>                    right-&gt;next=left;<br>                    pre-&gt;next=right;<br>                    pre=right;<br>                    right=left-&gt;next;<br>                    flag=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    pre=left;<br>                    left=right;<br>                    right=right-&gt;next;<br>                &#125;<br>            &#125;<br>            cur_max=left-&gt;val;<br>            pre=dummyhead,left=dummyhead-&gt;next,right=left-&gt;next;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode148提交会超时,leetcode147通过112ms,9.3MB)</em></p><h4 id="4快速排序">4快速排序</h4><p>最好空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>最坏空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>最好时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>最坏时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>平均时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>如果每次选中的枢轴将待排序序列划分为均匀的两个部分,则递归深度最小,算法效率最高</p><p>若数组原本就有序或逆序,则快速排序性能最差</p><p>算法不稳定</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span><span class="hljs-comment">//快速排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;quick_sort=[&amp;](<span class="hljs-type">int</span> low,<span class="hljs-type">int</span> high)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(low&gt;=high)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-type">int</span> left=low,right=high;<br>            <span class="hljs-type">int</span> pivot=nums[low];<br>            <span class="hljs-keyword">while</span>(low&lt;high)<br>            &#123;<br>                <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;nums[high]&gt;=pivot)<br>                    --high;<br>                nums[low]=nums[high];<br>                <span class="hljs-keyword">while</span>(low&lt;high&amp;&amp;nums[low]&lt;=pivot)<br>                    ++low;<br>                nums[high]=nums[low];<br>            &#125;<br>            nums[low]=pivot;<br>            <span class="hljs-built_in">quick_sort</span>(left,low<span class="hljs-number">-1</span>);<br>            <span class="hljs-built_in">quick_sort</span>(low+<span class="hljs-number">1</span>,right);<br>        &#125;;<br>        <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交会超时)</em></p><p>**优化版：**随机选取pivot+优化内部while循环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;quick_sort=[&amp;](<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(left&gt;=right)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-type">int</span> pivot_pos=<span class="hljs-built_in">rand</span>()%(right-left+<span class="hljs-number">1</span>);<br>            <span class="hljs-built_in">swap</span>(nums[pivot_pos+left],nums[left]);<br>            <span class="hljs-type">int</span> pivot=nums[left];<br>            <span class="hljs-type">int</span> low=left+<span class="hljs-number">1</span>,high=right;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">while</span>(low&lt;=high&amp;&amp;nums[high]&gt;pivot)<br>                    --high;<br>                <span class="hljs-keyword">while</span>(low&lt;=high&amp;&amp;nums[low]&lt;pivot)<br>                    ++low;<br>                <span class="hljs-keyword">if</span>(low&gt;high)<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-built_in">swap</span>(nums[low++],nums[high--]);<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(nums[high],nums[left]);<br>            <span class="hljs-built_in">quick_sort</span>(left,high<span class="hljs-number">-1</span>);<br>            <span class="hljs-built_in">quick_sort</span>(high+<span class="hljs-number">1</span>,right);<br>        &#125;;<br>        <span class="hljs-built_in">quick_sort</span>(<span class="hljs-number">0</span>,nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交通过,172ms,64MB)</em></p><p>关键:while循环优化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">while</span>(low&lt;=high&amp;&amp;nums[high]&gt;pivot)<br>--high;<br><span class="hljs-keyword">while</span>(low&lt;=high&amp;&amp;nums[low]&lt;pivot)<br>++low;<br><span class="hljs-keyword">if</span>(low&gt;high)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">swap</span>(nums[low++],nums[high--]);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>nums[high]&gt;pivot</code>不取等,防止因为大量重复的数使得在这个循环就导致high一直减到等于low,递归树更加平衡</p><h4 id="5选择排序">5选择排序</h4><h5 id="数组的选择排序">数组的选择排序:</h5><p>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>不稳定,例如:主要原因是使用了swap函数,如果牺牲一些时间,整体后移所有元素以避免使用swap,算法可以变为稳定的</p><p>原始序列    3  <u>3</u>  1</p><p>排序后        1  <u>3</u>  3</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span><span class="hljs-comment">//快速排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> cur_min=INT_MAX;<br>            <span class="hljs-type">int</span> min_idx=i;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j]&lt;cur_min)<br>                &#123;<br>                    cur_min=nums[j];<br>                    min_idx=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">swap</span>(nums[i],nums[min_idx]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode912提交会超时)</em></p><h5 id="链表的选择排序">链表的选择排序</h5><p>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><p>具有稳定性</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span> <span class="hljs-comment">//选择排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<span class="hljs-comment">//虚拟头节点</span><br>        ListNode* i=dummyhead,*j=dummyhead;<br>        <span class="hljs-keyword">while</span>(i-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            j=i;<br>            <span class="hljs-type">int</span> cur_min=INT_MAX;<br>            ListNode* min_node=i;<br>            <span class="hljs-keyword">while</span>(j-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j-&gt;next-&gt;val&lt;cur_min)<br>                &#123;<br>                    cur_min=j-&gt;next-&gt;val;<br>                    min_node=j;<br>                &#125;<br>                j=j-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(min_node==i)<br>                i=i-&gt;next;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ListNode* tmp=min_node-&gt;next;<br>                min_node-&gt;next=tmp-&gt;next;<br>                tmp-&gt;next=i-&gt;next;<br>                i-&gt;next=tmp;<br>                i=tmp;<br>            &#125;<br>        &#125;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>(在leetcode148提交会超时,leetcode147通过,80ms,9.4MB)</em></p><h4 id="6堆排序">6堆排序</h4><p>只适用于数组</p><p>堆排序利用大根堆,本质是按照节点序号(从1开始)存储在数组中的完全二叉树</p><p>几个基本操作</p><ul><li>i的左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span></span></span></span></li><li>i的右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>i的父节点       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor\frac i 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>i的所在层次    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2(i+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>i</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log_2i\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><p>若完全二叉树中有n个节点,则</p><ul><li>判断节点i有左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断节点i有右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+1\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断节点i为叶子节点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i&gt;\lfloor\frac n 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li></ul><p>若n个关键字序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">[</mo><mn>1...</mn><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">L[1...n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord">1...</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span>满足下面某一条性质,则称为<strong>堆(Heap)</strong></p><ul><li>若满足:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>L</mi><mo stretchy="false">[</mo><mn>2</mn><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">L[i]\ge L[2i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≥</mo><mi>L</mi><mo stretchy="false">[</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">L[i]\ge L[2i+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">1\le i\le\frac n2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)   大根堆</li><li>若满足:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>L</mi><mo stretchy="false">[</mo><mn>2</mn><mi>i</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">L[i]\le L[2i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>≤</mo><mi>L</mi><mo stretchy="false">[</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">L[i]\le L[2i+1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mopen">[</span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">1\le i\le\frac n2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)   小根堆</li></ul><p><strong>如果下标从0开始</strong>,则:</p><ul><li>i的左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>i的右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2i+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></li><li>i的父节点       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor\frac {i-1} 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>i的所在层次    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2(i+2)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)⌉</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log_2{(i+1)}\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><p>若完全二叉树中有n个节点,则</p><ul><li>判断节点i有左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+1 &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断节点i有右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+2 &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断节点i为叶子节点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i\ge\lfloor\frac n 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>判断i存在子节点 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">0\le i\le\lfloor\frac n2\rfloor-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><h5 id="无脑递归版本-空间复杂度偏高">无脑递归版本:(空间复杂度偏高)</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span><span class="hljs-comment">//堆排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;recur=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>&gt;=n)<span class="hljs-comment">//没有子树</span><br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>&gt;=n)<span class="hljs-comment">//只有左子树</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>]&gt;nums[idx])<br>                &#123;<br>                    <span class="hljs-built_in">swap</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>],nums[idx]);<br>                    <span class="hljs-built_in">recur</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">//有左右子树</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>]&gt;nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>])<span class="hljs-comment">//左子树更大</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>]&gt;nums[idx])<br>                    &#123;<br>                        <span class="hljs-built_in">swap</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>],nums[idx]);<br>                        <span class="hljs-built_in">recur</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span><span class="hljs-comment">//右子树更大</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>]&gt;nums[idx])<br>                    &#123;<br>                        <span class="hljs-built_in">swap</span>(nums[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>],nums[idx]);<br>                        <span class="hljs-built_in">recur</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<span class="hljs-comment">//构造大根堆</span><br>            <span class="hljs-built_in">recur</span>(i);<br>        <span class="hljs-keyword">while</span>(n&gt;=<span class="hljs-number">2</span>)<br>        &#123;<br>            --n;<br>            <span class="hljs-built_in">swap</span>(nums[n],nums[<span class="hljs-number">0</span>]);<br>            <span class="hljs-built_in">recur</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode912通过,308ms,65MB</em></p><h5 id="奇妙循环版本">奇妙循环版本:</h5><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span><span class="hljs-comment">//堆排序(非递归版本)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;head_adjust=[&amp;](<span class="hljs-type">int</span> idx,<span class="hljs-type">int</span> len)<br>        &#123;<br>            <span class="hljs-type">int</span> k=<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>;<span class="hljs-comment">//idx对应的左孩子的下标</span><br>            <span class="hljs-keyword">while</span>(k&lt;len)<span class="hljs-comment">//idx的左孩子存在</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(k+<span class="hljs-number">1</span>&lt;len&amp;&amp;nums[k]&lt;nums[k+<span class="hljs-number">1</span>])<span class="hljs-comment">//idx的右孩子存在且值大于左孩子</span><br>                    ++k;<span class="hljs-comment">//调整k,保证k指向左右孩子中的最大者</span><br>                <span class="hljs-keyword">if</span>(nums[idx]&gt;=nums[k])<br>                    <span class="hljs-keyword">break</span>;<span class="hljs-comment">//idx节点最大，结束循环</span><br>                <span class="hljs-built_in">swap</span>(nums[idx],nums[k]);<br>                idx=k;<span class="hljs-comment">//以当前孩子为父节点，继续向下检查</span><br>                k=<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>;<span class="hljs-comment">//指向当前孩子的左孩子的下标                </span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<span class="hljs-comment">//构造大根堆</span><br>            <span class="hljs-built_in">head_adjust</span>(i,n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;--i)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(nums[<span class="hljs-number">0</span>],nums[i]);<br>            <span class="hljs-built_in">head_adjust</span>(<span class="hljs-number">0</span>,i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode912通过,204ms,65MB</em></p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        n=<span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">head_adjust</span>(<span class="hljs-params">i:<span class="hljs-built_in">int</span></span>):  <span class="hljs-comment">## 维护大根堆</span><br>            child=<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> child &lt; n:<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>*i+<span class="hljs-number">2</span>&lt;n <span class="hljs-keyword">and</span> nums[child]&lt;nums[child+<span class="hljs-number">1</span>]:<br>                    child+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> nums[i]&gt;nums[child]:<br>                    <span class="hljs-keyword">break</span><br>                nums[child],nums[i]=nums[i],nums[child]<br>                i=child<br>                child=<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>((n-<span class="hljs-number">2</span>)//<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            head_adjust(i)<br>        n1=n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n1-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>            nums[<span class="hljs-number">0</span>],nums[i]=nums[i],nums[<span class="hljs-number">0</span>]<br>            n-=<span class="hljs-number">1</span><br>            head_adjust(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><p><em>leetcode912通过,1708ms,21.88MB</em></p><h5 id="复杂度分析-对于循环版本的代码">复杂度分析:(对于循环版本的代码)</h5><p>复杂度分析部分考虑下标从1开始</p><p>二叉树高<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h=\lfloor\log_2n\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>层最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个节点,只有第1~(h-1)层的节点才可能需要下坠处理,每次下坠最多对比2次,第i层节点下坠最多对比h-i次</p><p>把整棵树调整为大根堆, 关键字对比次数:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>h</mi><mo>−</mo><mn>1</mn></mrow><mn>1</mn></munderover><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mn>2</mn><mo stretchy="false">(</mo><mi>h</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>h</mi><mo>−</mo><mn>1</mn></mrow><mn>1</mn></munderover><msup><mn>2</mn><mi>i</mi></msup><mo stretchy="false">(</mo><mi>h</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></munderover><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mi>j</mi></mrow></msup><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mi>h</mi></msup><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></munderover><mfrac><mi>j</mi><msup><mn>2</mn><mi>j</mi></msup></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msup><mn>2</mn><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mo stretchy="false">(</mo><mn>2</mn><mo>−</mo><mfrac><mrow><mi>h</mi><mo>+</mo><mn>1</mn></mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mfrac><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mn>2</mn><mi>n</mi><mo>⋅</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>4</mn><mi>n</mi></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\sum\limits_{i=h-1}^{1}2^{i-1}2(h-i) &amp;=\sum\limits_{i=h-1}^{1}2^{i}(h-i)\\&amp;=\sum\limits_{j=1}^{h-1}2^{h-j}j\\&amp;=2^h\sum\limits_{j=1}^{h-1}\frac{j}{2^j}\\&amp;=2^{\lfloor\log_2n\rfloor+1}\cdot(2-\frac{h+1}{2^{h-1}})\\&amp;\le2n\cdot2\\&amp;=4n\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:15.9188em;vertical-align:-7.7094em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.2094em;"><span style="top:-10.2444em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3604em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span><span style="top:-6.7478em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"></span></span><span style="top:-3.1979em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"></span></span><span style="top:-0.1127em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"></span></span><span style="top:1.7133em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"></span></span><span style="top:3.2133em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.7094em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.2094em;"><span style="top:-10.2444em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3604em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8747em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span><span style="top:-6.7478em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1979em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8361em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3365em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7507em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.1127em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">⌊</span><span class="mop mtight"><span class="mop mtight"><span class="mtight">l</span><span class="mtight">o</span><span class="mtight" style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span style="top:-2.2341em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2659em;"><span></span></span></span></span></span></span><span class="mspace mtight" style="margin-right:0.1952em;"></span><span class="mord mathnormal mtight">n</span><span class="mclose mtight">⌋</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7751em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span></span></span><span style="top:1.7133em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span></span></span><span style="top:3.2133em;"><span class="pstrut" style="height:3.8361em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">4</span><span class="mord mathnormal">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.7094em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>所以建堆的过程中时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>排序的过程中总共需要处理n-1个节点,每个节点最多需要下坠h-1层,时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>总的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>堆排序不稳定,例如</p><p>原始序列  1  <u>2</u>  2</p><p>排序后      1  2  <u>2</u></p><h5 id="应用：合并K个升序链表">应用：合并K个升序链表</h5><p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">leetcode23</a></p><p>利用小根堆的性质解决</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ninf 20000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">mergeKLists</span><span class="hljs-params">(vector&lt;ListNode*&gt;&amp; lists)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,<span class="hljs-literal">nullptr</span>);<span class="hljs-comment">//虚拟头节点</span><br>        ListNode* p=dummyhead;<br>        <span class="hljs-type">int</span> n=lists.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-comment">//将lists构造为一个小根堆(按照链表中第一个元素的大小排序)</span><br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;recur=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx&gt;n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>)<span class="hljs-comment">//没有孩子</span><br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-type">int</span> fa,le,ri;<span class="hljs-comment">//分别是父节点、左节点、右节点，得到它们的权值用于排序</span><br>            <span class="hljs-keyword">if</span>(lists[idx]==<span class="hljs-literal">nullptr</span>)<br>                fa=ninf;<br>            <span class="hljs-keyword">else</span><br>                fa=lists[idx]-&gt;val;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>&gt;=n||lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>]==<span class="hljs-literal">nullptr</span>)<br>                le=ninf;<br>            <span class="hljs-keyword">else</span><br>                le=lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>]-&gt;val;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>&gt;=n||lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>]==<span class="hljs-literal">nullptr</span>)<br>                ri=ninf;<br>            <span class="hljs-keyword">else</span><br>                ri=lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>]-&gt;val;<br>            <span class="hljs-keyword">if</span>(le&lt;ri)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(le&lt;fa)<br>                &#123;<br>                    <span class="hljs-built_in">swap</span>(lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>],lists[idx]);<br>                    <span class="hljs-built_in">recur</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(ri&lt;fa)<br>                &#123;<br>                    <span class="hljs-built_in">swap</span>(lists[<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>],lists[idx]);<br>                    <span class="hljs-built_in">recur</span>(<span class="hljs-number">2</span>*idx+<span class="hljs-number">2</span>);<br>                &#125;<br>            &#125;<br>        &#125;;<span class="hljs-comment">//用于构造和维护小根堆的递归函数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span><span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>            <span class="hljs-built_in">recur</span>(i);<br>        <span class="hljs-keyword">while</span>(lists[<span class="hljs-number">0</span>]!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p-&gt;next=lists[<span class="hljs-number">0</span>];<br>            p=p-&gt;next;<br>            lists[<span class="hljs-number">0</span>]=p-&gt;next;<br>            p-&gt;next=<span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-built_in">recur</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="7归并排序">7归并排序</h4><h5 id="复杂度分析">复杂度分析</h5><p>2路归并的归并树,形态上就是一棵倒立的二叉树</p><p>二叉树的第h层最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个节点,若树高为h,满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">n\le 2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></p><p>即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>=</mo><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">h-1=\lceil\log_2n\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌉</span></span></span></span></p><p>n个元素进行二路归并排序,归并趟数=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil\log_2n\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌉</span></span></span></span></p><p>每趟归并的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,算法的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>递归工作栈的空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log_2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,辅助数组的空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>总的空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>归并排序具有稳定性</p><h5 id="对数组归并排序">对数组归并排序</h5><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span><span class="hljs-comment">//归并排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">tmp</span>(n);<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;merge_sort=[&amp;](<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(left&gt;=right)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-type">int</span> mid=(left+right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-built_in">merge_sort</span>(left,mid);<br>            <span class="hljs-built_in">merge_sort</span>(mid+<span class="hljs-number">1</span>,right);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=left;i&lt;=right;++i)<span class="hljs-comment">//将[left,right]的元素临时移动到tmp数组</span><br>                tmp[i]=nums[i];<br>            <span class="hljs-type">int</span> i=left,j=mid+<span class="hljs-number">1</span>,k=left;<br>            <span class="hljs-keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=right)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(tmp[i]&lt;=tmp[j])<br>                &#123;<br>                    nums[k]=tmp[i];<br>                    ++i;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    nums[k]=tmp[j];<br>                    ++j;<br>                &#125;<br>                ++k;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(;i&lt;=mid;++i,++k)<br>                nums[k]=tmp[i];<br>            <span class="hljs-keyword">for</span>(;j&lt;=right;++j,++k)<br>                nums[k]=tmp[j];<br>        &#125;;<br>        <span class="hljs-built_in">merge_sort</span>(<span class="hljs-number">0</span>,n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">return</span> nums;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode912通过,312ms,67.1MB</em></p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sortArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:  <span class="hljs-comment">## 归并排序</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_sort</span>(<span class="hljs-params">left:<span class="hljs-built_in">int</span>,right:<span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> left&gt;=right:<br>                <span class="hljs-keyword">return</span><br>            mid=(left+right)//<span class="hljs-number">2</span><br>            merge_sort(left,mid)<br>            merge_sort(mid+<span class="hljs-number">1</span>,right)<br>            ll=nums[left:mid+<span class="hljs-number">1</span>]<br>            lr=nums[mid+<span class="hljs-number">1</span>:right+<span class="hljs-number">1</span>]<br>            i=<span class="hljs-number">0</span><br>            j=<span class="hljs-number">0</span><br>            k=left<br>            <span class="hljs-keyword">while</span> i&lt;=mid-left <span class="hljs-keyword">and</span> j&lt;=right-mid-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> ll[i]&lt;=lr[j]:<br>                    nums[k]=ll[i]<br>                    i+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    nums[k]=lr[j]<br>                    j+=<span class="hljs-number">1</span><br>                k+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> i&lt;=mid-left:<br>                nums[k]=ll[i]<br>                i+=<span class="hljs-number">1</span><br>                k+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> j&lt;=right-mid-<span class="hljs-number">1</span>:<br>                nums[k]=lr[j]<br>                j+=<span class="hljs-number">1</span><br>                k+=<span class="hljs-number">1</span><br>        merge_sort(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums<br></code></pre></td></tr></table></figure><p><em>leetcode912通过,1404ms,32.36MB</em></p><h5 id="对链表归并排序">对链表归并排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<span class="hljs-comment">//虚拟头节点</span><br>        function&lt;<span class="hljs-type">void</span>(ListNode*,ListNode*&amp;)&gt;merge_sort=[&amp;](ListNode* left,ListNode*&amp; right)<span class="hljs-comment">//左开右闭区间</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(left==right||left-&gt;next==right)<br>                <span class="hljs-keyword">return</span>;<br>            ListNode* mid=left, * fast=left;<span class="hljs-comment">//采用快慢指针法找到链表的中点</span><br>            <span class="hljs-keyword">while</span>(fast-&gt;next!=right)<br>            &#123;<br>                fast=fast-&gt;next;<br>                mid=mid-&gt;next;<br>                <span class="hljs-keyword">if</span>(fast-&gt;next==right)<br>                    <span class="hljs-keyword">break</span>;<br>                fast=fast-&gt;next;<br>            &#125;<br>            <span class="hljs-built_in">merge_sort</span>(left,mid);<br>            <span class="hljs-built_in">merge_sort</span>(mid,right);<br>            ListNode* ld=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,left-&gt;next),*rd=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,mid-&gt;next),*end=right-&gt;next;<br>            ListNode* p=left;<br>            mid-&gt;next=<span class="hljs-literal">nullptr</span>;<br>            right-&gt;next=<span class="hljs-literal">nullptr</span>;<br>            left-&gt;next=end;<br>            <span class="hljs-keyword">while</span>(ld-&gt;next!=<span class="hljs-literal">nullptr</span>&amp;&amp;rd-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ListNode* tmp;<br>                <span class="hljs-keyword">if</span>(ld-&gt;next-&gt;val&lt;=rd-&gt;next-&gt;val)<br>                &#123;<br>                    tmp=ld-&gt;next;<br>                    ld-&gt;next=tmp-&gt;next;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    tmp=rd-&gt;next;<br>                    rd-&gt;next=tmp-&gt;next;<br>                &#125;<br>                tmp-&gt;next=p-&gt;next;<br>                p-&gt;next=tmp;<br>                p=tmp;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(ld-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ListNode* tmp;<br>                tmp=ld-&gt;next;<br>                ld-&gt;next=tmp-&gt;next;<br>                tmp-&gt;next=p-&gt;next;<br>                p-&gt;next=tmp;<br>                p=tmp;<br>            &#125;<br>            <span class="hljs-keyword">while</span>(rd-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ListNode* tmp;<br>                tmp=rd-&gt;next;<br>                rd-&gt;next=tmp-&gt;next;<br>                tmp-&gt;next=p-&gt;next;<br>                p-&gt;next=tmp;<br>                p=tmp;<br>            &#125;<br>            right=p;<br>            <span class="hljs-keyword">delete</span> ld,rd;<br>        &#125;;<br>        ListNode* p=dummyhead;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            p=p-&gt;next;<br>        <span class="hljs-built_in">merge_sort</span>(dummyhead,p);<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode148通过,368ms,95.18MB</em></p><h4 id="8基数排序">8基数排序</h4><h5 id="复杂度分析-2">复杂度分析</h5><p>可以证明，基于比较的排序，时间复杂度不可能优于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，基数排序不基于比较</p><p>通常针对链表实现,假设长度为n的线性表中每个节点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">a_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>的关键字由d元组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><msubsup><mi>k</mi><mi>j</mi><mrow><mi>d</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>k</mi><mi>j</mi><mrow><mi>d</mi><mo>−</mo><mn>2</mn></mrow></msubsup><mo separator="true">,</mo><msubsup><mi>k</mi><mi>j</mi><mrow><mi>d</mi><mo>−</mo><mn>3</mn></mrow></msubsup><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msubsup><mi>k</mi><mi>j</mi><mn>1</mn></msubsup><mo separator="true">,</mo><msubsup><mi>k</mi><mi>j</mi><mn>0</mn></msubsup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k_j^{d-1},k_j^{d-2},k_j^{d-3},\cdots,k_j^{1},k_j^{0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3022em;vertical-align:-0.413em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8892em;"><span style="top:-2.4231em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8892em;"><span style="top:-2.4231em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8892em;"><span style="top:-2.4231em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.413em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4413em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3948em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-2.4413em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3948em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>组成</p><p>其中 , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><msubsup><mi>k</mi><mi>j</mi><mi>i</mi></msubsup><mo>≤</mo><mi>r</mi><mo>−</mo><mn>1</mn><mspace width="1em"/><mo stretchy="false">(</mo><mn>0</mn><mo>≤</mo><mi>j</mi><mo>&lt;</mo><mi>n</mi><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">0\le k_j^{i}\le r-1\quad (0\le j&lt;n,0\le i\le d-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2194em;vertical-align:-0.3948em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-2.4413em;margin-left:-0.0315em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3948em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span> 称为基数</p><p>空间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>链表初始化时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> ,一趟分配的时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> ,一趟收集的时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>r</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(r)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span></span> ,总共 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi></mrow><annotation encoding="application/x-tex">d</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">d</span></span></span></span> 趟,时间复杂度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>d</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(d(n+r))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">d</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">))</span></span></span></span></p><p>对于leetcode148,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup><mo>≤</mo><mi>N</mi><mi>o</mi><mi>d</mi><mi>e</mi><mi mathvariant="normal">.</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">-10^5 \le Node.val \le 10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9501em;vertical-align:-0.136em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span><span class="mord">.</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>∈</mo><mo stretchy="false">[</mo><mn>0</mn><mo separator="true">,</mo><mn>5</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">n\in[0,5\times10^4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p>排序时加上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">10^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span>,保证所有数为正数,对于十进制数r=10,d不超过6</p><p>所有该题时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>基数排序是稳定的, <s>因为基你太稳</s></p><h5 id="对链表基数排序">对链表基数排序</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">sortList</span><span class="hljs-params">(ListNode* head)</span><span class="hljs-comment">//基数排序</span></span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">0</span>,head);<br>        ListNode* p=dummyhead;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p-&gt;next-&gt;val+=<span class="hljs-number">100000</span>;<br>            p=p-&gt;next;<br>        &#125;<br>        vector&lt;queue&lt;ListNode*&gt;&gt;<span class="hljs-built_in">vec</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100000</span>;i*=<span class="hljs-number">10</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(dummyhead-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dummyhead-&gt;next-&gt;val/(i*<span class="hljs-number">10</span>)!=<span class="hljs-number">0</span>)<br>                    flag=<span class="hljs-number">1</span>;<br>                vec[dummyhead-&gt;next-&gt;val/i%<span class="hljs-number">10</span>].<span class="hljs-built_in">push</span>(dummyhead-&gt;next);<br>                dummyhead-&gt;next=dummyhead-&gt;next-&gt;next;<br>            &#125;<br>            ListNode* p=dummyhead;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">10</span>;++j)<br>            &#123;<br>                <span class="hljs-keyword">while</span>(!vec[j].<span class="hljs-built_in">empty</span>())<br>                &#123;<br>                    vec[j].<span class="hljs-built_in">front</span>()-&gt;next=p-&gt;next;<br>                    p-&gt;next=vec[j].<span class="hljs-built_in">front</span>();<br>                    p=p-&gt;next;<br>                    vec[j].<span class="hljs-built_in">pop</span>();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        p=dummyhead;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p-&gt;next-&gt;val-=<span class="hljs-number">100000</span>;<br>            p=p-&gt;next;<br>        &#125;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode148通过,216ms,63.4MB</em></p><h4 id="9外部排序">9外部排序</h4><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20231015110236652.png" alt="image-20231015110236652"></p><p><strong>优化1</strong>：采用多路归并可以减少归并趟数，从而减少磁盘I/O(读写)次数</p><p>对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>个初始归并段，做k路归并，则归并数可用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>叉树表示</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>叉树的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>层最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>k</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">k^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点，则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>≤</mo><msup><mi>k</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">r\le k^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>，归并趟数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>≥</mo><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>k</mi></msub><mi>r</mi><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">h-1\ge\lceil \log_kr\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.242em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mclose">⌉</span></span></span></span></p><p>k路平衡归并：</p><ol><li>最多只能有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个段归并为一个；</li><li>每一趟归并中，若有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 个归并段参与归并，则经过这一趟处理得到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mfrac><mi>m</mi><mi>k</mi></mfrac><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \frac mk\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌈</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌉</span></span></span></span>个新的归并段</li></ol><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding="application/x-tex">k=4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>的情况：</p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20231015114623590.png" alt="image-20231015114623590"></p><p>多路归并带来的负面影响：</p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>路归并时，需要开辟<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个输入缓冲区，内存开销增加。</li><li>每挑选一个关键字需要对比关键字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(k-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>次，内部归并所需时间增加</li></ol><p>**优化2：**减少初始归并段<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi></mrow><annotation encoding="application/x-tex">r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>的数量</p><p>生成初始归并段的方法：若总共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>条记录，内存工作区可以容纳<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span></span></span></span>条记录，则初始归并段数量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mo>=</mo><mfrac><mi>N</mi><mi>L</mi></mfrac></mrow><annotation encoding="application/x-tex">r=\frac NL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">L</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><h2 id="3-查找专题">(3)查找专题</h2><p>查找过程中的主要操作是关键字的比较,查找过程中的关键字的平均比较次数(平均查找长度ASL(Average search length))作为衡量一个查找算法效率高低的标准,ASL定义为:</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>P</mi><mi>i</mi></msub><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">ASL=\sum_{i=1}^n P_iC_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi></mrow><annotation encoding="application/x-tex">ASL</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">L</span></span></span></span>是对存储结构中对象总数n的函数</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>P</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">P_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是检索第i个元素的概率</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">C_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是找到第i个元素所需的关键码值与给定值的比较次数</li></ul><h3 id="顺序查找">顺序查找</h3><p>对于长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>的顺序表：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mi>S</mi><mi>L</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>i</mi><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">ASL=\frac 1n\sum_{i=1}^ni=\frac{n+1}2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="二分查找">二分查找</h3><p>[实现代码](## 数组1:二分查找)</p><p>前提：查找表中所有记录是有序的（升序或降序）</p><p>对二分查找有效性的证明：</p><p>因为算法在top&gt;bottom的条件下持续运行，只需证明在该条件下区间大小[bottom,top]是严格变小的</p><pre><code class=" mermaid">graph TB;1+top-bottom --&gt; 1+top-mid-1;1+top-bottom --&gt; 1+mid-bottom;</code></pre><p>证明其一：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&lt;</mo><mi>t</mi><mi>o</mi><mi>p</mi><mo>→</mo><mspace linebreak="newline"></mspace><mn>2</mn><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&lt;</mo><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>+</mo><mn>1</mn><mo>→</mo><mspace linebreak="newline"></mspace><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&lt;</mo><mfrac><mrow><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>+</mo><mi>t</mi><mi>o</mi><mi>p</mi></mrow><mn>2</mn></mfrac><mo>→</mo><mspace linebreak="newline"></mspace><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&lt;</mo><mo stretchy="false">⌊</mo><mfrac><mrow><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>+</mo><mi>t</mi><mi>o</mi><mi>p</mi></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn><mo>→</mo><mspace linebreak="newline"></mspace><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&lt;</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo>→</mo><mspace linebreak="newline"></mspace><mn>1</mn><mo>+</mo><mi>t</mi><mi>o</mi><mi>p</mi><mo>−</mo><mi>b</mi><mi>o</mi><mi>t</mi><mi>t</mi><mi>o</mi><mi>m</mi><mo>&gt;</mo><mn>1</mn><mo>+</mo><mi>t</mi><mi>o</mi><mi>p</mi><mo>−</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">bottom&lt;top\rightarrow\\2bottom&lt;bottom+1\rightarrow\\bottom&lt;\frac{bottom+top}2\rightarrow\\bottom&lt;\lfloor\frac{bottom+top}2\rfloor+1\rightarrow\\bottom&lt;mid+1\rightarrow\\1+top-bottom&gt;1+top-mid-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0574em;vertical-align:-0.686em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">mi</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">→</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">b</span><span class="mord mathnormal">o</span><span class="mord mathnormal">tt</span><span class="mord mathnormal">o</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">mi</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p>另一侧证明同理</p><h4 id="二分答案1：爱吃香蕉的珂珂">二分答案1：爱吃香蕉的珂珂</h4><p><a href="https://leetcode.cn/problems/koko-eating-bananas/">leetcode875</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minEatingSpeed</span>(<span class="hljs-params">self, piles: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], h: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        up=<span class="hljs-built_in">max</span>(piles)<br>        low=<span class="hljs-number">1</span><br>        high=up<br>        <span class="hljs-keyword">while</span> low&lt;high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            t=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> ban <span class="hljs-keyword">in</span> piles:<br>                t+=ban//mid<br>                <span class="hljs-keyword">if</span> ban % mid!=<span class="hljs-number">0</span>:<br>                    t+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> t&gt;h:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> t&lt;=h:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案2：使结果不超过阈值的最小除数">二分答案2：使结果不超过阈值的最小除数</h4><p><a href="https://leetcode.cn/problems/find-the-smallest-divisor-given-a-threshold/description/">leetcode1283</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">smallestDivisor</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], threshold: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        m_ele=<span class="hljs-built_in">max</span>(nums)<br>        low=<span class="hljs-number">1</span><br>        high=m_ele<br>        <span class="hljs-keyword">while</span> low&lt;high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            add=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>                add+=n//mid<br>                <span class="hljs-keyword">if</span> n%mid!=<span class="hljs-number">0</span>:<br>                    add+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> add &lt;= threshold:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案3：完成旅途的最少时间">二分答案3：完成旅途的最少时间</h4><p><a href="https://leetcode.cn/problems/minimum-time-to-complete-trips/description/">leetcode2187</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumTime</span>(<span class="hljs-params">self, time: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], totalTrips: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        min_element=<span class="hljs-built_in">min</span>(time)<br>        high=totalTrips*min_element<br>        low=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low&lt;high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            add=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> time:<br>                add+=mid//t<br>            <span class="hljs-keyword">if</span> add&gt;=totalTrips:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low        <br></code></pre></td></tr></table></figure><p>大佬的一行代码,<a href="https://leetcode.cn/problems/minimum-time-to-complete-trips/">出自灵神题解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumTime</span>(<span class="hljs-params">self, time: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], totalTrips: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">return</span> bisect_left(<span class="hljs-built_in">range</span>(totalTrips * <span class="hljs-built_in">min</span>(time)), totalTrips, key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">sum</span>(x // t <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> time))<br></code></pre></td></tr></table></figure><p><a href="http://t.csdnimg.cn/49rq0">bisect用法</a></p><h4 id="二分答案4：每个小孩最多能分到多少糖果">二分答案4：每个小孩最多能分到多少糖果</h4><p><a href="https://leetcode.cn/problems/maximum-candies-allocated-to-k-children/description/">leetcode2226</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumCandies</span>(<span class="hljs-params">self, candies: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low=<span class="hljs-number">0</span><br>        high=<span class="hljs-built_in">max</span>(candies)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> (low+high)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>:<br>                mid+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(t//mid <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> candies)&gt;=k:<br>                low=mid<br>            <span class="hljs-keyword">else</span>:<br>                high=mid-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案5-准时到达的列车最小时速">二分答案5:准时到达的列车最小时速</h4><p><a href="https://leetcode.cn/problems/minimum-speed-to-arrive-on-time/description/">leetcode1870</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minSpeedOnTime</span>(<span class="hljs-params">self, dist: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], hour: <span class="hljs-built_in">float</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> hour&lt;=<span class="hljs-built_in">len</span>(dist)-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        n=<span class="hljs-built_in">len</span>(dist)<br>        high=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(dist),ceil(dist[n-<span class="hljs-number">1</span>]/(hour-n+<span class="hljs-number">1</span>)))<br>        low=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(ceil(d/mid) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> dist) - ceil(dist[n-<span class="hljs-number">1</span>]/mid) + dist[n-<span class="hljs-number">1</span>]/mid &lt;=hour:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案6：在-D-天内送达包裹的能力">二分答案6：在 D 天内送达包裹的能力</h4><p><a href="https://leetcode.cn/problems/capacity-to-ship-packages-within-d-days/description/">leetcode1011</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">shipWithinDays</span>(<span class="hljs-params">self, weights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], days: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        high=<span class="hljs-built_in">sum</span>(weights)<br>        low=<span class="hljs-built_in">max</span>(weights)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            t=<span class="hljs-number">1</span><br>            cnt=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> weights:<br>                <span class="hljs-keyword">if</span> cnt+w&lt;=mid:<br>                    cnt+=w<br>                <span class="hljs-keyword">else</span>:<br>                    cnt=w<br>                    t+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> t&gt;days:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> t&gt;days:<br>                low=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high=mid<br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案7：分配给商店的最多商品的最小值">二分答案7：分配给商店的最多商品的最小值</h4><p><a href="https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store/description/">leetcode2064</a></p><p>根据贪心原则，一旦确定x，每个商店分配的商品数就应该尽可能靠近x，否则就可能存在一个比x更优的结果</p><p>所以在x确定之后，能够分配的商店数量为<code>sum(ceil(q/mid) for q in quantities)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimizedMaximum</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, quantities: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        high=<span class="hljs-built_in">max</span>(quantities)<br>        low=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(ceil(q/mid) <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> quantities)&lt;=n:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案8：袋子里最少数目的球">二分答案8：袋子里最少数目的球</h4><p><a href="https://leetcode.cn/problems/minimum-limit-of-balls-in-a-bag/description/">leetcode1760</a></p><p>二分下界：每个袋子最少一个球，low=1</p><p>二分上界：最坏的情况是不进行操作，开销为球最多的袋子中的球数，high=max(nums)</p><p>假设已经确定开销为mid，球数为n的袋子至少需要操作<code>ceil(n/mid)-1</code>次，总开销为<code>sum(ceil(n/mid)-1 for n in nums)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumSize</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], maxOperations: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low=<span class="hljs-number">1</span><br>        high=<span class="hljs-built_in">max</span>(nums)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(ceil(n/mid)-<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums)&lt;=maxOperations:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案9：制作-m-束花所需的最少天数">二分答案9：制作 m 束花所需的最少天数</h4><p><a href="https://leetcode.cn/problems/minimum-number-of-days-to-make-m-bouquets/">leetcode1482</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDays</span>(<span class="hljs-params">self, bloomDay: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(bloomDay)&lt;m*k:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        low=<span class="hljs-built_in">min</span>(bloomDay)<br>        high=<span class="hljs-built_in">max</span>(bloomDay)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            cnt=<span class="hljs-number">0</span><br>            bunch=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> flow <span class="hljs-keyword">in</span> bloomDay:<br>                <span class="hljs-keyword">if</span> flow&lt;=mid:<br>                    cnt+=<span class="hljs-number">1</span><br>                    <span class="hljs-keyword">if</span> cnt==k:<br>                        cnt=<span class="hljs-number">0</span><br>                        bunch+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    cnt=<span class="hljs-number">0</span><br>                <span class="hljs-keyword">if</span> bunch&gt;=m:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> bunch &gt;= m:<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案10：可以到达的最远建筑">二分答案10：可以到达的最远建筑</h4><p><a href="https://leetcode.cn/problems/furthest-building-you-can-reach/description/">leetcode1642</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">furthestBuilding</span>(<span class="hljs-params">self, heights: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], bricks: <span class="hljs-built_in">int</span>, ladders: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low=<span class="hljs-number">0</span><br>        high=<span class="hljs-built_in">len</span>(heights)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=ceil((low+high)/<span class="hljs-number">2</span>)<br>            arr=[]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,mid+<span class="hljs-number">1</span>):<br>                diff=heights[i]-heights[i-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> diff&gt;<span class="hljs-number">0</span>:<br>                    arr.append(diff)<br>            flag=<span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(arr)&gt;ladders:<br>                ar=<span class="hljs-built_in">sorted</span>(arr)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>(ar[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ar)-ladders))&gt;bricks:<br>                    flag=<span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> flag:<br>                low=mid<br>            <span class="hljs-keyword">else</span>:<br>                high=mid-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案11：可移除字符的最大数目">二分答案11：可移除字符的最大数目</h4><p><a href="https://leetcode.cn/problems/maximum-number-of-removable-characters/description/">leetcode1898</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumRemovals</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, p: <span class="hljs-built_in">str</span>, removable: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low=<span class="hljs-number">0</span><br>        high=<span class="hljs-built_in">len</span>(removable)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=ceil((low+high)/<span class="hljs-number">2</span>)<br>            arr=<span class="hljs-built_in">list</span>(s)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(mid):<br>                arr[removable[i]]=<span class="hljs-string">&quot;0&quot;</span><br>            i=<span class="hljs-number">0</span><br>            j=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(arr) <span class="hljs-keyword">and</span> j&lt;<span class="hljs-built_in">len</span>(p):<br>                <span class="hljs-keyword">if</span> arr[i]==p[j]:<br>                    j+=<span class="hljs-number">1</span><br>                i+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j==<span class="hljs-built_in">len</span>(p):<br>                low=mid<br>            <span class="hljs-keyword">else</span>:<br>                high=mid-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h4 id="二分答案12：水位上升的泳池中游泳">二分答案12：水位上升的泳池中游泳</h4><p><a href="https://leetcode.cn/problems/swim-in-rising-water/description/">leetcode778</a></p><p>二分+dfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">swimInWater</span>(<span class="hljs-params">self, grid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        low=<span class="hljs-number">0</span><br>        high=<span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(grid_) <span class="hljs-keyword">for</span> grid_ <span class="hljs-keyword">in</span> grid)<br>        n=<span class="hljs-built_in">len</span>(grid)<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid=(low+high)//<span class="hljs-number">2</span><br>            arr=[[<span class="hljs-number">0</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>            i=<span class="hljs-number">0</span><br>            j=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,j</span>):<br>                <span class="hljs-keyword">if</span> i==n-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j==n-<span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> mid &lt; grid[i][j]:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                flag=<span class="hljs-literal">False</span><br>                arr[i][j]=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> i-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[i-<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mid&gt;=grid[i-<span class="hljs-number">1</span>][j]:<br>                    flag=dfs(i-<span class="hljs-number">1</span>,j)<br>                <span class="hljs-keyword">if</span> flag:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> i+<span class="hljs-number">1</span>&lt;n <span class="hljs-keyword">and</span> arr[i+<span class="hljs-number">1</span>][j]==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mid&gt;=grid[i+<span class="hljs-number">1</span>][j]:<br>                    flag=dfs(i+<span class="hljs-number">1</span>,j)<br>                <span class="hljs-keyword">if</span> flag:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> j-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arr[i][j-<span class="hljs-number">1</span>]==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mid&gt;=grid[i][j-<span class="hljs-number">1</span>]:<br>                    flag=dfs(i,j-<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> flag:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> j+<span class="hljs-number">1</span>&lt;n <span class="hljs-keyword">and</span> arr[i][j+<span class="hljs-number">1</span>]==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mid&gt;=grid[i][j+<span class="hljs-number">1</span>]:<br>                    flag=dfs(i,j+<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> flag<br>            <span class="hljs-keyword">if</span> dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>):<br>                high=mid<br>            <span class="hljs-keyword">else</span>:<br>                low=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> low<br></code></pre></td></tr></table></figure><h2 id="4-链表专题">(4)链表专题</h2><h3 id="链表1：移除链表元素">链表1：移除链表元素</h3><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/description/">leetcode203</a></p><p>使用虚拟头节点:</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * struct ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode *next;</span><br><span class="hljs-comment"> *     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeElements</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>,head);<br>        ListNode* pre=dummyhead;<br>        ListNode* cur=head;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val==val)<br>            &#123;<br>                pre-&gt;next=cur-&gt;next;<br>                <span class="hljs-keyword">delete</span> cur;<br>                cur=pre-&gt;next;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                pre=pre-&gt;next;<br>                cur=cur-&gt;next;<br>            &#125;<br>        &#125;<br>        head=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>不使用虚拟头节点:</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## Definition for singly-linked list.</span><br><span class="hljs-comment">## class ListNode:</span><br><span class="hljs-comment">##     def __init__(self, val=0, next=None):</span><br><span class="hljs-comment">##         self.val = val</span><br><span class="hljs-comment">##         self.next = next</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">removeElements</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode], val: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        <span class="hljs-keyword">while</span> head!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> head.val==val:<br>            head=head.<span class="hljs-built_in">next</span><br>        p=head<br>        <span class="hljs-keyword">while</span> p!=<span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> p.<span class="hljs-built_in">next</span>!=<span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> p.<span class="hljs-built_in">next</span>.val==val:<br>                p.<span class="hljs-built_in">next</span>=p.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                p=p.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> head<br></code></pre></td></tr></table></figure><h3 id="链表2-设计链表">链表2:设计链表</h3><p><a href="https://leetcode.cn/problems/design-linked-list/description/">leetcode707</a></p><p>单向链表(使用虚拟头节点):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// struct ListNode </span><br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//     int val;</span><br><span class="hljs-comment">//     ListNode *next;</span><br><span class="hljs-comment">//     ListNode() : val(0), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment">//     ListNode(int x) : val(x), next(nullptr) &#123;&#125;</span><br><span class="hljs-comment">//     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyLinkedList</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    ListNode* root;<br>    <span class="hljs-built_in">MyLinkedList</span>() <br>    &#123;<br>        root=<span class="hljs-keyword">new</span> ListNode;<br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        ListNode* p=root;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;index&amp;&amp;p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;next;<br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;index)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> p-&gt;val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* add=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val,root-&gt;next);<br>        root-&gt;next=add;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* p=root;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            p=p-&gt;next;<br>        p-&gt;next=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        --index;<br>        ListNode* p=root;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;index&amp;&amp;p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;next;<br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;index)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            ListNode* add=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(val,p-&gt;next);<br>            p-&gt;next=add;<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(index&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span>;<br>        --index;<br>        ListNode* p=root;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;index&amp;&amp;p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;next;<br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(i&lt;index)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ListNode* rubbish=p-&gt;next;<br>                p-&gt;next=p-&gt;next-&gt;next;<br>                <span class="hljs-keyword">delete</span> rubbish;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表3-反转链表">链表3:反转链表</h3><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">leetcode206</a></p><p>方法1:栈</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        stack&lt;ListNode*&gt;sta;<br>        <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            sta.<span class="hljs-built_in">push</span>(head);<br>            head=head-&gt;next;<br>        &#125;<br>        head=sta.<span class="hljs-built_in">top</span>();<br>        sta.<span class="hljs-built_in">pop</span>();<br>        ListNode* p=head;<br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            p-&gt;next=sta.<span class="hljs-built_in">top</span>();<br>            p=p-&gt;next;<br>            sta.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        p-&gt;next=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2:双指针</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* pre=<span class="hljs-literal">nullptr</span>,*cur=head;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            ListNode* tmp=cur-&gt;next;<br>            cur-&gt;next=pre;<br>            pre=cur;<br>            cur=tmp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法3:递归</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* pre=<span class="hljs-literal">nullptr</span>,*cur=head;<br>        function&lt;ListNode*(ListNode*,ListNode*)&gt;recursion=[&amp;](ListNode* cur,ListNode* pre)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)    <br>                <span class="hljs-keyword">return</span> pre;<br>            ListNode* tmp=cur-&gt;next;<br>            cur-&gt;next=pre;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursion</span>(tmp,cur);<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">recursion</span>(head,<span class="hljs-literal">nullptr</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表4-两两交换链表中的节点">链表4:两两交换链表中的节点</h3><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">leetcode24</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">swapPairs</span><span class="hljs-params">(ListNode* head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>||head-&gt;next==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> head;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>,head);<br>        ListNode* pre=dummyhead;<br>        ListNode* first=head;<br>        ListNode* second=head-&gt;next;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            first-&gt;next=second-&gt;next;<br>            second-&gt;next=first;<br>            pre-&gt;next=second;<br>            pre=first;<br>            first=pre-&gt;next;<br>            <span class="hljs-keyword">if</span>(first==<span class="hljs-literal">nullptr</span>||first-&gt;next==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">break</span>;<br>            second=first-&gt;next;<br>        &#125;<br>        first=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> first;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表5-删除链表的倒数第N个节点">链表5:删除链表的倒数第N个节点</h3><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">leetcode19</a></p><p>快慢指针法:先将右指针右移n个节点,再将左右指针一起右移,直到右指针的下一个位置为<code>nullptr</code>,此时左指针指向待删除节点的上一个位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(ListNode* head, <span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>,head);<br>        ListNode* left=dummyhead,*right=dummyhead;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            right=right-&gt;next;<br>        <span class="hljs-keyword">while</span>(right-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            right=right-&gt;next;<br>            left=left-&gt;next;<br>        &#125;<br>        ListNode* rubbish=left-&gt;next;<br>        left-&gt;next=left-&gt;next-&gt;next;<br>        <span class="hljs-keyword">delete</span> rubbish;<br>        ListNode* ret=dummyhead-&gt;next;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表6：相交链表">链表6：相交链表</h3><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">leetcode160</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode *headA, ListNode *headB)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* p=headA;<br>        <span class="hljs-type">int</span> alen=<span class="hljs-number">1</span>,blen=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;next;<br>            ++alen;<br>        &#125;<br>        p=headB;<br>        <span class="hljs-keyword">while</span>(p-&gt;next!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;next;<br>            ++blen;<br>        &#125;<br>        ListNode* p1;<br>        <span class="hljs-keyword">if</span>(alen&gt;blen)<br>        &#123;<br>            p=headA;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;alen-blen;++i)<br>            &#123;<br>                p=p-&gt;next;<br>                <span class="hljs-keyword">if</span>(p==headB)<br>                    <span class="hljs-keyword">return</span> headB;<br>            &#125;<br>            p1=headB;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            p=headB;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;blen-alen;++i)<br>            &#123;<br>                p=p-&gt;next;<br>                <span class="hljs-keyword">if</span>(p==headA)<br>                    <span class="hljs-keyword">return</span> headA;<br>            &#125;<br>            p1=headA;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">nullptr</span>&amp;&amp;p1!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(p==p1)<br>                <span class="hljs-keyword">return</span> p;<br>            p=p-&gt;next;<br>            p1=p1-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链表7：环形链表II">链表7：环形链表II*</h3><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">leetcode142</a></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">[--------a-------][---------b--------]</span><br><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">__ &lt;--快慢指针在这里相遇</span><br><span class="hljs-emphasis">         |__</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span><span class="hljs-emphasis">_____</span>__|<br><span class="hljs-code">                 [----------c--------]</span><br><br></code></pre></td></tr></table></figure><p>快慢指针法：</p><p>快指针一次移动2个节点，慢指针一次移动1个节点，移动完成后才检查二者是否相遇，两者相对速度1个节点，所以不会存在快指针越过慢指针而没有检测到的情况</p><p>对于慢指针 t=a+b</p><p>可以证明慢指针在圈里的路程不足一圈，不是t=a+b+k(b+c), 因为慢指针进入圈内时，快指针已经在圈内，慢指针要转完一圈，快指针就会转两圈，所以在慢指针转完一圈之前，快指针就会和慢指针相遇</p><p>对于快指针 2t=a+b+n(b+c)</p><p>所以a=(n-1)(b+c)+c</p><p>让两个指针分别从头节点和相遇点出发，二者一定会在环的入口处相遇</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>, 空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode *<span class="hljs-title">detectCycle</span><span class="hljs-params">(ListNode *head)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ListNode* fast=head,*slow=head;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(fast==<span class="hljs-literal">nullptr</span>||slow==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            fast=fast-&gt;next;<br>            <span class="hljs-keyword">if</span>(fast==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>            fast=fast-&gt;next;<br>            slow=slow-&gt;next;<br>            <span class="hljs-keyword">if</span>(fast==slow)<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ListNode* p=head;<br>        <span class="hljs-keyword">while</span>(p!=fast)<br>        &#123;<br>            p=p-&gt;next;<br>            fast=fast-&gt;next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">detectCycle</span>(<span class="hljs-params">self, head: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        fast=head<br>        slow=head<br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> fast==<span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> slow==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            fast=fast.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> fast==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>            fast=fast.<span class="hljs-built_in">next</span><br>            slow=slow.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> fast==slow:<br>                <span class="hljs-keyword">break</span><br>        p=head<br>        <span class="hljs-keyword">while</span> p!=fast:<br>            p=p.<span class="hljs-built_in">next</span><br>            fast=fast.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> p<br></code></pre></td></tr></table></figure><h2 id="5-哈希表专题">(5)哈希表专题</h2><h3 id="哈希查找分析">哈希查找分析</h3><p>装填因子<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mfrac><mrow><mtext>表中记录数</mtext><mi>n</mi></mrow><mrow><mtext>散列表长度</mtext><mi>m</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\alpha =\frac{表中记录数n}{散列表长度m}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2173em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8723em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">散列表长度</span><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">表中记录数</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>二次探测、伪随机探测、再哈希法的平均查找长度是</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mtext>成功</mtext></msub><mo>≈</mo><mo>−</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S_{成功}\approx -\frac 1\alpha \ln(1-\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">成功</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>S</mi><mtext>失败</mtext></msub><mo>≈</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_{失败}\approx \frac 1{1-\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">失败</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>在表中任选一个位置，不为空的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，为空的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">1-\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>。</p><p>查找k个位置后结束，对应的概率为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>α</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\alpha ^{k-1}(1-\alpha)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span></p><p>查找失败的概率为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi mathvariant="normal">∞</mi></munderover><mi>k</mi><msup><mi>α</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sum_{k=1}^{\infin}k\alpha^{k-1}(1-\alpha)=\frac 1{1-\alpha}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.9535em;vertical-align:-1.3021em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0908em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>查找关键字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>的探测序列和插入关键字<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>的探测序列是相同的，假设<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>是第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">k+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个被插入到散列表中的关键字，则此前散列表的装填因子为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>i</mi><mi>m</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac im</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，查找<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>的探测次数的期望为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mfrac><mi>i</mi><mi>m</mi></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac 1{1-\frac im}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4945em;vertical-align:-0.6494em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.5914em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8551em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6494em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。则查找成功的探测次数的期望为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mfrac><mi>m</mi><mrow><mi>m</mi><mo>−</mo><mi>i</mi></mrow></mfrac></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mi>m</mi><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><mfrac><mn>1</mn><mrow><mi>m</mi><mo>−</mo><mi>i</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mi>m</mi><mo>−</mo><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mi>m</mi></munderover><mfrac><mn>1</mn><mi>k</mi></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>≤</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><msubsup><mo>∫</mo><mrow><mi>m</mi><mo>−</mo><mi>n</mi></mrow><mi>m</mi></msubsup><mfrac><mn>1</mn><mi>x</mi></mfrac><mi>d</mi><mi>x</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mi>m</mi><mrow><mi>m</mi><mo>−</mo><mi>n</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><mi>ln</mi><mo>⁡</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>−</mo><mi>α</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><mfrac><mn>1</mn><mi>α</mi></mfrac><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>α</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}\frac 1n \sum_{i=0}^{n-1}\frac{m}{m-i} &amp;= \frac mn \sum_{i=0}^{n-1}\frac 1{m-i}\\&amp;= \frac 1\alpha \sum_{k=m-n+1}^m \frac 1k \\&amp;\le \frac 1\alpha \int_{m-n}^m \frac 1x dx\\&amp;=\frac 1\alpha \ln\frac m{m-n}\\&amp;= \frac 1\alpha \ln \frac 1{1-\alpha}\\&amp;= -\frac 1\alpha\ln(1-\alpha)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:16.4642em;vertical-align:-7.9821em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.4821em;"><span style="top:-10.4821em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.253em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:-4.1783em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:-1.5866em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:0.8042em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span><span style="top:3.195em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.9821em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:8.4821em;"><span style="top:-10.4821em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-7.253em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3604em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-4.1783em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.4143em;"><span style="top:-1.7881em;margin-left:-0.4445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.8129em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9703em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span><span style="top:-1.5866em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:0.8042em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:3.195em;"><span class="pstrut" style="height:3.8011em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7.9821em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h3 id="哈希表1-有效的字母异位词">哈希表1: 有效的字母异位词</h3><p><a href="https://leetcode.cn/problems/valid-anagram/description/">leetcode242</a></p><p>简单题,大佬们可以直接跳过</p><p>用数组代替哈希表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isAnagram</span><span class="hljs-params">(string s, string t)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">vec</span>(<span class="hljs-number">26</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:s)<br>            ++vec[ch-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:t)<br>            --vec[ch-<span class="hljs-string">&#x27;a&#x27;</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; n:vec)<br>            <span class="hljs-keyword">if</span>(n!=<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="哈希表2-两个数组的交集">哈希表2:两个数组的交集</h3><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">leetcode349</a></p><p>简单题,大佬们可以直接跳过</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">intersection</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-built_in">hash</span>=<span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>            <span class="hljs-built_in">hash</span>[n]=<span class="hljs-number">1</span><br>        ret=[]<br>        <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>            <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">hash</span>[n]==<span class="hljs-number">1</span>:<br>                ret.append(n)<br>                <span class="hljs-built_in">hash</span>[n]=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="哈希表3-快乐数">哈希表3:快乐数</h3><p><a href="https://leetcode.cn/problems/happy-number/description/">leetcode202</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll=<span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;ll,<span class="hljs-type">int</span>&gt;hash;<br>        <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(hash[n]==<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span> <br>                hash[n]=<span class="hljs-number">1</span>;<br>            ll num=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(n!=<span class="hljs-number">0</span>)<br>            &#123;<br>                ll tmp=n%<span class="hljs-number">10</span>;<br>                num+=tmp*tmp;<br>                n/=<span class="hljs-number">10</span>;<br>            &#125;<br>            n=num;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="哈希表4-两数之和">哈希表4:两数之和</h3><p><a href="https://leetcode.cn/problems/two-sum/description/">leetcode1</a></p><p>经典好题</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> num:nums)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(hash[target-num]!=<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> &#123;i<span class="hljs-number">-1</span>,hash[target-num]<span class="hljs-number">-1</span>&#125;;<br>            <span class="hljs-keyword">else</span><br>                hash[num]=i;<br>            ++i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        dic=<span class="hljs-built_in">dict</span>()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(le):<br>            <span class="hljs-keyword">if</span> nums[i] <span class="hljs-keyword">in</span> dic:<br>                <span class="hljs-keyword">return</span> [dic[nums[i]],i]<br>            <span class="hljs-keyword">else</span>:<br>                dic[target-nums[i]]=i<br></code></pre></td></tr></table></figure><h3 id="哈希表5-四数相加II">哈希表5:四数相加II</h3><p><a href="https://leetcode.cn/problems/4sum-ii/description/">leetcode454</a></p><p>四个for循环<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^4)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>会超时</p><p>两组两个for循环,配合哈希表可以通过,时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fourSumCount</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums3, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums4)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>        <span class="hljs-type">int</span> n=nums1.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                ++hash[-nums1[i]-nums2[j]];<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                ret+=hash[nums3[i]+nums4[j]];<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="哈希表6-赎金信">哈希表6:赎金信</h3><p><a href="https://leetcode.cn/problems/ransom-note/">leetcode383</a></p><p>简单题,大佬们可以直接跳过</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canConstruct</span>(<span class="hljs-params">self, ransomNote: <span class="hljs-built_in">str</span>, magazine: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-built_in">hash</span>=&#123;&#125;<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> magazine:<br>            <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>:<br>                <span class="hljs-built_in">hash</span>[ch]=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">hash</span>[ch]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> ransomNote:<br>            <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">hash</span>[ch]==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">hash</span>[ch]-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="哈希表6-9-两数之和-II-输入有序数组">哈希表6.9:两数之和 II - 输入有序数组</h3><p><a href="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/description/">leetcode167</a></p><p><strong>这一题是给下一题打基础用的</strong></p><p>推荐看<a href="https://www.bilibili.com/video/BV1bP411c7oJ/">灵神的视频</a></p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=numbers.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> sum;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            sum=numbers[left]+numbers[right];<br>            <span class="hljs-keyword">if</span>(sum==target)<br>            &#123;<br>                <span class="hljs-keyword">return</span> vector&lt;<span class="hljs-type">int</span>&gt;&#123;left+<span class="hljs-number">1</span>,right+<span class="hljs-number">1</span>&#125;;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&gt;target)<br>                --right;<br>            <span class="hljs-keyword">else</span> <br>                ++left;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, numbers: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        left=<span class="hljs-number">0</span><br>        right=<span class="hljs-built_in">len</span>(numbers)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            tmp=numbers[left]+numbers[right]<br>            <span class="hljs-keyword">if</span> tmp==target:<br>                <span class="hljs-keyword">return</span> [left+<span class="hljs-number">1</span>,right+<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">elif</span> tmp&gt;target:<br>                right-=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                left+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a href="#%E5%9B%BE%E8%AE%BA1%EF%BC%9A%E7%BB%9F%E8%AE%A1%E7%82%B9%E5%AF%B9%E7%9A%84%E6%95%B0%E7%9B%AE">课后作业</a></p><h3 id="哈希表7-三数之和">哈希表7:三数之和</h3><p><a href="https://leetcode.cn/problems/3sum/">leetcode15</a></p><p>这题不好做 :tired_face:</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;i&lt;nums.<span class="hljs-built_in">size</span>()&amp;&amp;nums[i]==nums[i<span class="hljs-number">-1</span>])<br>                ++i;<br>            <span class="hljs-keyword">if</span>(i==nums.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-type">int</span> left=i+<span class="hljs-number">1</span>,right=nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(left&lt;right)<br>            &#123;<br>                <span class="hljs-type">int</span> sum=-(nums[left]+nums[right]);<br>                <span class="hljs-keyword">if</span>(sum==nums[i]&amp;&amp;left&lt;right)<br>                &#123;<br>                    vector&lt;<span class="hljs-type">int</span>&gt;tmp=&#123;nums[i],nums[left],nums[right]&#125;;<br>                    ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                    <span class="hljs-keyword">while</span>(right&gt;<span class="hljs-number">0</span>&amp;&amp;left&lt;right&amp;&amp;nums[right<span class="hljs-number">-1</span>]==nums[right])<br>                        --right;<br>                    <span class="hljs-keyword">if</span>(right&gt;<span class="hljs-number">0</span>)<br>                        --right;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;nums[i])<br>                    --right;<br>                <span class="hljs-keyword">else</span> <br>                    ++left;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        nums.sort()<br>        ret=[]<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        idx=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> idx&lt;le-<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">while</span> idx&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> idx&lt;le <span class="hljs-keyword">and</span> nums[idx]==nums[idx-<span class="hljs-number">1</span>]:<br>                idx+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span>(idx&gt;=le-<span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">break</span><br>            target=-nums[idx]<br>            left=idx+<span class="hljs-number">1</span><br>            right=le-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> left&lt;right:<br>                add=nums[left]+nums[right]<br>                <span class="hljs-keyword">if</span> add==target:<br>                    ret.append([nums[idx],nums[left],nums[right]])<br>                    <span class="hljs-keyword">while</span> right&gt;left <span class="hljs-keyword">and</span> nums[right]==nums[right-<span class="hljs-number">1</span>]:<br>                        right-=<span class="hljs-number">1</span><br>                    right-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> add&gt;target:<br>                    right-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    left+=<span class="hljs-number">1</span><br>            idx+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h2 id="6-字符串专题">(6)字符串专题</h2><h3 id="字符串1：反转字符串">字符串1：反转字符串</h3><p><a href="https://leetcode.cn/problems/reverse-string/">leetcode344</a></p><p>双指针交换就行</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseString</span><span class="hljs-params">(vector&lt;<span class="hljs-type">char</span>&gt;&amp; s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> right=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)<br>        &#123;<br>            s[left]=s[left]^s[right];<br>            s[right]=s[left]^s[right];<br>            s[left]=s[left]^s[right];<br>            ++left;<br>            --right;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">character[]</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">void</span>&#125; Do not return anything, modify s in-place instead.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseString = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) <br>&#123;<br>    <span class="hljs-keyword">let</span> n=s.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> left=<span class="hljs-number">0</span>,right=n-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(left&lt;right)<br>    &#123;<br>        <span class="hljs-keyword">let</span> tmp=s[left];<br>        s[left]=s[right];<br>        s[right]=tmp;<br>        ++left;<br>        --right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串2-反转字符串II">字符串2:反转字符串II</h3><p><a href="https://leetcode.cn/problems/reverse-string-ii/">leetcode541</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">reverseStr</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> k)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(;flag;++n)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> beg=s.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">2</span>*n*k;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">2</span>*n*k+k&gt;=s.<span class="hljs-built_in">size</span>())<br>                flag=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">auto</span> end=s.<span class="hljs-built_in">begin</span>()+<span class="hljs-built_in">min</span>((<span class="hljs-type">int</span>)s.<span class="hljs-built_in">size</span>(),<span class="hljs-number">2</span>*n*k+k);<br>            <span class="hljs-built_in">reverse</span>(beg,end);<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串3-替换空格">字符串3:替换空格</h3><p><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/description/">leetcode剑指offer05</a></p><p>算法很简单,可以拿这个检验一下自己对库函数的熟悉程度</p><p>Javascript:不用库函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> replaceSpace = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) <br>&#123;<br>    <span class="hljs-keyword">let</span> tmp=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-property">length</span>;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]!=<span class="hljs-string">&#x27; &#x27;</span>)<br>            tmp+=s[i];<br>        <span class="hljs-keyword">else</span><br>            tmp+=<span class="hljs-string">&quot;%20&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;;<br></code></pre></td></tr></table></figure><p>直接调用库函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> replaceSpace = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) <br>&#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">replaceAll</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&quot;%20&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>python也有这个库函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">replaceSpace</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> s.replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;%20&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="字符串4-反转字符串中的单词">字符串4:反转字符串中的单词</h3><p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/description/">leetcode151</a></p><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">string</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) <br>&#123;<br>    <span class="hljs-keyword">let</span> arr=[];<br>    <span class="hljs-keyword">let</span> tmp=<span class="hljs-string">&quot;&quot;</span>,ret=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-property">length</span>;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(s[i]!==<span class="hljs-string">&quot; &quot;</span>)<br>        &#123;<br>            tmp+=s[i];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp!=<span class="hljs-string">&quot;&quot;</span>)<br>        &#123;<br>            arr.<span class="hljs-title function_">push</span>(tmp);<br>            tmp=<span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp!=<span class="hljs-string">&quot;&quot;</span>)<br>        arr.<span class="hljs-title function_">push</span>(tmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=arr.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>    &#123;<br>        ret+=arr[i];<br>        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>)<br>            ret+=<span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;;<br></code></pre></td></tr></table></figure><p>大佬的调用内置函数解法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseWords = <span class="hljs-keyword">function</span>(<span class="hljs-params">s</span>) &#123;<br>    <span class="hljs-keyword">return</span> s.<span class="hljs-title function_">trim</span>().<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/\s+/</span>).<span class="hljs-title function_">reverse</span>().<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><ul><li><p>trim()函数用于去除字符串两端的空格（空白字符），并返回处理后的字符串。</p></li><li><p>以下出自<a href="https://blog.csdn.net/Amouzy/article/details/123075333">CSDN split( /\s+/)什么意思</a><br><code>split( /\s+/)</code>的意思是将字符串以满足<code>/\s+/</code>这个正则表达式的字符来分割为一个数组。<br>分割满足条件包括：<br>制表符，换行符，回车符，垂直制表符，换页符在内的一个至无穷个类空格字符。<br>其中：<br><code>\s</code>表示：匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。<br>+表示：匹配前面的子表达式一次或多次。<br><code>split()</code>：是js的一个用于把一个字符串分割成字符串数组的方法。</p></li><li><p><code>join()</code>方法就是将array数据中每个元素都转为字符串，用自定义的连接符分割</p></li></ul><h3 id="字符串6-找出字符串中第一个匹配项的下标">字符串6:找出字符串中第一个匹配项的下标</h3><p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">leetcode28</a></p><p><strong>KMP算法的经典例题</strong></p><h4 id="方法1：KMP算法">方法1：KMP算法</h4><p>next数组 样例1：</p><table><thead><tr><th>a</th><th>a</th><th>b</th><th>a</th><th>a</th><th>f</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>0</td></tr></tbody></table><p>next数组 样例2：</p><table><thead><tr><th>a</th><th>a</th><th>b</th><th>a</th><th>a</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>2</td><td>2</td><td>3</td></tr></tbody></table><p><strong>遍历的过程中</strong>，遍历<code>next</code>数组的指针指向下标为<code>j</code>处时，遇到不匹配，就回退到下标<code>next[j-1]</code>处</p><p><code>next[i]=k</code>的含义是在<code>needle</code>中前<code>i</code>个字母的最大相同前后缀长度,即满足<code>needle[0:k]==needle[i-k+1:i+1] (i-k+1&gt;=k)</code>的最大<code>k</code>值   (注:  <code>needle[a:b]</code>的含义是<code>needle</code>字符串中下标<code>&gt;=a</code>且<code>&lt;b</code>的子串)</p><p><strong>next数组的构造过程</strong></p><p>i指向后缀表的末尾，j指向前缀表的末尾，每轮循环需要判断前后缀表的末尾元素能否加入前后缀表中，也就是比较<code>needle[i]</code>和<code>needle[j]</code>是否相等</p><p>前缀表和后缀表等长，末尾元素加入前后缀表后，长度都是<code>j+1</code></p><p>初始化<code>i=1</code>，<code>j=0</code></p><p>详细注释版 C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> <span class="hljs-comment">//KMP</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=haystack.<span class="hljs-built_in">size</span>(),m=needle.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//根据needle构造next数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">next</span>(m);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;<span class="hljs-comment">//初始化</span><br>        <span class="hljs-keyword">while</span>(i&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(needle[i]==needle[j])<span class="hljs-comment">//在上一轮匹配的基础上，当前i,j指向的两个字母相同，可以延长前后缀的长度</span><br>            &#123;<br>                next[i]=j+<span class="hljs-number">1</span>;<span class="hljs-comment">//j+1表示当前前后缀的长度比上一个回合增加1</span><br>                ++i;<br>                ++j;<span class="hljs-comment">//i,j同步后移</span><br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<span class="hljs-comment">//needle[0]!=needle[i]，next[i]填0，并将i后移</span><br>            &#123;<br>                ++i;<br>            &#125;<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">//尝试缩短前后缀的长度，说不定能匹配</span><br>            &#123;<br>                j=next[j<span class="hljs-number">-1</span>];<span class="hljs-comment">//needle[0:i]满足 最长前后缀的长度为j,但是当前的i,j指向的字母不相等，无法在原来的基础上延长。next[j-1]&lt;=j，且满足next[j-1]也是needle[0:i]前后缀的长度的一种合法取值（虽然不是最长的）。令j=next[j-1]，尝试缩短前后缀的长度，说不定能匹配</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//打印next数组检验</span><br>        <span class="hljs-comment">// for(int&amp; num:next)</span><br>        <span class="hljs-comment">//     cout&lt;&lt;num&lt;&lt;&#x27; &#x27;;</span><br>        <span class="hljs-comment">//匹配字符串</span><br>        i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(haystack[i]==needle[j])<span class="hljs-comment">//匹配</span><br>            &#123;<br>                ++i;<br>                ++j;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                ++i;<br>            <span class="hljs-keyword">else</span><br>                j=next[j<span class="hljs-number">-1</span>];<span class="hljs-comment">//遍历next数组的指针指向下标为j处时，遇到不匹配，就回退到下标next[j-1]处。next[j-1]&lt;=j，且满足next[j-1]也是needle[0:i]前后缀的长度的一种合法取值（虽然不是最长的）。</span><br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==m)<br>            <span class="hljs-keyword">return</span> i-m;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>(细心的你会发现,构造next数组和匹配字符串过程代码是相似的)</p><p>简洁优雅版 C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> <span class="hljs-comment">//KMP</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=haystack.<span class="hljs-built_in">size</span>(),m=needle.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//构造next数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">next</span>(m);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(needle[i]==needle[j])<br>                next[i++]=++j;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                next[i++]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                j=next[j<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-comment">//匹配字符串</span><br>        i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(haystack[i]==needle[j])<br>            &#123;<br>                ++i;<br>                ++j;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                ++i;<br>            <span class="hljs-keyword">else</span><br>                j=next[j<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==m)<br>            <span class="hljs-keyword">return</span> i-m;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>时间复杂度</strong></p><p>参考<a href="http://t.csdn.cn/zchFx">KMP算法-时间复杂度分析</a></p><p><code>n</code>是模式串<code>haystack</code>的长度,<code>m</code>是待匹配的字符串<code>needle</code>的长度</p><blockquote><p>计算next数组时的比较次数介于[m,2m]。<br>遍历比较的比较次数介于[n,2n],最坏情形形如T=“aaaabaaaab”,P=“aaaaa”。<br>所以算法时间复杂度时<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo>+</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m+n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</p></blockquote><p><strong>空间复杂度</strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>m</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(m)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span></p><h4 id="方法2：Rabin-Karp算法">方法2：Rabin-Karp算法</h4><p>这个算法实际上就是哈希表，ChatGPT的解释:</p><blockquote><p>Rabin-Karp算法是一种字符串匹配算法，用于在一个文本串中查找一个模式串的出现位置。</p><p>算法的基本思想是通过哈希函数将模式串和文本串的子串进行比较。首先计算模式串的哈希值，然后依次计算文本串中所有长度为模式串长度的子串的哈希值，并与模式串的哈希值进行比较。如果哈希值相同，再逐个比较子串和模式串的每个字符是否相同，直到找到完全匹配的子串或者遍历完所有子串。</p><p>算法的优点是可以在平均情况下达到线性时间复杂度O(n+m)，其中n是文本串的长度，m是模式串的长度。然而，在最坏情况下，算法的时间复杂度为O((n-m+1)m)，即当哈希值的冲突比较多时，效率会下降。</p><p>总结来说，Rabin-Karp算法通过哈希函数加速字符串匹配，适用于处理长文本串和短模式串的情况。它在实际应用中常被用于字符串搜索、文本编辑器等领域。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;string,<span class="hljs-type">int</span>&gt;hash;<br>        hash[needle]=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> m=needle.<span class="hljs-built_in">size</span>(),n=haystack.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=n-m;++i)<br>            <span class="hljs-keyword">if</span>(hash[haystack.<span class="hljs-built_in">substr</span>(i,m)]==<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">return</span> i;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串7：重复的子字符串">字符串7：重复的子字符串</h3><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/description/">leetcode459</a></p><p>方法1：双指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">repeatedSubstringPattern</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        i=<span class="hljs-number">0</span>  <span class="hljs-comment">## 慢指针</span><br>        j=<span class="hljs-number">1</span>  <span class="hljs-comment">## 快指针</span><br>        n=<span class="hljs-built_in">len</span>(s)<br>        tmp=<span class="hljs-number">0</span>  <span class="hljs-comment">## 记录flag改变时j的值，以便恢复</span><br>        flag=<span class="hljs-number">0</span>  <span class="hljs-comment">## flag=0表示未找到重复的部分 =1表示找到了</span><br>        <span class="hljs-keyword">while</span> j&lt;n:<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> s[i]==s[j] <span class="hljs-keyword">and</span> n%j==<span class="hljs-number">0</span>:<br>                    flag=<span class="hljs-number">1</span><br>                    tmp=j<br>                    i+=<span class="hljs-number">1</span><br>                    j+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    j+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> s[i]!=s[j]:<br>                    i=<span class="hljs-number">0</span><br>                    j=tmp+<span class="hljs-number">1</span><br>                    flag=<span class="hljs-number">0</span><br>                <span class="hljs-keyword">else</span>:<br>                    i+=<span class="hljs-number">1</span><br>                    j+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> flag==<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>方法2：转化为字符串匹配问题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">repeatedSubstringPattern</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> (s+s).<span class="hljs-built_in">find</span>(s,<span class="hljs-number">1</span>)!=s.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法3：转化为字符串匹配问题，并利用KMP算法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(string haystack, string needle)</span> <span class="hljs-comment">//KMP</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=haystack.<span class="hljs-built_in">size</span>(),m=needle.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//构造next数组</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">next</span>(m);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">1</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(needle[i]==needle[j])<br>                next[i++]=++j;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                next[i++]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                j=next[j<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-comment">//打印next数组检验</span><br>        <span class="hljs-comment">// for(int&amp; num:next)</span><br>        <span class="hljs-comment">//     cout&lt;&lt;num&lt;&lt;&#x27; &#x27;;</span><br>        <span class="hljs-comment">//匹配字符串</span><br>        i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;n&amp;&amp;j&lt;m)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(haystack[i]==needle[j])<br>            &#123;<br>                ++i;<br>                ++j;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                ++i;<br>            <span class="hljs-keyword">else</span><br>                j=next[j<span class="hljs-number">-1</span>];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(j==m)<br>            <span class="hljs-keyword">return</span> i-m;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">repeatedSubstringPattern</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        string hay=s+s;<br>        hay.<span class="hljs-built_in">erase</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">strStr</span>(hay,s)!=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串8：有效数字">字符串8：有效数字</h3><p><a href="https://leetcode.cn/problems/valid-number/description/">leetcode65</a></p><h4 id="方法1：暴力if-else">方法1：暴力if-else</h4><p>笨人的这段代码比较乱，建议去看方法2，更易理解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;+&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>            ++idx;<br>        <span class="hljs-type">int</span> flag1=<span class="hljs-number">0</span>;<span class="hljs-comment">//是否存在整数位</span><br>        <span class="hljs-type">int</span> flag2=<span class="hljs-number">0</span>;<span class="hljs-comment">//判断小数点是否出现,对应小数点前没有数字的情况</span><br>        <span class="hljs-type">int</span> flag3=<span class="hljs-number">0</span>;<span class="hljs-comment">//判断小数点是否出现,对应小数点前有数字的情况</span><br>        <span class="hljs-type">int</span> flag4=<span class="hljs-number">0</span>;<span class="hljs-comment">//小数点后有没有整数位</span><br>        <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            ++idx;<br>            flag2=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span>(idx&lt;s.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                ++idx;<br>                flag1=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">return</span> flag1;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag2==<span class="hljs-number">1</span>&amp;&amp;flag1==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(flag2==<span class="hljs-number">1</span>&amp;&amp;idx&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(flag2==<span class="hljs-number">0</span>&amp;&amp;idx&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>        &#123;<br>            ++idx;<br>            flag3=<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(idx&lt;s.<span class="hljs-built_in">size</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                ++idx;<br>                flag4=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag1==<span class="hljs-number">0</span>&amp;&amp;flag4==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <br>        <span class="hljs-keyword">if</span>(idx&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;(s[idx]==<span class="hljs-string">&#x27;e&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;E&#x27;</span>))<br>        &#123;<br>            ++idx;<br>            <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;+&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                ++idx;<br>            <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">int</span> flag5=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(idx&lt;s.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                &#123;<br>                    ++idx;<br>                    flag5=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag5==<span class="hljs-number">1</span>&amp;&amp;idx==s.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(idx==s.<span class="hljs-built_in">size</span>())<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>0ms 5.8MB</em></p><h4 id="方法2：有限状态自动机">方法2：有限状态自动机</h4><p><a href="https://leetcode.cn/problems/valid-number/solutions/564188/you-xiao-shu-zi-by-leetcode-solution-298l/">参考文献</a></p><ol start="0"><li>初始状态</li><li>符号位</li><li>整数部分</li><li>左侧有整数的小数点</li><li>左侧无整数的小数点（根据前面的第二条额外规则，需要对左侧有无整数的两种小数点做区分）</li><li>小数部分</li><li>字符 e</li><li>指数部分的符号位</li><li>指数部分的整数部分</li></ol><p>(图片出自力扣官方题解)</p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230812093747065.png" alt="image-20230812093747065"></p><p>最后只有<code>cur==2||cur==3||cur==5||cur==8</code>时返回<code>true</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> cur=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前状态</span><br>        <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前下标</span><br>        <span class="hljs-keyword">for</span>(;idx&lt;s.<span class="hljs-built_in">size</span>();++idx)<br>        &#123;<br>            <span class="hljs-keyword">switch</span>(cur)<br>            &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;+&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                        cur=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        cur=<span class="hljs-number">4</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        cur=<span class="hljs-number">4</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">2</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        cur=<span class="hljs-number">3</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;e&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;E&#x27;</span>)<br>                        cur=<span class="hljs-number">6</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;    <br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;e&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;E&#x27;</span>)<br>                        cur=<span class="hljs-number">6</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">else</span> <br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;e&#x27;</span>)<br>                        cur=<span class="hljs-number">6</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;+&#x27;</span>||s[idx]==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                        cur=<span class="hljs-number">7</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">8</span>;<br>                    <span class="hljs-keyword">else</span> <br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">8</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                    <span class="hljs-keyword">if</span>(s[idx]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[idx]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>                        cur=<span class="hljs-number">8</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//此时idx==s.size()</span><br>        <span class="hljs-keyword">return</span> cur==<span class="hljs-number">2</span>||cur==<span class="hljs-number">3</span>||cur==<span class="hljs-number">5</span>||cur==<span class="hljs-number">8</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>0ms 5.9MB</em></p><h4 id="方法3：正则表达式">方法3：正则表达式</h4><p><a href="http://t.csdn.cn/Rr1Xm">C++的正则表达式库</a></p><p><a href="http://t.csdn.cn/54KHb">正则表达式大全</a></p><p>代码粘贴自评论区大佬</p><p>正在表达式的构造耗时很长，所以建议采用第二段代码，避免重复构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(string str)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">regex_match</span>(str, <span class="hljs-built_in">regex</span>(<span class="hljs-string">&quot;[+-]?(\\d+\\.?\\d*|\\.\\d+)([Ee][+-]?\\d+)?&quot;</span>));<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>1884ms,259.3MB</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> regex pattern;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isNumber</span><span class="hljs-params">(string str)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">regex_match</span>(str, pattern);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">const</span> regex <span class="hljs-title">Solution::pattern</span><span class="hljs-params">(<span class="hljs-string">&quot;[+-]?(\\d+\\.?\\d*|\\.\\d+)([Ee][+-]?\\d+)?&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><p><em>12ms 9MB</em></p><h3 id="字符串9：验证IP地址">字符串9：验证IP地址</h3><p>正则表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> regex pattern4;<br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> regex pattern6;<br>    <span class="hljs-function">string <span class="hljs-title">validIPAddress</span><span class="hljs-params">(string queryIP)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">regex_match</span>(queryIP,pattern4))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv4&quot;</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">regex_match</span>(queryIP,pattern6))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;IPv6&quot;</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Neither&quot;</span>;        <br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">const</span> regex <span class="hljs-title">Solution::pattern4</span><span class="hljs-params">(<span class="hljs-string">&quot;((25[0-5]|2[0-4][0-9]|1\\d\\d|[1-9]?\\d)\\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|1\\d\\d|[1-9]?\\d)&quot;</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">const</span> regex <span class="hljs-title">Solution::pattern6</span><span class="hljs-params">(<span class="hljs-string">&quot;([0-9a-fA-F]&#123;1,4&#125;\\:)&#123;7&#125;([0-9a-fA-F]&#123;1,4&#125;)&quot;</span>)</span></span>;<br></code></pre></td></tr></table></figure><h3 id="字符串10：实现Trie-前缀树">字符串10：实现Trie(前缀树)</h3><p><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/description/">leetcode208</a></p><p>字典树的经典例题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> ch;<br>    vector&lt;TrieNode*&gt;next;<br>    <span class="hljs-built_in">TrieNode</span>(<span class="hljs-type">char</span> ch_=<span class="hljs-number">0</span>):<span class="hljs-built_in">ch</span>(ch_),<span class="hljs-built_in">next</span>(<span class="hljs-number">27</span>,<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trie</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    TrieNode* root;<br>    <span class="hljs-built_in">Trie</span>() &#123;<br>        root=<span class="hljs-keyword">new</span> TrieNode;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        TrieNode* cur=root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; w:word)<br>        &#123;<br>            <span class="hljs-type">int</span> idx=w-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(cur-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>)<br>                cur=cur-&gt;next[idx];<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cur-&gt;next[idx]=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TrieNode</span>(w);<br>                cur=cur-&gt;next[idx];<br>            &#125;<br>        &#125;<br>        cur-&gt;next[<span class="hljs-number">26</span>]=<span class="hljs-keyword">new</span> TrieNode;<span class="hljs-comment">//标识单词的结尾</span><br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">search</span><span class="hljs-params">(string word)</span> </span>&#123;<br>        TrieNode* cur=root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; w:word)<br>        &#123;<br>            <span class="hljs-type">int</span> idx=w-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(cur-&gt;next[idx]==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                cur=cur-&gt;next[idx];<br>        &#125;<br>        <span class="hljs-keyword">return</span> cur-&gt;next[<span class="hljs-number">26</span>]!=<span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">startsWith</span><span class="hljs-params">(string prefix)</span> </span>&#123;<br>        TrieNode* cur=root;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; w:prefix)<br>        &#123;<br>            <span class="hljs-type">int</span> idx=w-<span class="hljs-string">&#x27;a&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(cur-&gt;next[idx]==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">else</span><br>                cur=cur-&gt;next[idx];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your Trie object will be instantiated and called as such:</span><br><span class="hljs-comment"> * Trie* obj = new Trie();</span><br><span class="hljs-comment"> * obj-&gt;insert(word);</span><br><span class="hljs-comment"> * bool param_2 = obj-&gt;search(word);</span><br><span class="hljs-comment"> * bool param_3 = obj-&gt;startsWith(prefix);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="字符串11：连接词">字符串11：连接词</h3><p><a href="https://leetcode.cn/problems/concatenated-words/description/">leetcode472</a></p><p>前缀树+记忆化搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span>&#123;<span class="hljs-comment">//字典树节点</span><br><span class="hljs-keyword">public</span>:<br>    vector&lt;TrieNode*&gt;next;<br>    <span class="hljs-built_in">TrieNode</span>():<span class="hljs-built_in">next</span>(<span class="hljs-number">27</span>,<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findAllConcatenatedWordsInADict</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        TrieNode* root=<span class="hljs-keyword">new</span> TrieNode;<br>        <span class="hljs-keyword">for</span>(string&amp; str:words)<span class="hljs-comment">//将所有的单词插入前缀树（字典树）</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(str.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            TrieNode* cur=root;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:str)<br>            &#123;<br>                <span class="hljs-type">int</span> idx=ch-<span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(cur-&gt;next[idx]==<span class="hljs-literal">nullptr</span>)<br>                &#123;<br>                    cur-&gt;next[idx]=<span class="hljs-keyword">new</span> TrieNode;<br>                    cur=cur-&gt;next[idx];<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    cur=cur-&gt;next[idx];<br>            &#125;<br>            cur-&gt;next[<span class="hljs-number">26</span>]=<span class="hljs-keyword">new</span> TrieNode;<span class="hljs-comment">//标识单词的结尾</span><br>        &#125;<br>        vector&lt;string&gt;ret;<br>        <span class="hljs-keyword">for</span>(string&amp; str:words)<span class="hljs-comment">//查找符合题意的字符串</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(str.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            queue&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;que;<span class="hljs-comment">//利用队列</span><br>            que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>));<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isvisited</span>(str.<span class="hljs-built_in">size</span>());<br>            <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>            &#123;<br>                <br>                <span class="hljs-type">int</span> pos=que.<span class="hljs-built_in">front</span>().first+<span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> pre=que.<span class="hljs-built_in">front</span>().second;<br>                que.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(pos!=str.<span class="hljs-built_in">size</span>())<span class="hljs-comment">//记忆化搜索，否则会超时</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(isvisited[pos]==<span class="hljs-number">0</span>)<br>                        isvisited[pos]=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                TrieNode*cur=root;<br>                <span class="hljs-type">int</span> i;<br>                <span class="hljs-keyword">for</span>(i=pos;i&lt;str.<span class="hljs-built_in">size</span>();++i)<br>                &#123;<br>                    <span class="hljs-type">int</span> idx=str[i]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>                    <span class="hljs-keyword">if</span>(cur-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>)<br>                        cur=cur-&gt;next[idx];<br>                    <span class="hljs-keyword">else</span> <br>                        <span class="hljs-keyword">break</span>;  <br>                    <span class="hljs-keyword">if</span>(cur-&gt;next[<span class="hljs-number">26</span>]!=<span class="hljs-literal">nullptr</span>)<br>                        que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(i,pos));<br>                    <br>                &#125;<br>                <span class="hljs-keyword">if</span>(pos==str.<span class="hljs-built_in">size</span>()&amp;&amp;pre&gt;<span class="hljs-number">0</span>)<br>                &#123;<br>                    ret.<span class="hljs-built_in">emplace_back</span>(str);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>前缀树+DFS+记忆化搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">bool</span> isend;<span class="hljs-comment">//是不是单词的结尾</span><br>    vector&lt;TrieNode*&gt;next;<br>    <span class="hljs-built_in">TrieNode</span>(<span class="hljs-type">bool</span> isend_=<span class="hljs-literal">false</span>):<span class="hljs-built_in">isend</span>(isend_),<span class="hljs-built_in">next</span>(<span class="hljs-number">26</span>,<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    TrieNode* root;<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findAllConcatenatedWordsInADict</span><span class="hljs-params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;<br>        root=<span class="hljs-keyword">new</span> TrieNode;<br>        <span class="hljs-built_in">sort</span>(words.<span class="hljs-built_in">begin</span>(),words.<span class="hljs-built_in">end</span>(),[&amp;](string&amp; a,string&amp; b)&#123;<br>            <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>()&lt;b.<span class="hljs-built_in">size</span>();<br>        &#125;);<br>        vector&lt;string&gt;ret;<br>        <span class="hljs-keyword">for</span>(string&amp; str:words)<br>        &#123;<br>            <span class="hljs-comment">// if(str.size()==0)</span><br>            <span class="hljs-comment">//     continue;</span><br>            vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">isvisited</span>(str.<span class="hljs-built_in">size</span>(),<span class="hljs-literal">false</span>);<br>            <span class="hljs-type">bool</span> flag=<span class="hljs-literal">false</span>;<br>            function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(flag)<br>                    <span class="hljs-keyword">return</span>;<br>                isvisited[i]=<span class="hljs-literal">true</span>;<br>                TrieNode* p=root;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;str.<span class="hljs-built_in">size</span>();++j)<br>                &#123;<br>                    <br>                    <span class="hljs-type">int</span> idx=str[j]-<span class="hljs-string">&#x27;a&#x27;</span>;<br>                    <span class="hljs-keyword">if</span>(p-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>)<br>                    &#123;<br>                        p=p-&gt;next[idx];<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(j==str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>&amp;&amp;p-&gt;isend)<br>                        &#123;<br>                            ret.<span class="hljs-built_in">emplace_back</span>(str);<br>                            flag=<span class="hljs-literal">true</span>;<br>                        &#125;<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(p-&gt;isend)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(!isvisited[j+<span class="hljs-number">1</span>])<br>                            <span class="hljs-built_in">dfs</span>(j+<span class="hljs-number">1</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(flag)<br>                        <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;;<br>            <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>            TrieNode* p=root;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:str)<br>            &#123;<br>                <span class="hljs-type">int</span> idx=ch-<span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(p-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>)<br>                    p=p-&gt;next[idx];<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    p-&gt;next[idx]=<span class="hljs-keyword">new</span> TrieNode;<br>                    p=p-&gt;next[idx];<br>                &#125;<br>            &#125;<br>            p-&gt;isend=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串12：字符流">字符串12：字符流</h3><p><a href="https://leetcode.cn/problems/stream-of-characters/">leetcode1032</a></p><p><strong>AC自动机的经典例题</strong></p><p><a href="https://oi-wiki.org/string/ac-automaton">OI-wiki:AC自动机</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieNode</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    TrieNode* fail;<br>    vector&lt;TrieNode*&gt;next;<br>    <span class="hljs-type">bool</span> isend;<br>    <span class="hljs-built_in">TrieNode</span>():<span class="hljs-built_in">fail</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">next</span>(<span class="hljs-number">26</span>,<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">isend</span>(<span class="hljs-literal">false</span>)&#123;&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamChecker</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    TrieNode* root;<br>    TrieNode* pos;<br>    <span class="hljs-built_in">StreamChecker</span>(vector&lt;string&gt;&amp; words) <br>    &#123;<br>        root=<span class="hljs-keyword">new</span> TrieNode;<br>        root-&gt;fail=root;<br>        pos=root;<br>        <span class="hljs-keyword">for</span>(string&amp; word:words)<span class="hljs-comment">//第一次遍历：构造字典树</span><br>        &#123;<br>            TrieNode* p=root;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:word)<br>            &#123;<br>                <span class="hljs-type">int</span> idx=ch-<span class="hljs-string">&#x27;a&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(p-&gt;next[idx]==<span class="hljs-literal">nullptr</span>)<br>                    p-&gt;next[idx]=<span class="hljs-keyword">new</span> TrieNode;<br>                p=p-&gt;next[idx];<br>            &#125;<br>            p-&gt;isend=<span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">//设置fail指针 注意：这里必须广度优先遍历，不允许深度优先遍历</span><br>        queue&lt;TrieNode*&gt;q;<br>        q.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            TrieNode* front=q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(front-&gt;next[i]==<span class="hljs-literal">nullptr</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">else</span><br>                    q.<span class="hljs-built_in">push</span>(front-&gt;next[i]);<br>                TrieNode* f=front-&gt;fail;<br>                <span class="hljs-keyword">while</span>(f!=root&amp;&amp;f-&gt;next[i]==<span class="hljs-literal">nullptr</span>)<br>                    f=f-&gt;fail;<br>                <span class="hljs-keyword">if</span>(front!=root&amp;&amp;f-&gt;next[i]!=<span class="hljs-literal">nullptr</span>)<br>                    front-&gt;next[i]-&gt;fail=f-&gt;next[i];<br>                <span class="hljs-keyword">else</span><br>                    front-&gt;next[i]-&gt;fail=root;<br>            &#125;<br>        &#125;  <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">char</span> letter)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> idx=letter-<span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">while</span>(pos!=root&amp;&amp;pos-&gt;next[idx]==<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            pos=pos-&gt;fail;<br>        &#125;<br>        TrieNode* tmp=pos;<br>        <span class="hljs-keyword">if</span>(pos-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>)<br>            pos=pos-&gt;next[idx];<br>        <span class="hljs-keyword">while</span>(tmp!=root)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(tmp-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>&amp;&amp;tmp-&gt;next[idx]-&gt;isend)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span><br>                tmp=tmp-&gt;fail;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tmp-&gt;next[idx]!=<span class="hljs-literal">nullptr</span>&amp;&amp;tmp-&gt;next[idx]-&gt;isend)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Your StreamChecker object will be instantiated and called as such:</span><br><span class="hljs-comment"> * StreamChecker* obj = new StreamChecker(words);</span><br><span class="hljs-comment"> * bool param_1 = obj-&gt;query(letter);</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="7-栈和队列专题">(7)栈和队列专题</h2><p>栈是一种后进先出的数据结构（Last in, First out. LIFO）</p><p>应用：括号匹配问题等</p><p>队列是一种先进先出的数据结构(First in,First out. FIFO)</p><p>应用：cpu资源的竞争问题、解决主机和外部设备速度不匹配的问题、电子商务系统中的缓冲队列</p><p>优先队列：</p><p>用堆实现，具备最高进先出（largest-in,first-out）的特点</p><p>操作有查找、插入一个新元素和删除三种</p><h3 id="栈和队列4-有效的括号">栈和队列4:有效的括号</h3><p><a href="https://leetcode.cn/problems/valid-parentheses/">leetcode20</a></p><p>相当基础的栈的应用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    stack&lt;<span class="hljs-type">char</span>&gt;st;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;s[i]!=<span class="hljs-number">0</span>;i++)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;(&#x27;</span>||s[i]==<span class="hljs-string">&#x27;[&#x27;</span>||s[i]==<span class="hljs-string">&#x27;&#123;&#x27;</span>)<br>                st.<span class="hljs-built_in">push</span>(s[i]);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span> <br>                &#123;<br>                    ch=st.<span class="hljs-built_in">top</span>();<br>                    st.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(ch-s[i])&lt;<span class="hljs-number">3</span>&amp;&amp;ch!=s[i])<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(st.<span class="hljs-built_in">empty</span>())<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈和队列5-删除字符串中的所有相邻重复项">栈和队列5:删除字符串中的所有相邻重复项</h3><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/">leetcode1047</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">removeDuplicates</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;<span class="hljs-type">char</span>&gt;sta;<br>        <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:s)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(sta.<span class="hljs-built_in">empty</span>()||sta.<span class="hljs-built_in">top</span>()!=ch)<br>            &#123;<br>                sta.<span class="hljs-built_in">push</span>(ch);<br>                ++len;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                sta.<span class="hljs-built_in">pop</span>();<br>                --len;<br>            &#125;<br>        &#125;<br>        <span class="hljs-function">string <span class="hljs-title">ret</span><span class="hljs-params">(len,<span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=len<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            ret[i]=sta.<span class="hljs-built_in">top</span>();<br>            sta.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈和队列6-逆波兰表达式求值">栈和队列6:逆波兰表达式求值</h3><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/">leetcode150</a></p><p>以下为王道考研数据结构的笔记:栈在表达式求值中的应用</p><p>序号表示各个运算符的执行顺序</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">((15 ÷ (7-(1 + 1)))×3) - (2+(1 + 1))   中缀表达式<br>     ③   ②   ①     ④   ⑦    ⑥   ⑤                    <br>         ① ② ③   ④       ⑤ ⑥ ⑦                                   <br>15<span class="hljs-number"> 7 </span>1<span class="hljs-number"> 1 </span>+ - ÷<span class="hljs-number"> 3 </span>×<span class="hljs-number"> 2 </span>1<span class="hljs-number"> 1 </span>+ + -         后缀表达式<br></code></pre></td></tr></table></figure><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230725205911577.png" alt="image-20230725205911577"></p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230725210612767.png" alt="image-20230725210612767"></p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230725213918526.png" alt="image-20230725213918526"></p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230725222156240.png" alt="image-20230725222156240"></p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">evalRPN</span><span class="hljs-params">(vector&lt;string&gt;&amp; tokens)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt;sta;<br>        <span class="hljs-keyword">for</span>(string&amp; s:tokens)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s==<span class="hljs-string">&quot;+&quot;</span>||s==<span class="hljs-string">&quot;-&quot;</span>||s==<span class="hljs-string">&quot;*&quot;</span>||s==<span class="hljs-string">&quot;/&quot;</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> a=sta.<span class="hljs-built_in">top</span>();<br>                sta.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">int</span> b=sta.<span class="hljs-built_in">top</span>();<br>                sta.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">switch</span>(s[<span class="hljs-number">0</span>])<br>                &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                        sta.<span class="hljs-built_in">push</span>(b*a);<br>                    <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                        sta.<span class="hljs-built_in">push</span>(b/a);<br>                    <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                        sta.<span class="hljs-built_in">push</span>(b+a);<br>                    <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                        sta.<span class="hljs-built_in">push</span>(b-a);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> num=<span class="hljs-built_in">stoi</span>(s);<br>                sta.<span class="hljs-built_in">push</span>(num);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sta.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈和队列7：基本计算器">栈和队列7：基本计算器</h3><p><a href="https://leetcode.cn/problems/basic-calculator/">leetcode224</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;<span class="hljs-type">char</span>&gt;oper;<br>        stack&lt;<span class="hljs-type">int</span>&gt;nums;<br>        <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">char</span> ch=s[i];<br>            <span class="hljs-keyword">if</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                tmp*=<span class="hljs-number">10</span>;<br>                tmp+=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>==s.<span class="hljs-built_in">size</span>()||s[i+<span class="hljs-number">1</span>]&lt;<span class="hljs-string">&#x27;0&#x27;</span>||s[i+<span class="hljs-number">1</span>]&gt;<span class="hljs-string">&#x27;9&#x27;</span>)<br>                &#123;<br>                    nums.<span class="hljs-built_in">push</span>(tmp);<br>                    tmp=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                    oper.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;(&#x27;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;+&#x27;</span>||ch==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                    &#123;<br>                        <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>                        <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;s[j]==<span class="hljs-string">&#x27; &#x27;</span>)<br>                            --j;<br>                        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s[j]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>()&amp;&amp;(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>||oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;-&#x27;</span>))<br>                    &#123;<br>                        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left+right);<br>                        <span class="hljs-keyword">else</span><br>                            nums.<span class="hljs-built_in">push</span>(left-right);<br>                        oper.<span class="hljs-built_in">pop</span>();<br>                    &#125;<br>                    oper.<span class="hljs-built_in">push</span>(ch);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;)&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>())<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                        &#123;<br>                            oper.<span class="hljs-built_in">pop</span>();<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left+right);<br>                        <span class="hljs-keyword">else</span><br>                            nums.<span class="hljs-built_in">push</span>(left-right);<br>                        oper.<span class="hljs-built_in">pop</span>();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                nums.<span class="hljs-built_in">push</span>(left+right);<br>            <span class="hljs-keyword">else</span><br>                nums.<span class="hljs-built_in">push</span>(left-right);<br>            oper.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈和队列8：基本计算器II">栈和队列8：基本计算器II</h3><p><a href="https://leetcode.cn/problems/basic-calculator-ii/">leetcode227</a></p><p>代码在上一题的基础上改了一下，可以支持对正负数的±*/和括号运算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calculate</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;<span class="hljs-type">char</span>&gt;oper;<br>        stack&lt;<span class="hljs-type">int</span>&gt;nums;<br>        <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">char</span> ch=s[i];<br>            <span class="hljs-keyword">if</span>(ch&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)<br>            &#123;<br>                tmp*=<span class="hljs-number">10</span>;<br>                tmp+=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>                <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span>==s.<span class="hljs-built_in">size</span>()||s[i+<span class="hljs-number">1</span>]&lt;<span class="hljs-string">&#x27;0&#x27;</span>||s[i+<span class="hljs-number">1</span>]&gt;<span class="hljs-string">&#x27;9&#x27;</span>)<br>                &#123;<br>                    nums.<span class="hljs-built_in">push</span>(tmp);<br>                    tmp=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                    oper.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;(&#x27;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;+&#x27;</span>||ch==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                    &#123;<br>                        <span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;<br>                        <span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;s[j]==<span class="hljs-string">&#x27; &#x27;</span>)<br>                            --j;<br>                        <span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>||s[j]==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>()&amp;&amp;(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>||oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;-&#x27;</span>||oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;*&#x27;</span>||oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;/&#x27;</span>))<br>                    &#123;<br>                        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left+right);<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left-right);<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;*&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left*right);<br>                        <span class="hljs-keyword">else</span><br>                            nums.<span class="hljs-built_in">push</span>(left/right);<br>                        oper.<span class="hljs-built_in">pop</span>();<br>                    &#125;<br>                    oper.<span class="hljs-built_in">push</span>(ch);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;*&#x27;</span>||ch==<span class="hljs-string">&#x27;/&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>()&amp;&amp;(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;*&#x27;</span>||oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;/&#x27;</span>))<br>                    &#123;<br>                        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;*&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left*right);<br>                        <span class="hljs-keyword">else</span><br>                            nums.<span class="hljs-built_in">push</span>(left/right);<br>                        oper.<span class="hljs-built_in">pop</span>();<br>                    &#125;<br>                    oper.<span class="hljs-built_in">push</span>(ch);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;)&#x27;</span>)<br>                &#123;<br>                    <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>())<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;(&#x27;</span>)<br>                        &#123;<br>                            oper.<span class="hljs-built_in">pop</span>();<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                        <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>                        nums.<span class="hljs-built_in">pop</span>();<br>                        <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                            nums.<span class="hljs-built_in">push</span>(left+right);<br>                        <span class="hljs-keyword">else</span><br>                            nums.<span class="hljs-built_in">push</span>(left-right);<br>                        oper.<span class="hljs-built_in">pop</span>();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(!oper.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> right=nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> left=nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;+&#x27;</span>)<br>                nums.<span class="hljs-built_in">push</span>(left+right);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;-&#x27;</span>)<br>                nums.<span class="hljs-built_in">push</span>(left-right);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(oper.<span class="hljs-built_in">top</span>()==<span class="hljs-string">&#x27;*&#x27;</span>)<br>                nums.<span class="hljs-built_in">push</span>(left*right);<br>            <span class="hljs-keyword">else</span><br>                nums.<span class="hljs-built_in">push</span>(left/right);<br>            oper.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> nums.<span class="hljs-built_in">top</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="优先队列">==优先队列==</h3><h4 id="优先队列1：股票价格波动">优先队列1：股票价格波动</h4><p><a href="https://leetcode.cn/problems/stock-price-fluctuation/description/">leetcode2034</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StockPrice</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt;big;<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt;low;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;delb;<br>    unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;dell;<br>    <span class="hljs-type">int</span> cur;<br>    <span class="hljs-built_in">StockPrice</span>() &#123;<br>cur=<span class="hljs-number">-1</span>;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">int</span> timestamp, <span class="hljs-type">int</span> price)</span> </span>&#123;<br>        cur=<span class="hljs-built_in">max</span>(cur,timestamp);<br>    <span class="hljs-keyword">if</span>(hash.<span class="hljs-built_in">find</span>(timestamp)==hash.<span class="hljs-built_in">end</span>())<br>        &#123;<br>            hash[timestamp]=price;<br>            big.<span class="hljs-built_in">push</span>(price);<br>            low.<span class="hljs-built_in">push</span>(price);<br>        &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-type">int</span> old=hash[timestamp];<br>++delb[old];<br>++dell[old];<br>        hash[timestamp]=price;<br>            big.<span class="hljs-built_in">push</span>(price);<br>        low.<span class="hljs-built_in">push</span>(price);<br>&#125;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">current</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> hash[cur];<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maximum</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> b=big.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span>(delb[b]!=<span class="hljs-number">0</span>)<br>&#123;<br>--delb[b];<br>big.<span class="hljs-built_in">pop</span>();<br>b=big.<span class="hljs-built_in">top</span>();<br>&#125;<br><span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimum</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> m=low.<span class="hljs-built_in">top</span>();<br><span class="hljs-keyword">while</span>(dell[m]!=<span class="hljs-number">0</span>)<br>&#123;<br>--dell[m];<br>low.<span class="hljs-built_in">pop</span>();<br>m=low.<span class="hljs-built_in">top</span>();<br>&#125;<br><span class="hljs-keyword">return</span> m;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="8-二叉树专题">(8)二叉树专题</h2><h3 id="树的理论基础">树的理论基础</h3><h4 id="树的性质">树的性质</h4><table><thead><tr><th>度为m的树</th><th>m叉树</th></tr></thead><tbody><tr><td>任意结点的度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\le m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></td><td>任意结点的度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo><mi>m</mi></mrow><annotation encoding="application/x-tex">\le m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span></td></tr><tr><td>至少有一个结点的度 = m</td><td>允许所有节点的度都 &lt; m</td></tr></tbody></table><ol><li><p>树中的结点数等于所有结点的度数之和加1</p></li><li><p>度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>的树第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>层至多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">m^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i\ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</p></li><li><p>高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>叉树至多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac {m^h-1}{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4463em;vertical-align:-0.4033em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0429em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4033em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个结点，证明：</p></li></ol><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mn>0</mn></msup><mo>+</mo><msup><mi>m</mi><mn>1</mn></msup><mo>+</mo><mo>⋯</mo><mo>+</mo><msup><mi>m</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">m^0+m^1+\dots+m^{h-1}=\frac{m^h-1}{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><ol start="4"><li><p>高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>叉树至少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>个结点</p><p>高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>、度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>的树至少有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>+</mo><mi>m</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h+m-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个结点</p></li><li><p>具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个结点的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>叉树最小高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_m(n(m-1)+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0573em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span>，证明：</p></li></ol><p>高度最小的情况：所有结点都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>个孩子</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>（前</mtext><mi>h</mi><mo>−</mo><mn>1</mn><mtext>层最多有几个结点）</mtext><mfrac><mrow><msup><mi>m</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo>&lt;</mo><mi>n</mi><mo>≤</mo><mfrac><mrow><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mtext>（前</mtext><mi>h</mi><mtext>层最多有几个结点）</mtext></mrow><annotation encoding="application/x-tex">（前h-1层最多有几个结点）\frac {m^{h-1}-1}{m-1} &lt; n \le \frac{m^h-1}{m-1}（前h层最多有几个结点）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">（前</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord">1</span><span class="mord cjk_fallback">层最多有几个结点）</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2954em;vertical-align:-0.7693em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">（前</span><span class="mord mathnormal">h</span><span class="mord cjk_fallback">层最多有几个结点）</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>m</mi><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>≤</mo><msup><mi>m</mi><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">m^{h-1}&lt;n(m-1)+1 \le m^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9382em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>&lt;</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>≤</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">h-1&lt;\log_m(n(m-1)+1)\le h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0573em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>h</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub><mo>=</mo><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">h_{min}=\lceil \log_m(n(m-1)+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">min</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0573em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span></span></p><h4 id="二叉树的性质">二叉树的性质</h4><p>设非空二叉树中度为0、1、2的结点个数分别是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，树中结点总数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">n_0=n_2+1\tag{1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">n=n_0+n_1+n_2\tag{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><mo stretchy="false">(</mo><mtext>树的节点数等于总度数</mtext><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">n=n_1+2n_2+1 (树的节点数等于总度数+1)\tag{3}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord cjk_fallback">树的节点数等于总度数</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="tag"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p><p>(3)-(2)得到(1)式</p><ol start="4"><li>二叉树第 i 层至多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i\ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>)</li><li>高度为 h 的二叉树至多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个结点</li><li>具有 n 个结点的完全二叉树的高度 h 为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2(n+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log_2n\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> , 证明：</li></ol><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi><mo>≤</mo><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h-1}-1 &lt; n\le2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7719em;vertical-align:-0.136em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9824em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>&lt;</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>≤</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">h-1&lt;\log_2(n+1)\le h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span></span></p><p>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">h=\lceil \log_2(n+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>≤</mo><mi>n</mi><mo>&lt;</mo><msup><mn>2</mn><mi>h</mi></msup></mrow><annotation encoding="application/x-tex">2^{h-1}\le n &lt;2^h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0351em;vertical-align:-0.136em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8991em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn><mo>≤</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo>&lt;</mo><mi>h</mi></mrow><annotation encoding="application/x-tex">h-1\le \log_2n &lt;h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9386em;vertical-align:-0.2441em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span></span></p><p>则<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h=\lfloor\log_2n\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><ol start="7"><li><p>具有 n 个结点的二叉树，有 n+1 个空链域</p><p>证明：n 个结点的二叉树总共有 2n 个链域，总度数为 n-1，有 n-1 个指针是指向结点的</p><p>所以有 2n-(n-1) = n+1 个指针是空指针</p></li></ol><h5 id="满二叉树">满二叉树</h5><p>一棵高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>，且含有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个结点的二叉树</p><h5 id="完全二叉树">完全二叉树</h5><p>当且仅当其每个结点都与高度为 h 的满二叉树中编号 1~n 的结点一一对应时，称为完全二叉树</p><ul><li><p>只有最后两层可能有叶子结点</p></li><li><p>最多只有一个度为1的结点</p></li><li><p>如果某个结点度为1，则它的孩子结点一定是左孩子</p></li><li><p>对于完全二叉树，可以由结点数 n 推出度为0、1和2的结点个数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">n_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p><p>证明：</p><p>完全二叉树最多只有一个度为1的结点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn><mtext>或</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">n_1=0或1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">0</span><span class="mord cjk_fallback">或</span><span class="mord">1</span></span></span></span></p><p>又因为对于任意二叉树都有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0=n_2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mn>2</mn><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_0+n_2=2n_2+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>一定是一个奇数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><msub><mi>n</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">n=n_0+n_1+n_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，可知：</p><ul><li><p>如果完全二叉树有偶数个结点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mi>k</mi></mrow><annotation encoding="application/x-tex">n=2k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_1=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n_0=k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_2=k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></li><li><p>如果完全二叉树有奇数个结点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=2k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，则</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n_1=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub><mo>=</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">n_0=k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>2</mn></msub><mo>=</mo><mi>k</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_2=k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p></li></ul></li></ul><h5 id="完全二叉树的编号问题">完全二叉树的编号问题</h5><p><strong>如果按层序从1开始编号</strong></p><ul><li>i的左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi></mrow><annotation encoding="application/x-tex">2i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span></span></span></span></li><li>i的右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>i的父结点       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor\frac i 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>i的所在层次    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2(i+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>i</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log_2i\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">i</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><p>若完全二叉树中有n个结点,则</p><ul><li>判断结点i有左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断结点i有右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+1\le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断结点i为叶子结点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>&gt;</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i&gt;\lfloor\frac n 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>判断结点i为分支结点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>≤</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">1 \le i\le\lfloor\frac n2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li></ul><p><strong>如果按层序从0开始编号</strong></p><ul><li>i的左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li><li>i的右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">2i+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span></li><li>i的父结点       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mfrac><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor\frac {i-1} 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2007em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8557em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>i的所在层次    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\lceil \log_2(i+2)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)⌉</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\lfloor\log_2{(i+1)}\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></li></ul><p>若完全二叉树中有n个结点,则</p><ul><li>判断结点i有左孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+1 &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断结点i有右孩子       <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn><mo>&lt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i+2 &lt; n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7429em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span></li><li>判断结点i为叶子结点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">i\ge\lfloor\frac n 2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li><li>判断结点i为分支结点   <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mo>≤</mo><mi>i</mi><mo>&lt;</mo><mo stretchy="false">⌊</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">0\le i &lt; \lfloor \frac n2\rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7804em;vertical-align:-0.136em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span></span></span></li></ul><h5 id="平衡二叉树">平衡二叉树</h5><p>树上任一结点的左子树和右子树的深度之差不超过1</p><h3 id="二叉树2-递归遍历">二叉树2.递归遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/">先序遍历 leetcode144</a></p><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/description/">中序遍历 leetcode94</a></p><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/description/">后序遍历 leetcode145</a></p><p>先序遍历模板</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * struct TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode *left;</span><br><span class="hljs-comment"> *     TreeNode *right;</span><br><span class="hljs-comment"> *     TreeNode() : val(0), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) &#123;&#125;</span><br><span class="hljs-comment"> * &#125;;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* head)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span>;<br>            ret.<span class="hljs-built_in">emplace_back</span>(head-&gt;val);<br>            <span class="hljs-built_in">dfs</span>(head-&gt;left);<br>            <span class="hljs-built_in">dfs</span>(head-&gt;right);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## Definition for a binary tree node.</span><br><span class="hljs-comment">## class TreeNode:</span><br><span class="hljs-comment">##     def __init__(self, val=0, left=None, right=None):</span><br><span class="hljs-comment">##         self.val = val</span><br><span class="hljs-comment">##         self.left = left</span><br><span class="hljs-comment">##         self.right = right</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        arr=[]<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">TreeNode</span>):<br>            <span class="hljs-keyword">if</span> TreeNode==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span><br>            arr.append(TreeNode.val)<br>            dfs(TreeNode.left)<br>            dfs(TreeNode.right)<br>        dfs(root)<br>        <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure><p>中序遍历模板：</p><p>和上面代码基本一样，交换它们的顺序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">dfs</span>(head-&gt;left);<br>ret.<span class="hljs-built_in">emplace_back</span>(head-&gt;val);<br><span class="hljs-built_in">dfs</span>(head-&gt;right);<br></code></pre></td></tr></table></figure><p>后序遍历:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">dfs</span>(head-&gt;left);<br><span class="hljs-built_in">dfs</span>(head-&gt;right);<br>ret.<span class="hljs-built_in">emplace_back</span>(head-&gt;val); <br></code></pre></td></tr></table></figure><h3 id="二叉树3-非递归遍历">二叉树3.非递归遍历</h3><p>用栈模拟递归的过程</p><p><a href="https://www.bilibili.com/video/BV15f4y1W7i2?vd_source=0746909e8642dc821f4dc86699071129">写出二叉树的非递归遍历很难么？这次让你不再害怕非递归！|二叉树的非递归遍历 | 二叉树的遍历迭代法 | 前序与中</a>(参考视频)</p><h4 id="先序遍历">先序遍历:</h4><p>注意:因为栈是先进后出的,先将右子节点入栈,再让左子节点入栈</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;TreeNode*&gt;sta;<br>        sta.<span class="hljs-built_in">push</span>(root);<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            TreeNode* cur=sta.<span class="hljs-built_in">top</span>();<br>            sta.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            ret.<span class="hljs-built_in">emplace_back</span>(cur-&gt;val);<br>            sta.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>            sta.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">preorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        arr=[]<br>        stack=[root]<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(stack)!=<span class="hljs-number">0</span>:<br>            cur=stack.pop()<br>            <span class="hljs-keyword">if</span> cur==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            arr.append(cur.val)<br>            stack.append(cur.right)<br>            stack.append(cur.left)<br>        <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure><h4 id="后序遍历">后序遍历:</h4><p>前序遍历是按照   中左右   遍历的</p><p>如果把前序遍历代码中</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sta.<span class="hljs-built_in">push</span>(cur-&gt;right);<br>sta.<span class="hljs-built_in">push</span>(cur-&gt;left);<br></code></pre></td></tr></table></figure><p>颠倒顺序,  变成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">sta.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>sta.<span class="hljs-built_in">push</span>(cur-&gt;right);<br></code></pre></td></tr></table></figure><p>遍历顺序变成    中右左</p><p>最后的<code>arr</code>数组进行反转,遍历序列就会变成   左右中   后序遍历序列</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        stack&lt;TreeNode*&gt;sta;<br>        sta.<span class="hljs-built_in">push</span>(root);<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            TreeNode* cur=sta.<span class="hljs-built_in">top</span>();<br>            sta.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            ret.<span class="hljs-built_in">emplace_back</span>(cur-&gt;val);<br>            sta.<span class="hljs-built_in">push</span>(cur-&gt;left);<br>            sta.<span class="hljs-built_in">push</span>(cur-&gt;right);            <br>        &#125;<br>        <span class="hljs-built_in">reverse</span>(ret.<span class="hljs-built_in">begin</span>(),ret.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">postorderTraversal</span>(<span class="hljs-params">self, root: <span class="hljs-type">Optional</span>[TreeNode]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        arr=[]<br>        stack=[root]<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(stack)!=<span class="hljs-number">0</span>:<br>            cur=stack.pop()<br>            <span class="hljs-keyword">if</span> cur==<span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">continue</span><br>            arr.append(cur.val)<br>            stack.append(cur.left)<br>            stack.append(cur.right)<br>        arr=arr[::-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> arr<br></code></pre></td></tr></table></figure><h4 id="中序遍历">中序遍历:*</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<span class="hljs-comment">//1为左模式，2为右模式</span><br>        stack&lt;TreeNode*&gt;sta;<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>        TreeNode* p=root;<br>        sta.<span class="hljs-built_in">push</span>(p);<span class="hljs-comment">//孩子节点的入栈由父节点负责，头节点是例外</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<span class="hljs-comment">//左模式</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(p-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                &#123;<br>                    sta.<span class="hljs-built_in">push</span>(p-&gt;left);<br>                    p=p-&gt;left;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    flag=<span class="hljs-number">2</span>;<br>                    ret.<span class="hljs-built_in">emplace_back</span>(p-&gt;val);<br>                    sta.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><span class="hljs-comment">//右模式</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(p-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                &#123;<br>                    flag=<span class="hljs-number">1</span>;<br>                    sta.<span class="hljs-built_in">push</span>(p-&gt;right);<br>                    p=p-&gt;right;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(sta.<span class="hljs-built_in">empty</span>())<br>                        <span class="hljs-keyword">break</span>;<br>                    p=sta.<span class="hljs-built_in">top</span>();<br>                    sta.<span class="hljs-built_in">pop</span>();<br>                    ret.<span class="hljs-built_in">emplace_back</span>(p-&gt;val);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>代码随想录的简洁代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        stack&lt;TreeNode*&gt;s;<br>        s.<span class="hljs-built_in">push</span>(root);<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>        TreeNode* p=root-&gt;left;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">nullptr</span> || !s.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">if</span>(p!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                s.<span class="hljs-built_in">push</span>(p);<br>                p=p-&gt;left;<span class="hljs-comment">//左</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                p=s.<span class="hljs-built_in">top</span>();<br>                s.<span class="hljs-built_in">pop</span>();<br>                ret.<span class="hljs-built_in">emplace_back</span>(p-&gt;val);<span class="hljs-comment">//中</span><br>                p=p-&gt;right;<span class="hljs-comment">//右</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树5：层序遍历">二叉树5：层序遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/description/">leetcode102</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> treenode;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ret;<br>    queue&lt;pair&lt;treenode*,<span class="hljs-type">int</span>&gt;&gt; que;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">levelOrder</span>(TreeNode* root) <br>    &#123;<br>        que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(root,<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            treenode* cur=que.<span class="hljs-built_in">front</span>().first;<br>            <span class="hljs-type">int</span> floor=que.<span class="hljs-built_in">front</span>().second;<br>            ret.<span class="hljs-built_in">resize</span>(floor+<span class="hljs-number">1</span>);<br>            que.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">NULL</span>)<br>            que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(cur-&gt;left,floor+<span class="hljs-number">1</span>));<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">NULL</span>)<br>            que.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(cur-&gt;right,floor+<span class="hljs-number">1</span>));<br>            ret[floor].<span class="hljs-built_in">emplace_back</span>(cur-&gt;val);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树6：翻转二叉树">二叉树6：翻转二叉树</h3><p><a href="https://leetcode.cn/problems/invert-binary-tree/description/">leetcode226</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-built_in">swap</span>(cur-&gt;left,cur-&gt;right);<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>        &#125;;<br>        <span class="hljs-keyword">if</span>(root!=<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树8：对称二叉树">二叉树8：对称二叉树</h3><p><a href="https://leetcode.cn/problems/symmetric-tree/">leetcode101</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">bool</span> ret=<span class="hljs-literal">true</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,TreeNode*)&gt;dfs=[&amp;](TreeNode*p1,TreeNode*p2)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!ret)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(p1!=<span class="hljs-literal">nullptr</span>&amp;&amp;p2!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(p1-&gt;val!=p2-&gt;val)<br>                &#123;<br>                    ret=<span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-built_in">dfs</span>(p1-&gt;right,p2-&gt;left);<br>                <span class="hljs-built_in">dfs</span>(p1-&gt;left,p2-&gt;right);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p1==<span class="hljs-literal">nullptr</span>&amp;&amp;p2==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">else</span><br>                ret=<span class="hljs-literal">false</span>;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root-&gt;left,root-&gt;right);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树9-二叉树的最大深度">二叉树9:二叉树的最大深度</h3><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">leetcode104</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> idx)<br>        &#123;<br>            ret=<span class="hljs-built_in">max</span>(ret,idx);<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,idx+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,idx+<span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-keyword">if</span>(root!=<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树10-二叉树的最小深度">二叉树10:二叉树的最小深度</h3><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">leetcode111</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0x7fffffff</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,idx+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,idx+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ret=<span class="hljs-built_in">min</span>(ret,idx);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">if</span>(root!=<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">else</span><br>            ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树11-完全二叉树的节点个数">二叉树11:完全二叉树的节点个数</h3><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">leetcode222</a></p><h4 id="方法1-二分查找-位运算">方法1:二分查找+位运算</h4><p>(思路同力扣官方题解)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> h=<span class="hljs-number">2</span>;<span class="hljs-comment">//计算二叉树的层数</span><br>        TreeNode* p=root;<br>        <span class="hljs-keyword">while</span>(p-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;right;<br>            ++h;<br>        &#125;<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">1</span>,right;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;h;++i)<br>            left*=<span class="hljs-number">2</span>;<br>        right=left*<span class="hljs-number">2</span><span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)<br>        &#123;<br>            <span class="hljs-type">int</span> aver=(left+right)/<span class="hljs-number">2</span>;<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">bits</span>(h);<br>            <span class="hljs-type">int</span> tmp=aver;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=h<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>            &#123;<br>                bits[i]=tmp%<span class="hljs-number">2</span>;<br>                tmp/=<span class="hljs-number">2</span>;<br>            &#125;<br>            p=root;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;h;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(bits[i]==<span class="hljs-number">1</span>)<br>                    p=p-&gt;right;<br>                <span class="hljs-keyword">else</span><br>                    p=p-&gt;left;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>)<br>                right=aver<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span><br>                left=aver+<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1484em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>二叉树的深度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">⌈</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">h=\lceil\log_2(n+1)\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌉</span></span></span></span></p><p>首先需要<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span>的时间确定二叉树的深度</p><p>然后进行二分查找, 每次查找都要访问<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>个节点, 时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span>, 在编号为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{h}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>的节点之间进行二分查找(在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{h-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个节点之间进行二分查找),时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><msup><mn>2</mn><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(2^{h-1}))=O(h-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">h</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>.</p><p>所以总的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>h</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h^2)=O(\log^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1484em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>因为开辟了长为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的数组,空间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h4 id="方法2-寻找满二叉树">方法2:寻找满二叉树</h4><p><a href="https://www.bilibili.com/video/BV1eW4y1B7pD?vd_source=0746909e8642dc821f4dc86699071129">参考视频</a></p><p>这个方法利用递归, 更容易写:yum:</p><p>利用性质:一棵深度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的满二叉树,节点数量为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>另外, 在C++中, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>可以写作<code>1 &lt;&lt; n</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ldepth=<span class="hljs-number">1</span>,rdepth=<span class="hljs-number">1</span>;<br>        TreeNode* p=root;<br>        <span class="hljs-keyword">while</span>(p-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;left;<br>            ++ldepth;<br>        &#125;<br>        p=root;<br>        <span class="hljs-keyword">while</span>(p-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            p=p-&gt;right;<br>            ++rdepth;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ldepth==rdepth)<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span> &lt;&lt; ldepth) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">countNodes</span>(root-&gt;left)+<span class="hljs-built_in">countNodes</span>(root-&gt;right)+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>时间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1484em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>考虑最坏的情况, 也就是二叉树最大层次只有一个节点的情况, 总共需要递归<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>层, 每层递归的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>h</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">h</span><span class="mclose">)</span></span></span></span>, 所以总的时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>h</mi><mn>2</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mi>O</mi><mo stretchy="false">(</mo><msup><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msup><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(h^2)=O(\log^2n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1484em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8984em;"><span style="top:-3.1473em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><p>空间复杂度:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></p><p>在最坏的情况下, 需要递归<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>层, 故空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></p><h3 id="二叉树12-平衡二叉树">二叉树12:平衡二叉树</h3><p><a href="https://leetcode.cn/problems/balanced-binary-tree/description/">leetcode110</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">bool</span> ret=<span class="hljs-literal">true</span>;<br>        function&lt;<span class="hljs-type">int</span>(TreeNode*)&gt;depth=[&amp;](TreeNode* head)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!ret)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> ld=<span class="hljs-built_in">depth</span>(head-&gt;left);<br>            <span class="hljs-type">int</span> rd=<span class="hljs-built_in">depth</span>(head-&gt;right);<br>            ret&amp;=<span class="hljs-built_in">abs</span>(ld-rd)&lt;<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(ld,rd)+<span class="hljs-number">1</span>;<br>        &#125;;<br>        <span class="hljs-built_in">depth</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树13：二叉树的所有路径">二叉树13：二叉树的所有路径</h3><p><a href="https://leetcode.cn/problems/binary-tree-paths/description/">leetcode257</a></p><p>回溯法+<code>dfs</code></p><p>使用<code>to_string()</code>函数(包含于头文件<code>#include&lt;string&gt;</code>),快速将整数转化为字符串</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">binaryTreePaths</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;string&gt;ret;<br>        string str;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            string tmp=<span class="hljs-built_in">to_string</span>(cur-&gt;val);<br>            <span class="hljs-keyword">if</span>(cur!=root)<br>                str+=<span class="hljs-string">&quot;-&gt;&quot;</span>;<br>            str+=tmp;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(str);<br>                str=str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">0</span>,str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>-tmp.<span class="hljs-built_in">size</span>()));<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>            str=str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">0</span>,str.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>-tmp.<span class="hljs-built_in">size</span>()));<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树15-左叶子之和">二叉树15:左叶子之和</h3><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/">leetcode404</a></p><p>这题还挺简单的:smirk:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//tag=1时表示为左孩子</span><br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> tag) <br>        &#123;<br>            <span class="hljs-keyword">if</span>(tag==<span class="hljs-number">1</span>&amp;&amp;cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                ret+=cur-&gt;val;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,<span class="hljs-number">0</span>);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树16-找树左下角的值">二叉树16:找树左下角的值</h3><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/">leetcode513</a></p><p>方法1：失败案例（原因：利用对于完全二叉树的节点编号解题，编号过大造成溢出）</p><p><code>idx</code>的意义是节点在对应完全二叉树中的编号<code>n</code></p><p>深度h和n的关系为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mo>=</mo><mo stretchy="false">⌊</mo><msub><mrow><mi>log</mi><mo>⁡</mo></mrow><mn>2</mn></msub><mi>n</mi><mo stretchy="false">⌋</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h=\lfloor\log_2n\rfloor+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.207em;"><span style="top:-2.4559em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2441em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">⌋</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>左孩子的编号满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mtext>左</mtext></msub><mo>=</mo><mi>n</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_左=n&lt;&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">左</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>右孩子的编号满足<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mtext>右</mtext></msub><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>&lt;</mo><mo>&lt;</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n_右=(n&lt;&lt;1)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord cjk_fallback mtight">右</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll = <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>; <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">//idx的意义是节点在对应完全二叉树中的编号</span><br>        <span class="hljs-type">int</span> max_depth=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">-1</span>;<br>        ll ret_idx=<span class="hljs-number">0</span>;<span class="hljs-comment">//越小越好</span><br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,ll idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-type">int</span> depth=(<span class="hljs-type">int</span>)(<span class="hljs-built_in">log</span>(idx)/<span class="hljs-built_in">log</span>(<span class="hljs-number">2</span>))+<span class="hljs-number">1</span>;<br>                max_depth=<span class="hljs-built_in">max</span>(max_depth,depth);<br>                <span class="hljs-keyword">if</span>(depth==max_depth)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(ret_idx&lt;(<span class="hljs-number">1</span>&lt;&lt;(depth<span class="hljs-number">-1</span>)))<br>                        ret_idx=(<span class="hljs-number">1</span>&lt;&lt;(depth))<span class="hljs-number">-1</span>;<br>                    <span class="hljs-keyword">if</span>(idx&lt;=ret_idx)<br>                    &#123;<br>                        ret_idx=idx;<br>                        ret=cur-&gt;val;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,idx&lt;&lt;<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,(idx&lt;&lt;<span class="hljs-number">1</span>)+<span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2: 乖乖用层序遍历,不整花里胡哨的方法才能AC</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> max_depth=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">-1</span>;<br>        queue&lt;pair&lt;TreeNode*,<span class="hljs-type">int</span>&gt;&gt;que;<br>        que.<span class="hljs-built_in">push</span>(&#123;root,<span class="hljs-number">1</span>&#125;);<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-keyword">auto</span> cur=que.<span class="hljs-built_in">front</span>();<br>            que.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(cur.second&gt;max_depth)<br>            &#123;<br>                max_depth=cur.second;<br>                ret=cur.first-&gt;val;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur.first-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                que.<span class="hljs-built_in">push</span>(&#123;cur.first-&gt;left,cur.second+<span class="hljs-number">1</span>&#125;);<br>            <span class="hljs-keyword">if</span>(cur.first-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                que.<span class="hljs-built_in">push</span>(&#123;cur.first-&gt;right,cur.second+<span class="hljs-number">1</span>&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法3:整点花里胡哨的,用回溯法</p><p>利用性质: 在深度优先搜索中,同一层位于左侧的节点总是最先被搜索到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">-1</span>;<br>        <span class="hljs-type">int</span> max_depth=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> depth)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(depth&gt;max_depth)<br>                &#123;<br>                    max_depth=depth;<br>                    ret=cur-&gt;val;<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,depth+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,depth+<span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树17-路径总和">二叉树17:路径总和</h3><p><a href="https://leetcode.cn/problems/path-sum/description/">leetcode112路径总和</a></p><p>简单题,回溯解决,大佬可以跳过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> targetSum)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> add=root-&gt;val;<br>        <span class="hljs-type">bool</span> flag=<span class="hljs-literal">false</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flag)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(add==targetSum)<br>                    flag=<span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                add+=cur-&gt;left-&gt;val;<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>                add-=cur-&gt;left-&gt;val;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                add+=cur-&gt;right-&gt;val;<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>                add-=cur-&gt;right-&gt;val;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/path-sum-ii/description/">leetcode113路径总和II</a></p><p>还是回溯,上面的代码稍微改动即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pathSum</span>(TreeNode* root, <span class="hljs-type">int</span> targetSum) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;vec;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> ret;<br>        vec.<span class="hljs-built_in">emplace_back</span>(root-&gt;val);<br>        <span class="hljs-type">int</span> add=root-&gt;val;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(add==targetSum)<br>                    ret.<span class="hljs-built_in">emplace_back</span>(vec);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                add+=cur-&gt;left-&gt;val;<br>                vec.<span class="hljs-built_in">emplace_back</span>(cur-&gt;left-&gt;val);<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>                vec.<span class="hljs-built_in">pop_back</span>();<br>                add-=cur-&gt;left-&gt;val;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>            &#123;<br>                add+=cur-&gt;right-&gt;val;<br>                vec.<span class="hljs-built_in">emplace_back</span>(cur-&gt;right-&gt;val);<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>                vec.<span class="hljs-built_in">pop_back</span>();<br>                add-=cur-&gt;right-&gt;val;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树18-从中序与后序遍历序列构造二叉树-从前序与中序遍历序列构造二叉树">二叉树18:从中序与后序遍历序列构造二叉树, 从前序与中序遍历序列构造二叉树</h3><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/">leetcode106</a>从中序与后序遍历序列构造二叉树</p><p>回溯法,有点复杂</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; postorder)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;TreeNode*(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> ileft,<span class="hljs-type">int</span> iright,<span class="hljs-type">int</span> pleft,<span class="hljs-type">int</span> pright)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ileft&gt;iright||pleft&gt;pright)<br>                <span class="hljs-built_in">return</span> (TreeNode*)<span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-type">int</span> igap=<span class="hljs-built_in">find</span>(inorder.<span class="hljs-built_in">begin</span>()+ileft,inorder.<span class="hljs-built_in">begin</span>()+iright+<span class="hljs-number">1</span>,postorder[pright])-inorder.<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(postorder[pright],<span class="hljs-built_in">dfs</span>(ileft,igap<span class="hljs-number">-1</span>,pleft,pleft+igap-ileft<span class="hljs-number">-1</span>),<span class="hljs-built_in">dfs</span>(igap+<span class="hljs-number">1</span>,iright,pleft+igap-ileft,pright<span class="hljs-number">-1</span>));<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,inorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,postorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/">leetcode105</a> 从前序与中序遍历序列构造二叉树</p><p>和上题一样的思路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">buildTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;TreeNode*(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> pl,<span class="hljs-type">int</span> pr,<span class="hljs-type">int</span> il,<span class="hljs-type">int</span> ir)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pl&gt;pr||il&gt;ir)<br>                <span class="hljs-built_in">return</span> (TreeNode*)<span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-type">int</span> gap=<span class="hljs-built_in">find</span>(inorder.<span class="hljs-built_in">begin</span>()+il,inorder.<span class="hljs-built_in">begin</span>()+ir+<span class="hljs-number">1</span>,preorder[pl])-inorder.<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(preorder[pl],<span class="hljs-built_in">dfs</span>(pl+<span class="hljs-number">1</span>,gap-il+pl,il,gap<span class="hljs-number">-1</span>),<span class="hljs-built_in">dfs</span>(gap-il+pl+<span class="hljs-number">1</span>,pr,gap+<span class="hljs-number">1</span>,ir));<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,preorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,inorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树19-最大二叉树">二叉树19:最大二叉树</h3><p><a href="https://leetcode.cn/problems/maximum-binary-tree/description/">leetcode654</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">constructMaximumBinaryTree</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;TreeNode*(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> le,<span class="hljs-type">int</span> ri)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(le&gt;ri)<br>                <span class="hljs-built_in">return</span> (TreeNode*)<span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-type">int</span> max_element=<span class="hljs-number">0x80000000</span>,max_index=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=le;i&lt;=ri;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i]&gt;max_element)<br>                &#123;<br>                    max_index=i;<br>                    max_element=nums[i];<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(max_element,<span class="hljs-built_in">dfs</span>(le,max_index<span class="hljs-number">-1</span>),<span class="hljs-built_in">dfs</span>(max_index+<span class="hljs-number">1</span>,ri));<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树21-合并二叉树">二叉树21:合并二叉树</h3><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/description/">leetcode617</a></p><p>一样的回溯思路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">mergeTrees</span><span class="hljs-params">(TreeNode* root1, TreeNode* root2)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        function&lt;TreeNode*(TreeNode*,TreeNode*)&gt;dfs=[&amp;](TreeNode* p1,TreeNode* p2)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(p1!=<span class="hljs-literal">nullptr</span>&amp;&amp;p2!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(p1-&gt;val+p2-&gt;val,<span class="hljs-built_in">dfs</span>(p1-&gt;left,p2-&gt;left),<span class="hljs-built_in">dfs</span>(p1-&gt;right,p2-&gt;right));<br>            <span class="hljs-keyword">if</span>(p2==<span class="hljs-literal">nullptr</span>&amp;&amp;p1!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(p1-&gt;val,<span class="hljs-built_in">dfs</span>(p1-&gt;left,<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">dfs</span>(p1-&gt;right,<span class="hljs-literal">nullptr</span>));<br>            <span class="hljs-keyword">if</span>(p1==<span class="hljs-literal">nullptr</span>&amp;&amp;p2!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(p2-&gt;val,<span class="hljs-built_in">dfs</span>(<span class="hljs-literal">nullptr</span>,p2-&gt;left),<span class="hljs-built_in">dfs</span>(<span class="hljs-literal">nullptr</span>,p2-&gt;right));<br>            <span class="hljs-keyword">return</span> (TreeNode*)<span class="hljs-literal">nullptr</span>;<br>        &#125;;<br>        TreeNode* p1=root1,*p2=root2;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(p1,p2);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树22-二叉搜索树中的搜索">二叉树22:二叉搜索树中的搜索</h3><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/">leetcode700</a></p><p>简单题,大佬请跳过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">searchBST</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        TreeNode* p=root;<br>        <span class="hljs-keyword">while</span>(p!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(val==p-&gt;val)<br>                <span class="hljs-keyword">return</span> p;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(val&lt;p-&gt;val)<br>                p=p-&gt;left;<br>            <span class="hljs-keyword">else</span><br>                p=p-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树23-验证二叉搜索树">二叉树23:验证二叉搜索树</h3><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/description/">leetcode98</a></p><p>别小看这题,坑巨多</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValidBST</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">bool</span> ret=<span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> downinf=<span class="hljs-number">1</span>,upinf=<span class="hljs-number">1</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> up,<span class="hljs-type">int</span> down)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(!ret||cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val&lt;=down&amp;&amp;downinf==<span class="hljs-number">0</span>||cur-&gt;val&gt;=up&amp;&amp;upinf==<span class="hljs-number">0</span>)<br>                ret=<span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(upinf==<span class="hljs-number">1</span>)<br>            &#123;<br>                upinf=<span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,cur-&gt;val,down);<br>                upinf=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left,cur-&gt;val,down);<br>            <span class="hljs-keyword">if</span>(downinf==<span class="hljs-number">1</span>)<br>            &#123;<br>                downinf=<span class="hljs-number">0</span>;<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,up,cur-&gt;val);<br>                downinf=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right,up,cur-&gt;val);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树24-二叉搜索树的最小绝对差">二叉树24:二叉搜索树的最小绝对差</h3><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/description/">leetcode530</a></p><p>相当于求二叉树中序遍历序列相邻元素的最小绝对差</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getMinimumDifference</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> last=<span class="hljs-number">-1000000</span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0x7fffffff</span>;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<span class="hljs-comment">//中序遍历</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            ret=<span class="hljs-built_in">min</span>(ret,<span class="hljs-built_in">abs</span>(cur-&gt;val-last));<br>            last=cur-&gt;val;<br>            <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树25：二叉搜索树中的众数">二叉树25：二叉搜索树中的众数</h3><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/">leetcode501</a></p><p>采用中序遍历就行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findMode</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> pre=<span class="hljs-number">-200000</span>;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">1</span>,ret=<span class="hljs-number">1</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt;vec;<br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            <span class="hljs-keyword">if</span>(cur-&gt;val==pre)<br>            &#123;<br>                ++cnt;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pre!=<span class="hljs-number">-200000</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(cnt&gt;ret)<br>                &#123;<br>                    vec.<span class="hljs-built_in">resize</span>(<span class="hljs-number">0</span>);<br>                    vec.<span class="hljs-built_in">emplace_back</span>(pre);<br>                    ret=cnt;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==ret)<br>                &#123;<br>                    vec.<span class="hljs-built_in">emplace_back</span>(pre);<br>                &#125;<br>                cnt=<span class="hljs-number">1</span>;<br>                pre=cur-&gt;val;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                cnt=<span class="hljs-number">1</span>;<br>                pre=cur-&gt;val;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">if</span>(cnt&gt;ret)<br>        &#123;<br>            vec.<span class="hljs-built_in">resize</span>(<span class="hljs-number">0</span>);<br>            vec.<span class="hljs-built_in">emplace_back</span>(pre);<br>            ret=cnt;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt==ret)<br>        &#123;<br>            vec.<span class="hljs-built_in">emplace_back</span>(pre);<br>        &#125;<br>        cnt=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> vec;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树26-二叉树的最近公共祖先">二叉树26:二叉树的最近公共祖先</h3><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">leetcode236</a></p><p>直接回溯</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        TreeNode* ret=<span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-type">int</span> depth=<span class="hljs-number">-1</span>;<br>        function&lt;<span class="hljs-type">int</span>(TreeNode*,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](TreeNode* cur,<span class="hljs-type">int</span> dep)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> status=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(cur==p)<br>                status|=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur==q)<br>                status|=<span class="hljs-number">1</span>;<br>            status|=<span class="hljs-built_in">dfs</span>(cur-&gt;left,dep+<span class="hljs-number">1</span>);<br>            status|=<span class="hljs-built_in">dfs</span>(cur-&gt;right,dep+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(status==<span class="hljs-number">3</span>&amp;&amp;dep&gt;depth)<br>            &#123;<br>                depth=dep;<br>                ret=cur;<br>            &#125;<br>            <span class="hljs-keyword">return</span> status;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树28-二叉搜索树的最近公共祖先">二叉树28:二叉搜索树的最近公共祖先</h3><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/description/">leetcode235</a></p><p>和上一题差不多,这题是二叉搜索树,可以利用性质简化</p><p>用指针<code>t</code>从根节点开始采用二分搜索,直到发现<code>t==p||t==q</code>,或者<code>p</code>和<code>q</code>分别位于<code>t</code>两侧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        TreeNode* t=root;<br>        <span class="hljs-keyword">while</span>(t!=<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t==p||t==q)<br>                <span class="hljs-keyword">return</span> t;<br>            <span class="hljs-keyword">if</span>(t-&gt;val&gt;p-&gt;val&amp;&amp;t-&gt;val&gt;q-&gt;val)<br>                t=t-&gt;left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(t-&gt;val&lt;p-&gt;val&amp;&amp;t-&gt;val&lt;q-&gt;val)<br>                t=t-&gt;right;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> t;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树29-二叉搜索树的插入操作">二叉树29:二叉搜索树的插入操作</h3><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/description/">leetcode701</a></p><p>简单题,大佬可跳过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">insertIntoBST</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> val)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        TreeNode* p=root;<br>        <span class="hljs-keyword">if</span>(p==<span class="hljs-literal">nullptr</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(val);<br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(val&gt;p-&gt;val)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(p-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                    p=p-&gt;right;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    p-&gt;right=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(val);<br>                    <span class="hljs-keyword">return</span> root;                    <br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(p-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                    p=p-&gt;left;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    p-&gt;left=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(val);<br>                    <span class="hljs-keyword">return</span> root;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="二叉树30-删除二叉搜索树中的节点">二叉树30:删除二叉搜索树中的节点</h3><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/">leetcode450</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">deleteNode</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> key)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        TreeNode* dummyhead=<span class="hljs-keyword">new</span> <span class="hljs-built_in">TreeNode</span>(<span class="hljs-number">0</span>,root,<span class="hljs-literal">nullptr</span>);<br>        TreeNode* pre=dummyhead;<br>        TreeNode* cur=root;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;val!=key)<br>        &#123;<br>            pre=cur;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val&gt;key)<br>                cur=cur-&gt;left;<br>            <span class="hljs-keyword">else</span><br>                cur=cur-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">delete</span> dummyhead;<br>            <span class="hljs-keyword">return</span> root;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cur-&gt;left==<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pre-&gt;left==cur)<br>                pre-&gt;left=cur-&gt;right;<br>            <span class="hljs-keyword">else</span><br>                pre-&gt;right=cur-&gt;right;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;right==<span class="hljs-literal">nullptr</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(pre-&gt;left==cur)<br>                pre-&gt;left=cur-&gt;left;<br>            <span class="hljs-keyword">else</span><br>                pre-&gt;right=cur-&gt;left;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            TreeNode* tmp=cur-&gt;left-&gt;right;<br>            TreeNode* p=cur-&gt;right;<br>            cur-&gt;left-&gt;right=cur-&gt;right;<br>            <span class="hljs-keyword">if</span>(pre-&gt;left==cur)<br>                pre-&gt;left=cur-&gt;left;<br>            <span class="hljs-keyword">else</span><br>                pre-&gt;right=cur-&gt;left;<br>            <span class="hljs-keyword">while</span>(p-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                p=p-&gt;left;<br>            p-&gt;left=tmp;<br>        &#125;<br>        <span class="hljs-keyword">delete</span> cur;<br>        TreeNode* ret=dummyhead-&gt;left;<br>        <span class="hljs-keyword">delete</span> dummyhead;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="9-回溯专题">(9)回溯专题</h2><p>回溯法（backtracking）</p><h3 id="回溯2：组合">回溯2：组合</h3><p><a href="https://leetcode.cn/problems/combinations/">leetcode77</a></p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combine</span>(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;sel;<br>        sel.<span class="hljs-built_in">reserve</span>(n);<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(n-idx+<span class="hljs-number">1</span>&lt;k-sel.<span class="hljs-built_in">size</span>())<span class="hljs-comment">//剪枝</span><br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(idx&gt;n+<span class="hljs-number">1</span>)<span class="hljs-comment">//递归上限</span><br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(sel.<span class="hljs-built_in">size</span>()==k)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(sel);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<span class="hljs-comment">//不取当前数字</span><br>            sel.<span class="hljs-built_in">emplace_back</span>(idx);<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<span class="hljs-comment">//取当前数字</span><br>            sel.<span class="hljs-built_in">pop_back</span>();<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python: 要注意几个global的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">num=<span class="hljs-number">0</span>  <span class="hljs-comment">## 统计已经加入数组arr的元素数量</span><br>ret=[]<br>arr=[]<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combine</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:<br>        <span class="hljs-keyword">global</span> num,ret,arr<br>        ret=[]<br>        arr=[]<br>        num=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">idx: <span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">global</span> num,ret,arr<br>            <span class="hljs-keyword">if</span> num&gt;k:<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> idx==n+<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> num==k:<br>                    ret.append(arr.copy())<br>                <span class="hljs-keyword">return</span><br>            dfs(idx+<span class="hljs-number">1</span>)<br>            num+=<span class="hljs-number">1</span><br>            arr.append(idx)<br>            dfs(idx+<span class="hljs-number">1</span>)<br>            num-=<span class="hljs-number">1</span><br>            arr.pop(num)<br>        dfs(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> ret<br><br></code></pre></td></tr></table></figure><h3 id="回溯4-组合总和III">回溯4:组合总和III</h3><p><a href="https://leetcode.cn/problems/combination-sum-iii/">leetcode216</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum3</span>(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;sel;<br>        sel.<span class="hljs-built_in">reserve</span>(k);<br>        <span class="hljs-type">int</span> add=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx&gt;<span class="hljs-number">10</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(add==n&amp;&amp;sel.<span class="hljs-built_in">size</span>()==k)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(sel);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            add+=idx;<br>            sel.<span class="hljs-built_in">emplace_back</span>(idx);<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            add-=idx;<br>            sel.<span class="hljs-built_in">pop_back</span>();<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯5-电话号码的字母组合">回溯5:电话号码的字母组合</h3><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">leetcode17</a></p><p>方法1: 两层for循环模拟枚举</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(string digits)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;string&gt; str=&#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>&#125;;<br>        vector&lt;string&gt; vec;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;digits.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">int</span> idx=digits[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;str[idx].<span class="hljs-built_in">size</span>();++j)<br>                &#123;<br>                    vec.<span class="hljs-built_in">emplace_back</span>(str[idx].<span class="hljs-built_in">substr</span>(j,<span class="hljs-number">1</span>));<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(;j&lt;vec.<span class="hljs-built_in">size</span>()&amp;&amp;vec[j].<span class="hljs-built_in">size</span>()&lt;=i;++j)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> ch:str[idx])<br>                    &#123;<br>                        string tmp=vec[j];<br>                        tmp+=ch;<br>                        vec.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                    &#125;<br>                &#125;<br>                vec.<span class="hljs-built_in">erase</span>(vec.<span class="hljs-built_in">begin</span>(),vec.<span class="hljs-built_in">begin</span>()+j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2:递归回溯</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(string digits)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;vec=&#123;&#123;&#125;,&#123;&#125;,&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>&#125;,&#123;<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>&#125;&#125;;<br>        vector&lt;string&gt;ret;<br>        string s;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==digits.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">0</span>)<br>                    ret.<span class="hljs-built_in">emplace_back</span>(s);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            vector&lt;<span class="hljs-type">char</span>&gt;&amp;tmp=vec[digits[idx]-<span class="hljs-string">&#x27;0&#x27;</span>];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:tmp)<br>            &#123;<br>                s.<span class="hljs-built_in">push_back</span>(ch);<br>                <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>                s.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯7-组合总和">回溯7:组合总和</h3><p><a href="https://leetcode.cn/problems/combination-sum/description/">leetcode39</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; candidates, <span class="hljs-type">int</span> target) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;vec;<br>        <span class="hljs-type">int</span> add=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==candidates.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(add==target)<br>                    ret.<span class="hljs-built_in">emplace_back</span>(vec);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(add+candidates[idx]&lt;=target)<br>                &#123;<br>                    add+=candidates[idx];<br>                    vec.<span class="hljs-built_in">emplace_back</span>(candidates[idx]);<br>                    ++cnt;<br>                    <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);                    <br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cnt;++i)<br>            &#123;<br>                add-=candidates[idx];<br>                vec.<span class="hljs-built_in">pop_back</span>();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯8-组合总和II">回溯8:组合总和II</h3><p><a href="https://leetcode.cn/problems/combination-sum-ii/">leetcode40</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combinationSum2</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; candidates, <span class="hljs-type">int</span> target) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;vec;<br>        <span class="hljs-type">int</span> add=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">sort</span>(candidates.<span class="hljs-built_in">begin</span>(),candidates.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//避免出现重复的组合</span><br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(add&gt;target)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(add==target)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(vec);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(idx==candidates.<span class="hljs-built_in">size</span>())<br>                <span class="hljs-keyword">return</span>;<br>            vec.<span class="hljs-built_in">emplace_back</span>(candidates[idx]);<br>            add+=candidates[idx];<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            vec.<span class="hljs-built_in">pop_back</span>();<br>            add-=candidates[idx];<br>            <span class="hljs-type">int</span> i=idx+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(i&lt;candidates.<span class="hljs-built_in">size</span>()&amp;&amp;candidates[i]==candidates[i<span class="hljs-number">-1</span>])<br>                ++i;<br>            <span class="hljs-built_in">dfs</span>(i);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯9：分割回文串">回溯9：分割回文串</h3><p><a href="https://leetcode.cn/problems/palindrome-partitioning/description/">leetcode131</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> len;<br>    string str;<br>    vector&lt;vector&lt;string&gt;&gt; ret;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">ispalind</span><span class="hljs-params">(string s)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> slen=s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=slen<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(;i&lt;j;++i,--j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]!=s[j])<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> idx,vector&lt;<span class="hljs-type">int</span>&gt;punc)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(idx==len)<br>        &#123;<br>            vector&lt;string&gt; tmp;<br>            <span class="hljs-type">int</span> last=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=punc.<span class="hljs-built_in">size</span>();++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(i==punc.<span class="hljs-built_in">size</span>()||punc[i]==<span class="hljs-number">1</span>)<br>                &#123;<br>                    string st=str.<span class="hljs-built_in">substr</span>(last,i-last);<br>                    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">ispalind</span>(st))<br>                        <span class="hljs-keyword">return</span>;<br>                    tmp.<span class="hljs-built_in">emplace_back</span>(st);<br>                    last=i;<br>                &#125;<br>            &#125;<br>            ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>,punc);<br>            punc[idx]=<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>,punc);<br>        &#125;<br>    &#125;<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">partition</span>(string s) <br>    &#123;<br>        len=s.<span class="hljs-built_in">size</span>();<br>        str=s;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">punc</span>(len);<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>,punc);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯10：复原IP地址">回溯10：复原IP地址</h3><p><a href="https://leetcode.cn/problems/restore-ip-addresses/">leetcode93</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">restoreIpAddresses</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>        string tmp;<br>        vector&lt;string&gt;ret;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">4</span>||i==n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">4</span>&amp;&amp;i==n)<br>                    ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;n&amp;&amp;j&lt;i+<span class="hljs-number">3</span>;++j)<br>            &#123;<br>                string add=s.<span class="hljs-built_in">substr</span>(i,j-i+<span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> num=<span class="hljs-built_in">stoi</span>(add);<br>                <span class="hljs-keyword">if</span>(num&lt;=<span class="hljs-number">255</span>&amp;&amp;s[i]!=<span class="hljs-string">&#x27;0&#x27;</span>||s[i]==<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;j==i)<br>                &#123;<br>                    <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">if</span>(tmp.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">0</span>)<br>                    &#123;<br>                        tmp+=<span class="hljs-string">&#x27;.&#x27;</span>;<br>                        flag=<span class="hljs-number">1</span>;<br>                    &#125;<br>                    tmp+=add;<br>                    ++cnt;<br>                    <span class="hljs-built_in">dfs</span>(j+<span class="hljs-number">1</span>);<br>                    --cnt;<br>                    <span class="hljs-keyword">if</span>(flag)<br>                        tmp.<span class="hljs-built_in">erase</span>(tmp.<span class="hljs-built_in">size</span>()-add.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,add.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">else</span><br>                        tmp.<span class="hljs-built_in">erase</span>(tmp.<span class="hljs-built_in">size</span>()-add.<span class="hljs-built_in">size</span>(),add.<span class="hljs-built_in">size</span>());<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯11：子集">回溯11：子集</h3><p><a href="https://leetcode.cn/problems/subsets/">leetcode78</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ret;<br>    vector&lt;<span class="hljs-type">int</span>&gt;num;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">make</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; tem,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(p==n)<br>        &#123;<br>            ret.<span class="hljs-built_in">push_back</span>(tem);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-built_in">make</span>(tem,p+<span class="hljs-number">1</span>);<br>        tem.<span class="hljs-built_in">push_back</span>(num[p]);<br>        <span class="hljs-built_in">make</span>(tem,p+<span class="hljs-number">1</span>);<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        n=nums.<span class="hljs-built_in">size</span>();<br>        num=nums;<br>        vector&lt;<span class="hljs-type">int</span>&gt; tem;<br>        <span class="hljs-built_in">make</span>(tem,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯13：子集II">回溯13：子集II</h3><p><a href="https://leetcode.cn/problems/subsets-ii/description/">leetcode90</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsetsWithDup</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>        <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==n)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            tmp.<span class="hljs-built_in">emplace_back</span>(nums[idx]);<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            tmp.<span class="hljs-built_in">pop_back</span>();<br>            <span class="hljs-keyword">while</span>(idx+<span class="hljs-number">1</span>&lt;n&amp;&amp;nums[idx+<span class="hljs-number">1</span>]==nums[idx])<br>                ++idx;<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯14：递增子序列">回溯14：递增子序列</h3><p><a href="https://leetcode.cn/problems/non-decreasing-subsequences/description/">leetcode491</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">findSubsequences</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(tmp.<span class="hljs-built_in">size</span>()&gt;=<span class="hljs-number">2</span>)<br>                    ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=idx;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(hash[nums[i]]==<span class="hljs-number">0</span>&amp;&amp;(tmp.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>||nums[i]&gt;=tmp.<span class="hljs-built_in">back</span>()))<br>                &#123;<br>                    hash[nums[i]]=<span class="hljs-number">1</span>;<br>                    tmp.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>                    <span class="hljs-built_in">dfs</span>(i+<span class="hljs-number">1</span>);<br>                    tmp.<span class="hljs-built_in">pop_back</span>();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp.<span class="hljs-built_in">size</span>()&gt;=<span class="hljs-number">2</span>)<br>                ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯15：全排列">回溯15：全排列</h3><p><a href="https://leetcode.cn/problems/permutations/description/">leetcode46</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isvalid</span>(nums.<span class="hljs-built_in">size</span>(),<span class="hljs-number">0</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt;cur;<br>        <span class="hljs-keyword">auto</span> dfs=[&amp;]()<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur.<span class="hljs-built_in">size</span>()==nums.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(cur);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(isvalid[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    cur.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>                    isvalid[i]=<span class="hljs-number">1</span>;<br>                    <span class="hljs-built_in">dfs</span>();<br>                    cur.<span class="hljs-built_in">pop_back</span>();<br>                    isvalid[i]=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>();<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯16：全排列II">回溯16：全排列II</h3><p><a href="https://leetcode.cn/problems/permutations-ii/description/">leetcode47</a></p><p>方法1：在得到全排列数组后进行整体去重</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll=<span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permuteUnique</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        vector&lt;ll&gt;<span class="hljs-built_in">quan</span>(nums.<span class="hljs-built_in">size</span>());<br>        quan[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>            quan[i]=quan[i<span class="hljs-number">-1</span>]*<span class="hljs-number">11</span>;<br>        unordered_map&lt;ll,<span class="hljs-type">int</span>&gt;hash;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">vec</span>(nums.<span class="hljs-built_in">size</span>());<br>        vector&lt;<span class="hljs-type">int</span>&gt;cur;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        ll key=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==nums.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(hash[key]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    hash[key]=<span class="hljs-number">1</span>;<br>                    ret.<span class="hljs-built_in">emplace_back</span>(cur);<br>                &#125;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(vec[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    vec[i]=<span class="hljs-number">1</span>;<br>                    cur.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>                    key+=quan[idx]*nums[i];<br>                    <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>                    key-=quan[idx]*nums[i];<br>                    vec[i]=<span class="hljs-number">0</span>;<br>                    cur.<span class="hljs-built_in">pop_back</span>();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>60ms,8.8MB</em></p><p>方法2：在递归的同一层内避免插入相同元素到数组中，有效避免出现重复</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permuteUnique</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) <br>    &#123;<br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isvisited</span>(n);<br>        vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(idx==n)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(isvisited[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(hash[nums[i]]==<span class="hljs-number">0</span>)<br>                    &#123;<br>                        hash[nums[i]]=<span class="hljs-number">1</span>;<br>                        isvisited[i]=<span class="hljs-number">1</span>;<br>                        tmp.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>                        <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>                        tmp.<span class="hljs-built_in">pop_back</span>();<br>                        isvisited[i]=<span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>8ms,10.9MB</em></p><h3 id="回溯19：重新安排行程">回溯19：重新安排行程</h3><p><a href="https://leetcode.cn/problems/reconstruct-itinerary/description/">leetcode332</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">findItinerary</span><span class="hljs-params">(vector&lt;vector&lt;string&gt;&gt;&amp; tickets)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=tickets.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">sort</span>(tickets.<span class="hljs-built_in">begin</span>(),tickets.<span class="hljs-built_in">end</span>(),[&amp;](vector&lt;string&gt;&amp;a,vector&lt;string&gt;&amp;b)&#123;<span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt;b[<span class="hljs-number">1</span>];&#125;);<br>        string loca=<span class="hljs-string">&quot;JFK&quot;</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isUsed</span>(n);<br>        vector&lt;string&gt;ret;<br>        vector&lt;string&gt;ret1;<br>        ret.<span class="hljs-built_in">emplace_back</span>(loca);<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flag)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(idx==n)<br>            &#123;<br>                ret1=ret;<br>                flag=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(tickets[i][<span class="hljs-number">0</span>]==loca&amp;&amp;isUsed[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    isUsed[i]=<span class="hljs-number">1</span>;<br>                    string tmp=loca;<br>                    loca=tickets[i][<span class="hljs-number">1</span>];<br>                    ret.<span class="hljs-built_in">emplace_back</span>(loca);<br>                    <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>                    ret.<span class="hljs-built_in">pop_back</span>();<br>                    loca=tmp;<br>                    isUsed[i]=<span class="hljs-number">0</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret1;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="回溯20：N皇后">回溯20：N皇后</h3><p><a href="https://leetcode.cn/problems/n-queens/">leetcode51</a></p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;string&gt;&gt; <span class="hljs-built_in">solveNQueens</span>(<span class="hljs-type">int</span> n) <br>    &#123;<br>        vector&lt;vector&lt;string&gt;&gt;ret;<br>        vector&lt;string&gt;<span class="hljs-built_in">graph</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; _vec:graph)<br>            _vec.<span class="hljs-built_in">assign</span>(n,<span class="hljs-string">&#x27;.&#x27;</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">row</span>(n);<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> col)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(col==n)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(graph);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(row[i]!=<span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                &#123;<br>                    <span class="hljs-type">int</span> k=i+col-j;<br>                    <span class="hljs-keyword">if</span>(k&lt;<span class="hljs-number">0</span>||k&gt;=n)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(graph[j][k]==<span class="hljs-string">&#x27;Q&#x27;</span>)<br>                    &#123;<br>                        flag=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                &#123;<br>                    <span class="hljs-type">int</span> k=j+col-i;<br>                    <span class="hljs-keyword">if</span>(k&lt;<span class="hljs-number">0</span>||k&gt;=n)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(graph[j][k]==<span class="hljs-string">&#x27;Q&#x27;</span>)<br>                    &#123;<br>                        flag=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                row[i]=<span class="hljs-number">1</span>;<br>                graph[i][col]=<span class="hljs-string">&#x27;Q&#x27;</span>;<br>                <span class="hljs-built_in">dfs</span>(col+<span class="hljs-number">1</span>);<br>                row[i]=<span class="hljs-number">0</span>;<br>                graph[i][col]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">solveNQueens</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]:<br>        ret=[[<span class="hljs-string">&quot;.&quot;</span>]*n <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        ans=[]<br>        arr=[<span class="hljs-number">0</span>]*n<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">recur</span>(<span class="hljs-params">row</span>):<br>            <span class="hljs-keyword">if</span> row==n:<br>                tmp=[<span class="hljs-string">&quot;&quot;</span>]*n<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                    tmp[i]=tmp[i].join(ret[i])<br>                ans.append(tmp)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-comment">#检查列是否有皇后</span><br>                <span class="hljs-keyword">if</span> arr[col]!=<span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">continue</span><br>                flag=<span class="hljs-number">0</span> <br>                <span class="hljs-comment">#检查对角线</span><br>                x=row-<span class="hljs-number">1</span><br>                y=col-<span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> x&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y&gt;=<span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> ret[x][y]==<span class="hljs-string">&quot;Q&quot;</span>:<br>                        flag=<span class="hljs-number">1</span><br>                        <span class="hljs-keyword">break</span><br>                    x-=<span class="hljs-number">1</span><br>                    y-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> flag:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment">#检查反对角线</span><br>                x=row-<span class="hljs-number">1</span><br>                y=col+<span class="hljs-number">1</span><br>                <span class="hljs-keyword">while</span> x&gt;=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> y&lt;n:<br>                    <span class="hljs-keyword">if</span> ret[x][y]==<span class="hljs-string">&quot;Q&quot;</span>:<br>                        flag=<span class="hljs-number">1</span><br>                        <span class="hljs-keyword">break</span><br>                    x-=<span class="hljs-number">1</span><br>                    y+=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> flag:<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-comment">#放置皇后</span><br>                arr[col]=<span class="hljs-number">1</span><br>                ret[row][col]=<span class="hljs-string">&quot;Q&quot;</span><br>                recur(row+<span class="hljs-number">1</span>)<br>                arr[col]=<span class="hljs-number">0</span><br>                ret[row][col]=<span class="hljs-string">&quot;.&quot;</span><br>        recur(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="回溯21：解数独">回溯21：解数独</h3><p><a href="https://leetcode.cn/problems/sudoku-solver/">leetcode37</a></p><p>数独棋盘：</p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td><strong>0</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>1</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>2</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>3</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>4</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>5</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>6</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>7</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>8</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>判断是否属于同一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn><mo>×</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">3\times 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>宫：比较<code>x/3*10+y/3</code>的大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solveSudoku</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; board)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//已经填好的标记</span><br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(flag)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(x==<span class="hljs-number">9</span>)<br>            &#123;<br>                flag=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(board[x][y]==<span class="hljs-string">&#x27;.&#x27;</span>)<br>            &#123;<br>                vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isvalid</span>(<span class="hljs-number">10</span>);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">8</span>;++i)<span class="hljs-comment">//处理同行同列</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(board[i][y]!=<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        isvalid[board[i][y]-<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">if</span>(board[x][i]!=<span class="hljs-string">&#x27;.&#x27;</span>)<br>                        isvalid[board[x][i]-<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;++i)<br>                &#123;<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;++j)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(board[x/<span class="hljs-number">3</span>*<span class="hljs-number">3</span>+i][y/<span class="hljs-number">3</span>*<span class="hljs-number">3</span>+j]!=<span class="hljs-string">&#x27;.&#x27;</span>)<br>                            isvalid[board[x/<span class="hljs-number">3</span>*<span class="hljs-number">3</span>+i][y/<span class="hljs-number">3</span>*<span class="hljs-number">3</span>+j]-<span class="hljs-string">&#x27;0&#x27;</span>]=<span class="hljs-number">1</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;++i)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(isvalid[i]==<span class="hljs-number">0</span>)<br>                    &#123;<br>                        board[x][y]=i+<span class="hljs-string">&#x27;0&#x27;</span>;<br>                        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">8</span>)<span class="hljs-comment">//访问下一个格子</span><br>                            <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">else</span><br>                            <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>                            <span class="hljs-keyword">return</span>;<br>                        <span class="hljs-keyword">else</span><br>                            board[x][y]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(y==<span class="hljs-number">8</span>)<span class="hljs-comment">//访问下一个格子</span><br>                    <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="10-贪心专题">(10)贪心专题</h2><h3 id="贪心2：分发饼干">贪心2：分发饼干</h3><p><a href="https://leetcode.cn/problems/assign-cookies/description/">leetcode455</a></p><p>排序 + 双指针 + 贪心</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; g, vector&lt;<span class="hljs-type">int</span>&gt;&amp; s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">sort</span>(g.<span class="hljs-built_in">begin</span>(),g.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">sort</span>(s.<span class="hljs-built_in">begin</span>(),s.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(;i&lt;g.<span class="hljs-built_in">size</span>()&amp;&amp;j&lt;s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(j&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[j]&lt;g[i])<br>                ++j;<br>            <span class="hljs-keyword">if</span>(j&lt;s.<span class="hljs-built_in">size</span>()&amp;&amp;s[j]&gt;=g[i])<br>            &#123;<br>                ++j;<br>                ++ret;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心3：摆动序列">贪心3：摆动序列</h3><p><a href="https://leetcode.cn/problems/wiggle-subsequence/description/">leetcode376</a></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wiggleMaxLength</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        i=<span class="hljs-number">1</span><br>        flag=<span class="hljs-number">1</span>  <span class="hljs-comment">## 1表示增，2表示减</span><br>        ret=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i&lt;le <span class="hljs-keyword">and</span> nums[i]==nums[i-<span class="hljs-number">1</span>]:<br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i&lt;le <span class="hljs-keyword">and</span> nums[i]&gt;nums[i-<span class="hljs-number">1</span>]:<br>            flag=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> i&lt;le:<br>            flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        i=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i&lt;le:<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">while</span> i&lt;le <span class="hljs-keyword">and</span> nums[i]&gt;=nums[i-<span class="hljs-number">1</span>]:<br>                    i+=<span class="hljs-number">1</span><br>                ret+=<span class="hljs-number">1</span><br>                flag=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">while</span> i&lt;le <span class="hljs-keyword">and</span> nums[i]&lt;=nums[i-<span class="hljs-number">1</span>]:<br>                    i+=<span class="hljs-number">1</span><br>                ret+=<span class="hljs-number">1</span><br>                flag=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="贪心4：最大子数组和">贪心4：最大子数组和</h3><p><a href="https://leetcode.cn/problems/maximum-subarray/description/">leetcode53</a></p><p>这里考虑局部最优解</p><p>从左到右遍历一次<code>nums</code>数组，遍历到第<code>i</code>个元素时,<code>add</code>的含义是选择<code>nums[i]</code>的条件下考虑前<code>i</code>个元素的最大子数组和</p><p>然后用<code>ret</code>记录<code>add</code>的最大值</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=nums[<span class="hljs-number">0</span>],add=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            add=<span class="hljs-built_in">max</span>(add+nums[i],nums[i]);<br>            ret=<span class="hljs-built_in">max</span>(ret,add);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        add=<span class="hljs-number">0</span><br>        ret=-<span class="hljs-number">100000</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            add=<span class="hljs-built_in">max</span>(add+num,num)<br>            ret=<span class="hljs-built_in">max</span>(ret,add)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="贪心6-买卖股票的最佳时机-II">贪心6:买卖股票的最佳时机 II</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">leetcode122</a></p><p><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9234.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII">动态规划章节</a>也包含了这道题</p><p>方法1:贪心</p><p>相当于截取<code>prices</code>数组中的所有上升子数组,求出它们的首尾元素之差并求和</p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>* prices, <span class="hljs-type">int</span> pricesSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;pricesSize;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prices[i]&gt;prices[i<span class="hljs-number">-1</span>])<br>            ret+=prices[i]-prices[i<span class="hljs-number">-1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        pre=inf<br>        profit=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> prices:<br>            <span class="hljs-keyword">if</span> num-pre&gt;<span class="hljs-number">0</span>:<br>                profit+=num-pre<br>            pre=num<br>        <span class="hljs-keyword">return</span> profit<br></code></pre></td></tr></table></figure><p>方法2:奇妙的动态规划</p><p><code>dfs[i][0]</code>表示第<code>i</code>天结束不持有股票的最大利润<code>pair.first</code></p><p><code>dfs[i][1]</code>表示第<code>i</code>天结束持有股票的最大利润<code>pair.second</code></p><p>C++:一维数组递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=prices.<span class="hljs-built_in">size</span>();<br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dfs</span>(len);<br>        dfs[<span class="hljs-number">0</span>].first=<span class="hljs-number">0</span>;<br>        dfs[<span class="hljs-number">0</span>].second=-prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;++i)<br>        &#123;<br>            dfs[i].first=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].first,dfs[i<span class="hljs-number">-1</span>].second+prices[i]);<br>            dfs[i].second=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].second,dfs[i<span class="hljs-number">-1</span>].first-prices[i]);<br>        &#125;<br><span class="hljs-keyword">return</span> dfs[len<span class="hljs-number">-1</span>].first;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:将一维数组压缩为更新两个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        have=-prices[<span class="hljs-number">0</span>]  <span class="hljs-comment">## 当前持有股票的最大利润</span><br>        notHave=<span class="hljs-number">0</span>  <span class="hljs-comment">## 当前不持有股票的最大利润</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(prices)):<br>            tp1=<span class="hljs-built_in">max</span>(have,notHave-prices[i])<br>            tp2=<span class="hljs-built_in">max</span>(notHave,have+prices[i])<br>            have=tp1<br>            notHave=tp2<br>        <span class="hljs-keyword">return</span> notHave<br></code></pre></td></tr></table></figure><h3 id="贪心7-跳跃游戏">贪心7:跳跃游戏</h3><p>简单贪心,只需维护<code>bound</code>作为当前能到达的最远位置</p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(numsSize==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize<span class="hljs-number">-1</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(nums[i]==<span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&gt;=<span class="hljs-number">0</span>;j--)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[i-j]&gt;j)<br>                    p=<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(p==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canJump</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        bound=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> idx,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            <span class="hljs-keyword">if</span> idx&gt;bound:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            bound=<span class="hljs-built_in">max</span>(bound,idx+num)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="贪心8：跳跃游戏II">贪心8：跳跃游戏II</h3><p><a href="https://leetcode.cn/problems/jump-game-ii/description/">leetcode45</a></p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">jump</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> dis1=<span class="hljs-number">0</span>,dis2=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(numsSize==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;numsSize;i++)<br>    &#123;<br>        <span class="hljs-type">int</span> far=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=dis2;j&lt;=dis1;j++)<br>        &#123;<br>            far=far&gt;nums[j]+j?far:nums[j]+j;<br>        &#125;<br>        dis2=dis1+<span class="hljs-number">1</span>;<br>        dis1=far;<br>        <span class="hljs-keyword">if</span>(dis1&gt;=numsSize<span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="贪心9-K次取反后最大化的数组和">贪心9:K次取反后最大化的数组和</h3><p><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">leetcode1005</a></p><p>你可能都没意识到你用了贪心算法, 就不小心AC了</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">largestSumAfterKNegations</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        nums=<span class="hljs-built_in">sorted</span>(nums)<br>        idx=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> idx&lt;<span class="hljs-built_in">len</span>(nums) <span class="hljs-keyword">and</span> nums[idx]&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> k&gt;<span class="hljs-number">0</span>:<br>            nums[idx]*=-<span class="hljs-number">1</span><br>            idx+=<span class="hljs-number">1</span><br>            k-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(nums)<br>        <span class="hljs-keyword">elif</span> idx==<span class="hljs-built_in">len</span>(nums):<br>            nums[idx-<span class="hljs-number">1</span>]*=(-<span class="hljs-number">1</span>)**k<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(nums)<br>        nums=<span class="hljs-built_in">sorted</span>(nums)<br>        nums[<span class="hljs-number">0</span>]*=(-<span class="hljs-number">1</span>)**k<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(nums)<br></code></pre></td></tr></table></figure><h3 id="贪心11-加油站">贪心11: 加油站</h3><p><a href="https://leetcode.cn/problems/gas-station/">leetcode134</a></p><p>难度蹭蹭上涨了</p><p>据说用C++写<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的暴力解法可以通过,感兴趣的可以试试:wink:</p><p>贪心:</p><p>C++:</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">canCompleteCircuit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; gas, vector&lt;<span class="hljs-type">int</span>&gt;&amp; cost)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=gas.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">vec</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            vec[i]=gas[i]-cost[i];<br>        <span class="hljs-type">int</span> begin=<span class="hljs-number">0</span>,end=<span class="hljs-number">0</span>;<span class="hljs-comment">//双指针,左闭右闭</span><br>        <span class="hljs-type">int</span> add=<span class="hljs-number">0</span>;<span class="hljs-comment">//当前油箱汽油量</span><br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//flag==1代表end已经越过n回到0</span><br>        <span class="hljs-keyword">while</span>(begin!=end||flag==<span class="hljs-number">0</span>)<br>        &#123;<br>            add+=vec[end];<br>            <span class="hljs-keyword">if</span>(add&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                add=<span class="hljs-number">0</span>;<br>                ++end;<br>                <span class="hljs-keyword">if</span>(end==n)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>                begin=end;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            ++end;<br>            <span class="hljs-keyword">if</span>(end==n)<br>            &#123;<br>                end=<span class="hljs-number">0</span>;<br>                flag=<span class="hljs-number">1</span>;<br>            &#125; <br>        &#125;<br>        <span class="hljs-keyword">return</span> begin;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心12-分发糖果">贪心12:分发糖果</h3><p><a href="https://leetcode.cn/problems/candy/description/">leetcode135</a></p><p>方法1:自己的复杂方法</p><p>把<code>ratings</code>数组视为一个波, 各个下标处对应的数值为该处波的高度</p><p>一次遍历,找到所有的波谷下标装入队列</p><p>然后从队列逐个取出下标,从波谷向两侧遍历直到到达波峰, 对于严格上升的点糖果数为上一个位置的糖果数+1,平缓的点糖果数为1</p><p>一个位置的糖果数可能被多次计算,取其中的最大值</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">candy</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; ratings)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=ratings.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        queue&lt;<span class="hljs-type">int</span>&gt;que;<span class="hljs-comment">//记录所有波谷的下标</span><br>        <span class="hljs-keyword">if</span>(ratings[<span class="hljs-number">0</span>]&lt;=ratings[<span class="hljs-number">1</span>])<br>            que.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(ratings[i<span class="hljs-number">-1</span>]&gt;=ratings[i]&amp;&amp;ratings[i]&lt;=ratings[i+<span class="hljs-number">1</span>])<br>                que.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(ratings[n<span class="hljs-number">-2</span>]&gt;=ratings[n<span class="hljs-number">-1</span>])<br>            que.<span class="hljs-built_in">push</span>(n<span class="hljs-number">-1</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">candy</span>(n,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> cur=que.<span class="hljs-built_in">front</span>();<br>            que.<span class="hljs-built_in">pop</span>();<br>            candy[cur]=<span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> left=cur<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">for</span>(;left&gt;=<span class="hljs-number">0</span>;--left)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(ratings[left]&gt;ratings[left+<span class="hljs-number">1</span>])<br>                    candy[left]=<span class="hljs-built_in">max</span>(candy[left],candy[left+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ratings[left]&lt;ratings[left+<span class="hljs-number">1</span>])<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> right=cur+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(;right&lt;n;++right)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(ratings[right]&gt;ratings[right<span class="hljs-number">-1</span>])<br>                    candy[right]=<span class="hljs-built_in">max</span>(candy[right],candy[right<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ratings[right]&lt;ratings[right<span class="hljs-number">-1</span>])<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">accumulate</span>(candy.<span class="hljs-built_in">begin</span>(),candy.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2:大佬们的方法</p><p>正反两次遍历</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">candy</span>(<span class="hljs-params">self, ratings: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(ratings)<br>        candies=[<span class="hljs-number">1</span>]*n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment">## 只考虑左孩子比右孩子分数低的情况</span><br>            <span class="hljs-keyword">if</span> i != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> ratings[i]&gt;ratings[i-<span class="hljs-number">1</span>]:<br>                candies[i]=<span class="hljs-built_in">max</span>(candies[i],candies[i-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):  <span class="hljs-comment">## 只考虑左孩子比右孩子分数高的1情况</span><br>            <span class="hljs-keyword">if</span> i != n-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> ratings[i]&gt;ratings[i+<span class="hljs-number">1</span>]:<br>                candies[i]=<span class="hljs-built_in">max</span>(candies[i],candies[i+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(candies)<br></code></pre></td></tr></table></figure><h3 id="贪心13-柠檬水找零">贪心13:柠檬水找零</h3><p><a href="https://leetcode.cn/problems/lemonade-change/description/">leetcode860</a></p><p>简单模拟就行,用生活经验,有10元就优先用10元找零,5元是万能的</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lemonadeChange</span>(<span class="hljs-params">self, bills: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        n5=<span class="hljs-number">0</span>  <span class="hljs-comment">## 5美元钞票数</span><br>        n10=<span class="hljs-number">0</span>  <span class="hljs-comment">## 10美元钞票数</span><br>        <span class="hljs-keyword">for</span> bill <span class="hljs-keyword">in</span> bills:<br>            <span class="hljs-keyword">if</span> bill==<span class="hljs-number">5</span>:<br>                n5+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> bill==<span class="hljs-number">10</span>:<br>                n5-=<span class="hljs-number">1</span><br>                n10+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> n10&gt;<span class="hljs-number">0</span>:<br>                    n10-=<span class="hljs-number">1</span><br>                    n5-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    n5-=<span class="hljs-number">3</span><br>            <span class="hljs-keyword">if</span> n5&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h3 id="贪心14：根据身高重建队列">贪心14：根据身高重建队列*</h3><p><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/description/">leetcode406</a></p><p>有点难:sob:</p><p>搬运自讨论区的精彩解释:<a href="https://leetcode.cn/problems/queue-reconstruction-by-height/discussion/comments/1809851">https://leetcode.cn/problems/queue-reconstruction-by-height/discussion/comments/1809851</a></p><p>上了第一节体育课，老师给大家排好了体操的队伍，可是大家脑子都很笨，记不清自己在哪，老师说，你就看前面有几个比自己高的就行！就像这样：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[7,0]</span>,<span class="hljs-comment">[4,4]</span>,<span class="hljs-comment">[7,1]</span>,<span class="hljs-comment">[5,0]</span>,<span class="hljs-comment">[6,1]</span>,<span class="hljs-comment">[5,2]</span>]</span><br></code></pre></td></tr></table></figure><p>该上第二节课的时候，大家记住了前面有几个比自己高的，却还是忘记了怎么排，老师见状让学生从高到低排好队，身高一样的，比自己高的越多，越往后面站，像这样：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[7,0]</span>,<span class="hljs-comment">[7,1]</span>,<span class="hljs-comment">[6,1]</span>,<span class="hljs-comment">[5,0]</span>,<span class="hljs-comment">[5,2]</span>,<span class="hljs-comment">[4,4]</span>]</span><br></code></pre></td></tr></table></figure><p>每次让最高的学生出来找自己的位置，第一个高个子<code>[7,0]</code>自然站到了第一个位置：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[7,0]]</span><br></code></pre></td></tr></table></figure><p>而第二个高个子<code>[7,1]</code>知道有一个人大于等于自己的身高，站在了第一个人身后：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[7,0],[7,1]]</span><br></code></pre></td></tr></table></figure><p>第三个人<code>[6,1]</code>想了想，有一个人比自己高，那自己肯定站在第二位，于是就插队，现在也站到了第一个人身后：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">[[7,0],[6,1],[7,1]]</span><br></code></pre></td></tr></table></figure><p>第四个人<code>[5,0]</code>想了想，没人比自己高，那自己肯定站在第一位，于是就插队，站到了队头：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[5,0]</span>,<span class="hljs-comment">[7,0]</span>,<span class="hljs-comment">[6,1]</span>,<span class="hljs-comment">[7,1]</span>]</span><br></code></pre></td></tr></table></figure><p>第五个人<code>[5,2]</code>想了想，有两个人比自己高，于是就插队，站到了第二个人后面，也就是第三个位置：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[5,0]</span>,<span class="hljs-comment">[7,0]</span>,<span class="hljs-comment">[5,2]</span>,<span class="hljs-comment">[6,1]</span>,<span class="hljs-comment">[7,1]</span>]</span><br></code></pre></td></tr></table></figure><p>第六个人<code>[4,4]</code>看了看眼前的队伍，比自己高的人都在里面，他安心的数着前面有四个人比自己高，心安理得的站到了第四个人身后：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[<span class="hljs-comment">[5,0]</span>,<span class="hljs-comment">[7,0]</span>,<span class="hljs-comment">[5,2]</span>,<span class="hljs-comment">[6,1]</span>,<span class="hljs-comment">[4,4]</span>,<span class="hljs-comment">[7,1]</span>]</span><br></code></pre></td></tr></table></figure><p>其实这道题的大概思路就是这样，只有先让身高高的先进入队伍，后面身高低的才能根据前面高的来找自己的位置</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">reconstructQueue</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; people) <br>    &#123;<br>        <span class="hljs-built_in">sort</span>(people.<span class="hljs-built_in">begin</span>(),people.<span class="hljs-built_in">end</span>(),[&amp;](vector&lt;<span class="hljs-type">int</span>&gt;&amp;a,vector&lt;<span class="hljs-type">int</span>&gt;&amp;b)<br>        &#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]&gt;b[<span class="hljs-number">0</span>]||a[<span class="hljs-number">0</span>]==b[<span class="hljs-number">0</span>]&amp;&amp;a[<span class="hljs-number">1</span>]&lt;b[<span class="hljs-number">1</span>];<br>        &#125;);<span class="hljs-comment">//首先按照h从大到小排序，h相同时按照k从小到大排序</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;people.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(people[i][<span class="hljs-number">1</span>]==i)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">auto</span> tmp=people[i];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&gt;tmp[<span class="hljs-number">1</span>];--j)<br>                <span class="hljs-built_in">swap</span>(people[j],people[j<span class="hljs-number">-1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> people;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心17-用最少数量的箭引爆气球">贪心17:用最少数量的箭引爆气球*</h3><p><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/description/">leetcode452</a></p><p>很经典的区间问题</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMinArrowShots</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-built_in">sort</span>(points.<span class="hljs-built_in">begin</span>(),points.<span class="hljs-built_in">end</span>(),[&amp;](vector&lt;<span class="hljs-type">int</span>&gt;&amp; a,vector&lt;<span class="hljs-type">int</span>&gt;&amp; b)&#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]&lt;b[<span class="hljs-number">0</span>];<br>        &#125;);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> len=points.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">while</span>(i&lt;len)<br>        &#123;<br>            <span class="hljs-type">int</span> left=points[i][<span class="hljs-number">0</span>],right=points[i][<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;len&amp;&amp;points[j][<span class="hljs-number">0</span>]&lt;=right;++j)<br>            &#123;<br>                left=points[j][<span class="hljs-number">0</span>];<br>                right=<span class="hljs-built_in">min</span>(points[j][<span class="hljs-number">1</span>],right);<br>            &#125;<br>            ++ret;<br>            i=j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMinArrowShots</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        points.sort()<br>        n=<span class="hljs-built_in">len</span>(points)<br>        i,cnt=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i&lt;n:<br>            left,right=points[i]<br>            j=i+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> j&lt;n <span class="hljs-keyword">and</span> points[j][<span class="hljs-number">0</span>]&lt;=right:<br>                left=points[j][<span class="hljs-number">0</span>]<br>                right=<span class="hljs-built_in">min</span>(right,points[j][<span class="hljs-number">1</span>])<br>                j+=<span class="hljs-number">1</span><br>            i=j<br>            cnt+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> cnt<br></code></pre></td></tr></table></figure><h3 id="贪心18-无重叠区间">贪心18:无重叠区间</h3><p><a href="https://leetcode.cn/problems/non-overlapping-intervals/description/">leetcode435</a></p><p>首先按照右边界的坐标从小到大排序,如果右边界坐标相等,就按照左边界从大到小排序</p><p>然后从左到右遍历, 对于每个被遍历到的区间,都删除掉它后面所有与之相交的区间</p><p>被删除的区间不会再参与遍历</p><p>几种已经排好序的样例如下(带x的被删除掉)</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">--</span>|<br>   |<span class="hljs-string">--</span>|<br>|<span class="hljs-string">-----</span>|<span class="hljs-string">            x</span><br><span class="hljs-string">     </span>|<span class="hljs-string">-----</span>|<span class="hljs-string">       x</span><br><span class="hljs-string">     </span>|<span class="hljs-string">-------</span>|<br>     |<span class="hljs-string">-----</span>|x<br></code></pre></td></tr></table></figure><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"> |<span class="hljs-string">-</span>|<br>|<span class="hljs-string">-----</span>|<span class="hljs-string">        x</span><br><span class="hljs-string">   </span>|<span class="hljs-string">-----</span>|<br>|<span class="hljs-string">-------------</span>|x<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">eraseOverlapIntervals</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; intervals)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=intervals.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-built_in">sort</span>(intervals.<span class="hljs-built_in">begin</span>(),intervals.<span class="hljs-built_in">end</span>(),[&amp;](vector&lt;<span class="hljs-type">int</span>&gt;&amp;a,vector&lt;<span class="hljs-type">int</span>&gt;&amp;b)&#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt;b[<span class="hljs-number">1</span>]||a[<span class="hljs-number">1</span>]==b[<span class="hljs-number">1</span>]&amp;&amp;a[<span class="hljs-number">0</span>]&gt;b[<span class="hljs-number">0</span>];<br>        &#125;);<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(i&lt;len)<br>        &#123;<br>            <span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;len;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(intervals[j][<span class="hljs-number">0</span>]&lt;intervals[i][<span class="hljs-number">1</span>])<br>                    ++ret;<br>                <span class="hljs-keyword">else</span> <br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            i=j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心19-划分字母区间">贪心19:划分字母区间</h3><p><a href="https://leetcode.cn/problems/partition-labels/description/">leetcode763</a></p><p>和上面两题相似,也是区间重叠问题</p><p>C++: 自己的糟糕代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">char</span>,<span class="hljs-type">int</span>&gt;hash;<span class="hljs-comment">//记录字母在数组vec中的下标</span><br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;vec;<span class="hljs-comment">//记录字母所有出现位置的左边界和右边界</span><br>        <span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<span class="hljs-comment">//vec数组的长度</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(hash.<span class="hljs-built_in">find</span>(s[i])==hash.<span class="hljs-built_in">end</span>())<br>            &#123;<br>                hash[s[i]]=len;<br>                ++len;<br>                vec.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">make_pair</span>(i,i));<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                vec[hash[s[i]]].second=i;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(),vec.<span class="hljs-built_in">end</span>(),[&amp;](pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;a,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;b)&#123;<br>            <span class="hljs-keyword">return</span> a.first&lt;b.first;<br>        &#125;);<br>        <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=<span class="hljs-number">0</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p:vec)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(p.first&gt;right)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(right-left+<span class="hljs-number">1</span>);<br>                left=p.first;<br>                right=p.second;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                right=<span class="hljs-built_in">max</span>(right,p.second);<br>        &#125;<br>        ret.<span class="hljs-built_in">emplace_back</span>(right-left+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>大佬的优雅代码(搬运自<a href="https://leetcode.cn/problems/partition-labels/discussion/comments/31356">https://leetcode.cn/problems/partition-labels/discussion/comments/31356</a>):</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">partitionLabels</span><span class="hljs-params">(string S)</span> </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; result;<br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; map; <span class="hljs-comment">//记录char c 和其最后出现位置的 map</span><br>        <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            map[S[i]] = i;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; S.<span class="hljs-built_in">size</span>(); i ++) &#123;<br>            end = <span class="hljs-built_in">max</span>(end, map[S[i]]);<br>            <span class="hljs-keyword">if</span> (i == end) &#123;<br>                result.<span class="hljs-built_in">push_back</span>(end - start + <span class="hljs-number">1</span>);<br>                start = i + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心20：合并区间">贪心20：合并区间</h3><p><a href="https://leetcode.cn/problems/merge-intervals/description/">leetcode56</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">merge</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; intervals) <br>    &#123;<br>        <span class="hljs-built_in">sort</span>(intervals.<span class="hljs-built_in">begin</span>(),intervals.<span class="hljs-built_in">end</span>(),[&amp;](vector&lt;<span class="hljs-type">int</span>&gt;&amp;a,vector&lt;<span class="hljs-type">int</span>&gt;&amp;b)&#123;<br>            <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]&lt;b[<span class="hljs-number">0</span>];<br>        &#125;);<br>        <span class="hljs-type">int</span> left=intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],right=intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; vec:intervals)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(vec[<span class="hljs-number">0</span>]&lt;=right)<br>            &#123;<br>                right=<span class="hljs-built_in">max</span>(right,vec[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(vector&lt;<span class="hljs-type">int</span>&gt;&#123;left,right&#125;);<br>                left=vec[<span class="hljs-number">0</span>];<br>                right=vec[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        ret.<span class="hljs-built_in">emplace_back</span>(vector&lt;<span class="hljs-type">int</span>&gt;&#123;left,right&#125;);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="贪心22：单调递增的数字">贪心22：单调递增的数字</h3><p><a href="https://leetcode.cn/problems/monotone-increasing-digits/description/">leetcode738</a></p><p>方法1:从左到右遍历(作者的笨办法)</p><p>将n各个位填入数组(字符串也行),从左到右遍历:</p><p>当发现当前位数字比前一位数字小时,就开始修改字符串,修改完字符串就能返回结果</p><p>修改规则为:前一位数字减1,当前位数字及之后所有位的数字一律为9</p><p>例如6328,遍历到3时,将前1位减1得5,后面一律为9,得5999</p><p>考虑一种情况,n=332,遍历到下标2时发现数字比前一位小,将下标为1处的3改为2,后面置为9后,得329不符合题意,这说明还需要另外加一个循环从下标为1处向前遍历,如果当前位置数字比前一位小了,就把当前位置数字置为9,前一位数字减一,处理后数字变为299</p><p>C++: 0ms,59MB</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">monotoneIncreasingDigits</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        string s=<span class="hljs-built_in">to_string</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;s.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s[i]&lt;s[i<span class="hljs-number">-1</span>])<br>            &#123;<br>                --s[i<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">1</span>;--j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(s[j]&lt;s[j<span class="hljs-number">-1</span>])<br>                    &#123;<br>                        s[j]=<span class="hljs-string">&#x27;9&#x27;</span>;<br>                        --s[j<span class="hljs-number">-1</span>];<br>                    &#125;<br>                    <span class="hljs-keyword">else</span><br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;s.<span class="hljs-built_in">size</span>();++j)<br>                    s[j]=<span class="hljs-string">&#x27;9&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        n=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span>&amp; ch:s)<br>        &#123;<br>            n*=<span class="hljs-number">10</span>;<br>            n+=ch-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2:从右往左遍历(大佬的优雅方法)</p><p>C++:  4ms,5.9MB</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">monotoneIncreasingDigits</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        string s=<span class="hljs-built_in">to_string</span>(n);<br>        <span class="hljs-type">int</span> flag;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;--i)<br>            <span class="hljs-keyword">if</span>(s[i<span class="hljs-number">-1</span>]&gt;s[i])<br>            &#123;<br>                flag=i;<br>                --s[i<span class="hljs-number">-1</span>];<br>            &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=flag;i&lt;s.<span class="hljs-built_in">size</span>();++i)<br>            s[i]=<span class="hljs-string">&#x27;9&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">stoi</span>(s);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>大佬虽然优雅,但耗时有点长</p><h3 id="贪心23-监控二叉树">贪心23:监控二叉树</h3><p><a href="https://leetcode.cn/problems/binary-tree-cameras/description/">leetcode968</a></p><p>val: 1-&gt;安装监控<br>2-&gt;接受下方节点监控<br>3-&gt;接受上方节点监控</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCameraCover</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<span class="hljs-comment">//摄像头总数</span><br>        <span class="hljs-comment">//采用后序遍历</span><br>        function&lt;<span class="hljs-type">void</span>(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            <span class="hljs-keyword">if</span>(cur-&gt;right!=<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>            <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;left-&gt;val==<span class="hljs-number">3</span>||cur-&gt;right!=<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right-&gt;val==<span class="hljs-number">3</span>)<span class="hljs-comment">//左孩子和右孩子中存在接受上方监控的节点</span><br>            &#123;<br>                cur-&gt;val=<span class="hljs-number">1</span>;<span class="hljs-comment">//给当前节点安装监控</span><br>                ++ret;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;left!=<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;left-&gt;val==<span class="hljs-number">1</span>||cur-&gt;right!=<span class="hljs-literal">nullptr</span>&amp;&amp;cur-&gt;right-&gt;val==<span class="hljs-number">1</span>)<span class="hljs-comment">//左孩子和右孩子中存在装有监控的节点</span><br>                cur-&gt;val=<span class="hljs-number">2</span>;<span class="hljs-comment">//接受下方节点的监控</span><br>            <span class="hljs-keyword">else</span><br>                cur-&gt;val=<span class="hljs-number">3</span>;<span class="hljs-comment">//接受上方节点的监控</span><br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">if</span>(root-&gt;val==<span class="hljs-number">3</span>)<span class="hljs-comment">//可能出现root节点接受上方节点监控的情况,这时需要给root安装监控</span><br>            ++ret;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="11-图论专题">(11)图论专题</h2><h3 id="最小生成树-连接所有节点的最小费用">最小生成树:连接所有节点的最小费用</h3><p><a href="https://leetcode.cn/problems/min-cost-to-connect-all-points/">leetcode1584</a></p><p>本题为边稠密图,更适合普里姆算法</p><h4 id="prim普里姆算法">prim普里姆算法</h4><p>从某一个顶点开始构建生成树,每次将代价最小的新顶点纳入生成树,直到所有顶点都纳入为止</p><p>SysuGLM的解释:</p><blockquote><p>Prim 算法是一种用于解决无向图最小生成树问题的贪心算法。它的基本思想是从一个顶点开始，不断地寻找与当前生成树距离最近的顶点，将其加入到生成树中，直到所有顶点都加入到生成树中为止。该算法是由捷克数学家 Vojtěch Jarník 于 1930 年发现的，并在 1957 年由美国计算机科学家 Robert C. Prim 重新发现，因此得名 Prim 算法。<br>以下是 Prim 算法的基本步骤：</p><ol><li>初始化一个空的最小生成树 T。</li><li>任选图中一个顶点 v，将其加入到 T 中。</li><li>在图中寻找距离 T 最近的顶点 u，将边 (u, v) 加入到 T 中。</li><li>重复步骤 3，直到所有顶点都加入到 T 中。</li><li>得到的 T 即为原图的最小生成树。</li></ol><p>Prim 算法的时间复杂度取决于具体的实现方式。最简单的实现方式是用邻接矩阵表示图，其时间复杂度为 O(n^2)，其中 n 为图的顶点数。使用优先队列和邻接表可以进一步优化算法的性能，将时间复杂度降低到 O(nlogn)。</p></blockquote><p>设总共V个节点,时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>V</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(V^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,  适用于边稠密图</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCostConnectPoints</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span><span class="hljs-comment">//prim算法</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=points.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//点的总数</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">isjoin</span>(n);<span class="hljs-comment">//是否已被连接</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">lowcost</span>(n);<span class="hljs-comment">//连入图的最小开销</span><br>        lowcost[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        isjoin[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)<br>            lowcost[i]=<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>]-points[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>]-points[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//初始化图，到0节点的最小距离</span><br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> cur_min=INT_MAX;<br>            <span class="hljs-type">int</span> cur_idx;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;++j)<span class="hljs-comment">//寻找当前入图开销最小的节点</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(isjoin[j]==<span class="hljs-number">1</span>)<span class="hljs-comment">//排除已经入图的节点</span><br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(lowcost[j]&lt;cur_min)<br>                &#123;<br>                    cur_min=lowcost[j];<br>                    cur_idx=j;<br>                &#125;<br>            &#125;<br>            ret+=cur_min;<br>            isjoin[cur_idx]=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;n;++j)<span class="hljs-comment">//更新所有节点的入图距离</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(isjoin[j]==<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                lowcost[j]=<span class="hljs-built_in">min</span>(lowcost[j],<span class="hljs-built_in">abs</span>(points[j][<span class="hljs-number">0</span>]-points[cur_idx][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(points[j][<span class="hljs-number">1</span>]-points[cur_idx][<span class="hljs-number">1</span>]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode1584通过，68ms, 9.84MB</em></p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCostConnectPoints</span>(<span class="hljs-params">self, points: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n,ret=<span class="hljs-built_in">len</span>(points),<span class="hljs-number">0</span>  <span class="hljs-comment">## 点的总数 最小总费用</span><br>        cost,used=[<span class="hljs-number">0</span>]*n,[<span class="hljs-literal">False</span>]*n  <span class="hljs-comment">## 是否已被连接 连入图的最小开销</span><br>        used[<span class="hljs-number">0</span>]=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):  <span class="hljs-comment">## 初始化图，到0节点的距离</span><br>            cost[i]= <span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">0</span>]-points[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(points[i][<span class="hljs-number">1</span>]-points[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>):<br>            min_ele=inf<br>            min_idx=-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment">## 寻找当前入图开销最小的节点</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> used[j] <span class="hljs-keyword">and</span> cost[j]&lt;min_ele:<br>                    min_idx=j<br>                    min_ele=cost[j]<br>            ret+=min_ele<br>            used[min_idx]=<span class="hljs-literal">True</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):  <span class="hljs-comment">## 更新所有节点的入图距离</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> used[j]:<br>                    cost[j]=<span class="hljs-built_in">min</span>(cost[j],<span class="hljs-built_in">abs</span>(points[j][<span class="hljs-number">0</span>]-points[min_idx][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(points[j][<span class="hljs-number">1</span>]-points[min_idx][<span class="hljs-number">1</span>]))<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>leetcode1584通过，684ms, 16.41MB</p><p>对于本题，有n个顶点，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="Kruskal算法">Kruskal算法</h4><p>SysuGLM的解释:</p><blockquote><p>Kruskal 算法是一种贪心算法，用于求解连通网的最小生成树。具体步骤如下：</p><ol><li>将所有的边按照权重从小到大排序。</li><li>初始化一个空集合，用于存放已选择的边。</li><li>按照排序后的顺序依次遍历每条边，检查当前边的两个顶点是否属于同一个连通分量（可以使用并查集数据结构进行快速判断）。如果不属于同一个连通分量，那么将这条边加入到已选择的边的集合中，并合并这两个顶点所在的连通分量；如果已经属于同一个连通分量，那么跳过这条边。</li><li>当已选择的边的数量等于顶点数减一时，算法结束。此时已选择的边构成了连通网的最小生成树。<br>这种算法的时间复杂度为 O(ElogE)，其中 E 是边的数量。</li></ol></blockquote><p>该算法利用Quick Find版本的并查集, <a href="https://blog.csdn.net/yuzhiqiang666/article/details/80721436">有关并查集Quick Find和Quick Union版本的区别, 参考本文</a>。如果利用Quick Union版本的并查集，会超时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt;bing;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(bing[cur]!=cur)<br>            cur=bing[cur];<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCostConnectPoints</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; points)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=points.<span class="hljs-built_in">size</span>();<br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;edge;<span class="hljs-comment">//图中所有可能的边</span><br>        edge.<span class="hljs-built_in">reserve</span>(n*(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i+<span class="hljs-number">1</span>;j&lt;n;++j)<br>                edge.<span class="hljs-built_in">emplace_back</span>(<span class="hljs-built_in">make_pair</span>(i,j));<br>        <span class="hljs-built_in">sort</span>(edge.<span class="hljs-built_in">begin</span>(),edge.<span class="hljs-built_in">end</span>(),[&amp;](pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;a,pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;b)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(points[a.first][<span class="hljs-number">0</span>]-points[a.second][<span class="hljs-number">0</span>])+<br>            <span class="hljs-built_in">abs</span>(points[a.first][<span class="hljs-number">1</span>]-points[a.second][<span class="hljs-number">1</span>])&lt;<br>            <span class="hljs-built_in">abs</span>(points[b.first][<span class="hljs-number">0</span>]-points[b.second][<span class="hljs-number">0</span>])+<br>            <span class="hljs-built_in">abs</span>(points[b.first][<span class="hljs-number">1</span>]-points[b.second][<span class="hljs-number">1</span>]);<br>        &#125;);<span class="hljs-comment">//按照边从短到长排序</span><br>        bing.<span class="hljs-built_in">resize</span>(n);<span class="hljs-comment">//初始化并查集数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>            bing[i]=i;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p:edge)<br>        &#123;<br>            <span class="hljs-type">int</span> pf=<span class="hljs-built_in">find</span>(p.first);<br>            <span class="hljs-type">int</span> ps=<span class="hljs-built_in">find</span>(p.second);<br>            <span class="hljs-keyword">if</span>(pf==ps)<br>                <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                ret+=<span class="hljs-built_in">abs</span>(points[p.first][<span class="hljs-number">0</span>]-points[p.second][<span class="hljs-number">0</span>])+<span class="hljs-built_in">abs</span>(points[p.first][<span class="hljs-number">1</span>]-points[p.second][<span class="hljs-number">1</span>]);<br>                bing[ps]=pf;<br>                bing[p.second]=pf;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode1584通过，1808ms, 24.37MB</em></p><p>对于本题，共n个顶点，每两个顶点之间都有边连接，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>=</mo><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">|E|=n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，所有时间复杂度是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2\log n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p><h3 id="最短路径问题">最短路径问题:</h3><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230817173317209.png" alt="image-20230817173317209"></p><p><em>图出自王道考研数据结构</em></p><p><a href="https://www.bilibili.com/video/BV1b7411N798?p=64&amp;vd_source=0746909e8642dc821f4dc86699071129">参考视频【王道计算机考研 数据结构】</a></p><p>例题：</p><ul><li>网络延迟时间<a href="https://leetcode.cn/problems/network-delay-time/description/">leetcode743</a></li><li>【模板】单源最短路径（标准版）<a href="https://www.luogu.com.cn/problem/P4779">洛谷P4779</a></li><li>【模板】单源最短路径（弱化版）<a href="https://www.luogu.com.cn/problem/P3371">洛谷P3371</a></li></ul><p>BFS算法比较基础，且只能处理不带权的图，这里就不介绍了</p><h4 id="Dijkstra算法">Dijkstra算法</h4><p>当前算法适用于稠密图</p><p>求带权图的最短路径长度，局限是不能处理负权图</p><p>对于一系列顶点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>V</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>V</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">V_0,V_1,...,V_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>组成的有向带权图，求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">V_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到各个顶点的最短路径长度</p><p>初始化三个数组：</p><ul><li><code>bool final[n] </code>标记各个顶点是否已经找到最短路径，初始化为<code>False</code></li><li><code>int dist[n]</code> 到达各个顶点的最短路径长度,初始化为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">+\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span></li><li><code>int path[n]</code> 各个顶点在路径上的前驱,初始化为-1</li></ul><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 100000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkDelayTime</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">//Dijkstra算法</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">g</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,inf));<span class="hljs-comment">//邻接矩阵</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;time:times)<br>            g[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]]=time[<span class="hljs-number">2</span>];<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dist</span>(n+<span class="hljs-number">1</span>,inf);<span class="hljs-comment">//到达各个顶点的最短路径长度</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">used</span>(n+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//标记各个顶点是否已经找到最短路径，初始化为false</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">path</span>(n+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<span class="hljs-comment">//各个顶点在路径上的前驱,初始化为-1，在本题可有可无</span><br>        dist[k]=<span class="hljs-number">0</span>;<span class="hljs-comment">//从k开始搜索</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-comment">//找到当前dist数组中值最小的位置下标</span><br>            <span class="hljs-type">int</span> idx=<span class="hljs-number">-1</span>,cur_min=inf;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!used[j]&amp;&amp;dist[j]&lt;cur_min)<br>                &#123;<br>                    cur_min=dist[j];<br>                    idx=j;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(idx==<span class="hljs-number">-1</span>)<br>                <span class="hljs-keyword">break</span>;<br>            used[idx]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//考虑经过idx的路径，修改dist数组并更新path数组</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!used[j]&amp;&amp;dist[j]&gt;dist[idx]+g[idx][j])<br>                &#123;<br>                    dist[j]=dist[idx]+g[idx][j];<br>                    path[j]=idx;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for(int i=1;i&lt;=n;++i)</span><br>        <span class="hljs-comment">//     cout&lt;&lt;path[i]&lt;&lt;&#x27; &#x27;;</span><br>        <span class="hljs-type">int</span> ret=*<span class="hljs-built_in">max_element</span>(dist.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,dist.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ret==inf?<span class="hljs-number">-1</span>:ret;        <br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,100ms,36.9MB</em></p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-comment">## Dijkstra算法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">networkDelayTime</span>(<span class="hljs-params">self, times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dist=[inf]*(n+<span class="hljs-number">1</span>)  <span class="hljs-comment">## 到达各个顶点的最短路径长度</span><br>        used=[<span class="hljs-literal">False</span>]*(n+<span class="hljs-number">1</span>)  <span class="hljs-comment">## 标记各个顶点是否已经找到最短路径，初始化为false</span><br>        path=[-<span class="hljs-number">1</span>]*(n+<span class="hljs-number">1</span>)  <span class="hljs-comment">## 各个顶点在路径上的前驱,初始化为-1，在本题可有可无</span><br>        dist[k]=<span class="hljs-number">0</span>  <span class="hljs-comment">## 从k开始搜索</span><br>        arr=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]  <span class="hljs-comment">## 邻接矩阵</span><br>        <span class="hljs-keyword">for</span> time <span class="hljs-keyword">in</span> times:<br>            arr[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]]=time[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            <span class="hljs-comment">## 找到当前dist值最小的元素下标cur</span><br>            cur=-<span class="hljs-number">1</span><br>            cur_min=inf<br>            <span class="hljs-keyword">for</span> idx,distance <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(dist):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> used[idx] <span class="hljs-keyword">and</span> distance&lt;cur_min:<br>                    cur_min=distance<br>                    cur=idx<br>            used[cur]=<span class="hljs-literal">True</span><br>            <span class="hljs-comment">#根据以cur为起点能到达的点，更新dist数组</span><br>            <span class="hljs-keyword">for</span> new_point,distance <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(arr[cur]):<br>                <span class="hljs-keyword">if</span> dist[cur]+distance&lt;dist[new_point]:<br>                    dist[new_point]=dist[cur]+distance<br>                    path[new_point]=cur<br>        max_element=<span class="hljs-built_in">max</span>(dist[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(dist)])<br>        <span class="hljs-comment">## print(path[1:len(path)])</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span> <span class="hljs-keyword">if</span> max_element==inf <span class="hljs-keyword">else</span> max_element<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,60ms,17.7MB</em></p><p><strong>复杂度分析</strong></p><p>节点总数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>,要遍历一次所有顶点,对于每一次遍历,要更新与当前节点直接相连,并且final值为false的全部节点的dist值,该过程遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>次;还要找出从当前节点出发,下一个最近的节点,遍历<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>次</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.(邻接矩阵占用的空间)</p><p>当前算法只能求一个顶点到其他所有顶点的最短路径,如果需要求所有顶点到其他顶点的最短路径,则需要将该算法循环<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>次,总的时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="Dijkstra算法优化-使用小根堆priority-queue">Dijkstra算法优化:使用小根堆priority_queue</h4><p>当前算法适用于稀疏图</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 100000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkDelayTime</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">//Dijkstra算法优化</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">g</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,inf));<span class="hljs-comment">//邻接矩阵</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;time:times)<br>            g[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]]=time[<span class="hljs-number">2</span>];<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dist</span>(n+<span class="hljs-number">1</span>,inf);<span class="hljs-comment">//到达各个顶点的最短路径长度</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">used</span>(n+<span class="hljs-number">1</span>,<span class="hljs-literal">false</span>);<span class="hljs-comment">//标记各个顶点是否已经找到最短路径，初始化为false</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">path</span>(n+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>);<span class="hljs-comment">//各个顶点在路径上的前驱,初始化为-1，在本题可有可无</span><br>        dist[k]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">using</span> pii=pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;;<br>        priority_queue&lt;pii,vector&lt;pii&gt;,greater&lt;&gt;&gt;pq;<span class="hljs-comment">//小根堆, first为dist值, second为dist下标, 排序由first决定</span><br>        pq.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,k));<br>        <span class="hljs-keyword">while</span>(!pq.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> distance=pq.<span class="hljs-built_in">top</span>().first;<br>            <span class="hljs-type">int</span> cur=pq.<span class="hljs-built_in">top</span>().second;<br>            pq.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(distance&gt;dist[cur])<span class="hljs-comment">//可能存在有的结点被多次加入优先队列，这里需要提出dist值曾经被更新的结点</span><br>                <span class="hljs-keyword">continue</span>;<br>            used[cur]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!used[i]&amp;&amp;dist[cur]+g[cur][i]&lt;dist[i])<br>                &#123;<br>                    dist[i]=dist[cur]+g[cur][i];<br>                    path[i]=cur;<br>                    pq.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(dist[i],i));<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// for(int i=1;i&lt;=n;++i)</span><br>        <span class="hljs-comment">//     cout&lt;&lt;path[i]&lt;&lt;&#x27; &#x27;;</span><br>        <span class="hljs-type">int</span> maximum=*<span class="hljs-built_in">max_element</span>(dist.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,dist.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> maximum==inf?<span class="hljs-number">-1</span>:maximum;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,112ms,36MB</em></p><p><strong>复杂度分析</strong></p><p>设顶点数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>,边数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span></span></span></span>,小根堆的最大长度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span></span></span></span>,小根堆的插入和删除时间复杂度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(\log |E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span>,总共进行<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span></span></span></span>次遍历,总时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mi>log</mi><mo>⁡</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|E|\log |E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></p><p>dist数组占用空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span>,vec数组和小根堆占用空间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span>,总空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo>+</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|E|+|V|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></p><h4 id="Floyd算法">Floyd算法</h4><p>Floyd算法更加通用，可以解决带负权值的图，但前提是最短路径存在</p><pre><code class=" mermaid">graph RL;A==3==&gt;BB==4==&gt;CC==-9==&gt;A</code></pre><p>如上图所示，要求A到C的最短路径，如果选择的路径是沿着箭头一直前进，每循环一圈路径长度减2，A到C的路径可以无穷小，不存在最短路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 100000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkDelayTime</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">//floyd算法</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">arr</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,inf));<span class="hljs-comment">//代表各顶点间的最短路径长度，初始化为邻接表</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; time:times)<br>            arr[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]]=time[<span class="hljs-number">2</span>];<span class="hljs-comment">//不允许在其他节点中转，最短路径是</span><br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">path</span>(n+<span class="hljs-number">1</span>,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n+<span class="hljs-number">1</span>,<span class="hljs-number">-1</span>));<span class="hljs-comment">//两个节点之间的中转点，在本题可有可无</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<span class="hljs-comment">//依次考虑以第i个节点为中转，更新</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<span class="hljs-comment">//遍历所有可能的方向</span><br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">1</span>;m&lt;=n;++m)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(arr[j][m]&gt;arr[j][i]+arr[i][m])<br>                    &#123;<br>                        arr[j][m]=arr[j][i]+arr[i][m];<br>                        path[j][m]=i;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==k)<br>                <span class="hljs-keyword">continue</span>;<br>            ret=<span class="hljs-built_in">max</span>(ret,arr[k][i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret==inf?<span class="hljs-number">-1</span>:ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,160ms,37MB</em></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-comment">## Floyd 算法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">networkDelayTime</span>(<span class="hljs-params">self, times: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], n: <span class="hljs-built_in">int</span>, k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        arr=[[inf]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]  <span class="hljs-comment">## 邻接表</span><br>        path=[[-<span class="hljs-number">1</span>]*(n+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]  <span class="hljs-comment">## 记录中转点，在本题可有可无</span><br>        <span class="hljs-keyword">for</span> time <span class="hljs-keyword">in</span> times:<br>            arr[time[<span class="hljs-number">0</span>]][time[<span class="hljs-number">1</span>]]=time[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):  <span class="hljs-comment">## 中转点</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):  <span class="hljs-comment">## 行下标</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):  <span class="hljs-comment">## 列下标</span><br>                    <span class="hljs-keyword">if</span> arr[i][t]+arr[t][j]&lt;arr[i][j]:<br>                        path[i][j]=t<br>                        arr[i][j]=arr[i][t]+arr[t][j]<br>        arr[k][k]=<span class="hljs-number">0</span><br>        ret=<span class="hljs-built_in">max</span>(arr[k][<span class="hljs-number">1</span>:n+<span class="hljs-number">1</span>])  <span class="hljs-comment">## 找到从k出发到其他顶点的最大距离</span><br>        <span class="hljs-keyword">return</span> ret <span class="hljs-keyword">if</span> ret!=inf <span class="hljs-keyword">else</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><em>leetcode743通过,352ms,18.56MB</em></p><p><strong>复杂度分析</strong></p><p>该过程相当于对一个三维数组的动态规划(在内存使用上可以只使用二维数组),时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>3</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|^3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>,空间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V|^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord">∣</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h4 id="Bellman-ford算法">Bellman-ford算法</h4><p>（引用自百度百科）</p><blockquote><p>贝尔曼-福特算法与<a href="https://baike.baidu.com/item/%E8%BF%AA%E7%A7%91%E6%96%AF%E5%BD%BB%E7%AE%97%E6%B3%95?fromModule=lemma_inlink">迪科斯彻算法</a>类似，都以松弛操作为基础，即估计的最短路径值渐渐地被更加准确的值替代，直至得到最优解。在两个算法中，计算时每个边之间的估计距离值都比真实值大，并且被新找到路径的最小长度替代。 然而，迪科斯彻算法以<a href="https://baike.baidu.com/item/%E8%B4%AA%E5%BF%83%E6%B3%95?fromModule=lemma_inlink">贪心法</a>选取未被处理的具有最小权值的节点，然后对其的出边进行松弛操作；而贝尔曼-福特算法简单地对所有边进行松弛操作，共<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">|V|-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p><p>次，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>是图的点的数量。在重复地计算中，已计算得到正确的距离的边的数量不断增加，直到所有边都计算得到了正确的路径。这样的策略使得贝尔曼-福特算法比迪科斯彻算法适用于更多种类的输入。</p></blockquote><p><a href="http://t.csdn.cn/kk6Pe">CSDN Bellman-ford算法</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 10000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkDelayTime</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> <span class="hljs-comment">//Bellman-ford算法</span></span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dist</span>(n+<span class="hljs-number">1</span>,inf);<br>        dist[k]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<span class="hljs-comment">//循环n-1次，一定能松弛所有顶点，否则没有被松弛的收不到信号</span><br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; time:times)<span class="hljs-comment">//遍历所有边</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(dist[time[<span class="hljs-number">0</span>]]+time[<span class="hljs-number">2</span>]&lt;dist[time[<span class="hljs-number">1</span>]])<span class="hljs-comment">//松弛操作</span><br>                    dist[time[<span class="hljs-number">1</span>]]=dist[time[<span class="hljs-number">0</span>]]+time[<span class="hljs-number">2</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ret=*<span class="hljs-built_in">max_element</span>(dist.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,dist.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ret==inf?<span class="hljs-number">-1</span>:ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,152ms,35.7MB</em></p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(|V||E|)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span>,其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>V</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|V|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord">∣</span></span></span></span>是顶点数,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>E</mi><mi mathvariant="normal">∣</mi></mrow><annotation encoding="application/x-tex">|E|</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord">∣</span></span></span></span>是边数</p><h4 id="SPFA算法">SPFA算法</h4><p>SPFA算法是对Bellman-ford算法的优化</p><p>shortest path faster algorithm</p><p>参考文献<a href="http://t.csdn.cn/UioTD">CSDN SPFA算法</a>,画图详细解释了该算法,适合小白</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 100000000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">networkDelayTime</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; times, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        queue&lt;<span class="hljs-type">int</span>&gt;que;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dist</span>(n+<span class="hljs-number">1</span>,inf);<br>        que.<span class="hljs-built_in">push</span>(k);<br>        dist[k]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">using</span> Pair=pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;;<br>        vector&lt;vector&lt;Pair&gt;&gt;<span class="hljs-built_in">vec</span>(n+<span class="hljs-number">1</span>);<span class="hljs-comment">//从i节点到vec[i].first有一条长度为vec[i].second的路径</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; time:times)<br>            vec[time[<span class="hljs-number">0</span>]].<span class="hljs-built_in">emplace_back</span>(time[<span class="hljs-number">1</span>],time[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> front=que.<span class="hljs-built_in">front</span>();<br>            que.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">auto</span>&amp; ve=vec[front];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p:ve)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(dist[p.first]&gt;dist[front]+p.second)<br>                &#123;<br>                    dist[p.first]=dist[front]+p.second;<br>                    que.<span class="hljs-built_in">push</span>(p.first);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ret=*<span class="hljs-built_in">max_element</span>(dist.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">1</span>,dist.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">return</span> ret==inf?<span class="hljs-number">-1</span>:ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><em>leetcode743通过,84ms,39MB</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 0x7fffffff</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><span class="hljs-comment">//SPFA算法</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> n,m,s;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;s;<br>    <span class="hljs-type">int</span> u,v,w;<br>    <span class="hljs-keyword">using</span> Pair=pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;;<br>    vector&lt;vector&lt;Pair&gt;&gt; <span class="hljs-built_in">g</span>(n+<span class="hljs-number">1</span>);<span class="hljs-comment">//从i节点到g[i].first有一条长度为g[i].second的路径</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>    &#123;<br>        cin&gt;&gt;u&gt;&gt;v&gt;&gt;w;<br>        g[u].<span class="hljs-built_in">emplace_back</span>(v,w);<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dist</span><span class="hljs-params">(n+<span class="hljs-number">1</span>,inf)</span></span>;<br>    dist[s]=<span class="hljs-number">0</span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(s);<br>    <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        <span class="hljs-type">int</span> front=q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; p:g[front])<br>        &#123;<br>            <span class="hljs-keyword">if</span>(dist[p.first]&gt;dist[front]+p.second)<br>            &#123;<br>                dist[p.first]=dist[front]+p.second;<br>                q.<span class="hljs-built_in">push</span>(p.first);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>        cout&lt;&lt;dist[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><em>洛谷P3371 【模板】单源最短路径（弱化版）通过</em></p><blockquote><p>SPFA的复杂度大约是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>k</mi><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(kE)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>,k是每个点的平均进队次数(一般的，k是一个常数，在稀疏图中小于2)。</p><p><a href="http://t.csdn.cn/UioTD">引用出处</a></p></blockquote><h3 id="拓扑排序">拓扑排序</h3><p>参考<a href="https://www.bilibili.com/video/BV1b7411N798?p=67&amp;vd_source=0746909e8642dc821f4dc86699071129">王道考研数据结构</a></p><p><strong>AOV网</strong>(Activity On Vertex Network):用顶点表示活动的网</p><p>用DAG图(有向无环图)表示一个工程,顶点表示活动,有向边<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>&lt;</mo><msub><mi>V</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>j</mi></msub><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">&lt;V_i,V_j&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span>表示活动<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">V_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>必须先于活动<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>V</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">V_j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>进行</p><pre><code class=" mermaid">graph LR;准备厨具 --&gt; 打鸡蛋准备厨具 --&gt; 切番茄买菜 --&gt;打鸡蛋买菜--&gt;洗番茄洗番茄--&gt;切番茄打鸡蛋--&gt;下锅炒切番茄--&gt;下锅炒下锅炒--&gt;吃番茄炒蛋</code></pre><p>表示“番茄炒蛋工程”的AOV网</p><p>拓扑排序的一种结果:</p><pre><code class=" mermaid">graph LR;准备厨具--&gt;买菜买菜--&gt;洗番茄洗番茄--&gt;切番茄切番茄--&gt;打鸡蛋打鸡蛋--&gt;下锅炒下锅炒--&gt;吃番茄炒蛋</code></pre><p><strong>拓扑排序的实现:</strong></p><ol><li>从AOV网中选择一个没有前驱==(入度为0)==的顶点并输出</li><li>在网中删除该顶点和所有以它为起点的有向边</li><li>重复步骤1和2直到当前的==AOV网为空==或==当前网中不存在无前驱的顶点(说明有回路)==为止</li></ol><p>出现回路的情况:</p><pre><code class=" mermaid">graph LR;洗番茄---&gt;切番茄切番茄---&gt;洗番茄切番茄--&gt;下锅炒下锅炒--&gt;吃番茄炒蛋</code></pre><p>当前所有顶点的入度&gt;0,说明原图存在回路</p><h4 id="课程表">课程表</h4><p><a href="https://leetcode.cn/problems/course-schedule/description/">leetcode207</a></p><p><strong>方法1：BFS</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(numCourses);<span class="hljs-comment">//vec[i]存储完成课程i之后才能完成的课程</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">indegree</span>(numCourses);<span class="hljs-comment">//indegree[i]存储课程i在AOV网中的全部前驱节点</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre:prerequisites)<br>        &#123;<br>            vec[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(pre[<span class="hljs-number">0</span>]);<br>            ++indegree[pre[<span class="hljs-number">0</span>]];<br>        &#125;<br>        stack&lt;<span class="hljs-type">int</span>&gt;sta;<span class="hljs-comment">//当前所有入度为零的节点下标</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;++i)<br>            <span class="hljs-keyword">if</span>(indegree[i]==<span class="hljs-number">0</span>)<br>                sta.<span class="hljs-built_in">push</span>(i);<span class="hljs-comment">//初始化栈</span><br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//统计当前已经遍历的节点数量</span><br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> cur=sta.<span class="hljs-built_in">top</span>();<br>            ++cnt;<br>            sta.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">auto</span>&amp; ve=vec[cur];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; ve_:ve)<br>            &#123;<br>                --indegree[ve_];<br>                <span class="hljs-keyword">if</span>(indegree[ve_]==<span class="hljs-number">0</span>)<br>                    sta.<span class="hljs-built_in">push</span>(ve_);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt==numCourses;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：DFS</strong></p><p>参考<a href="https://leetcode.cn/problems/course-schedule-ii/solutions/249149/ke-cheng-biao-ii-by-leetcode-solution/">力扣官方题解</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(numCourses);<span class="hljs-comment">//vec[i]存储完成课程i之后才可以完成的课程</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">isvisited</span>(numCourses,<span class="hljs-literal">false</span>);<span class="hljs-comment">//记录节点i是否正在被访问</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">isInStack</span>(numCourses,<span class="hljs-literal">false</span>);<span class="hljs-comment">//记录节点i是否已经入栈</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre:prerequisites)<br>        &#123;<br>            vec[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(pre[<span class="hljs-number">0</span>]);<span class="hljs-comment">//初始化vec数组</span><br>        &#125;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//当flag==1时，说明正在被访问的结果遭到二次访问，说明图中有环，返回空数组</span><br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)&#123;<br>            <span class="hljs-keyword">if</span>(flag)<br>                <span class="hljs-keyword">return</span>;<br>            isvisited[idx]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">auto</span>&amp; ve=vec[idx];<span class="hljs-comment">//当前节点直接指向的节点</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; ve_:ve)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!isvisited[ve_])<span class="hljs-comment">//确保正在被访问的结果没有遭到二次访问</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(!isInStack[ve_])<br>                        <span class="hljs-built_in">dfs</span>(ve_);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    flag=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            isvisited[idx]=<span class="hljs-literal">false</span>;<br>            isInStack[idx]=<span class="hljs-literal">true</span>;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;++i)<br>            <span class="hljs-keyword">if</span>(!isInStack[i])<br>            &#123;<br>                <span class="hljs-built_in">dfs</span>(i);<br>                <span class="hljs-keyword">if</span>(flag)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="课程表II">课程表II</h4><p><a href="https://leetcode.cn/problems/course-schedule-ii/description/">leetcode210</a></p><p><strong>方法1：BFS</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(numCourses);<span class="hljs-comment">//vec[i]存储完成课程i之后才可以完成的课程</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">indegree</span>(numCourses);<span class="hljs-comment">//indegree[i]存储课程i节点的所有入度</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<span class="hljs-comment">//返回的排序数组</span><br>        ret.<span class="hljs-built_in">reserve</span>(numCourses);<span class="hljs-comment">//预留空间</span><br>        stack&lt;<span class="hljs-type">int</span>&gt;sta;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre:prerequisites)<br>        &#123;<br>            vec[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(pre[<span class="hljs-number">0</span>]);<span class="hljs-comment">//初始化vec数组</span><br>            ++indegree[pre[<span class="hljs-number">0</span>]];<span class="hljs-comment">//初始化indegree数组</span><br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;++i)<br>            <span class="hljs-keyword">if</span>(indegree[i]==<span class="hljs-number">0</span>)<br>                sta.<span class="hljs-built_in">push</span>(i);<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//已经遍历过的节点数量</span><br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            ++cnt;<br>            <span class="hljs-type">int</span> cur=sta.<span class="hljs-built_in">top</span>();<br>            sta.<span class="hljs-built_in">pop</span>();<br>            ret.<span class="hljs-built_in">emplace_back</span>(cur);<br>            <span class="hljs-keyword">auto</span>&amp; ve=vec[cur];<span class="hljs-comment">//完成当前课程之后才可以完成的课程</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; ve_:ve)<br>            &#123;<br>                --indegree[ve_];<br>                <span class="hljs-keyword">if</span>(indegree[ve_]==<span class="hljs-number">0</span>)<br>                    sta.<span class="hljs-built_in">push</span>(ve_);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt==numCourses)<br>            <span class="hljs-keyword">return</span> ret;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>方法2：DFS</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(numCourses);<span class="hljs-comment">//vec[i]存储完成课程i之后才可以完成的课程</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">isvisited</span>(numCourses,<span class="hljs-literal">false</span>);<span class="hljs-comment">//记录节点i是否正在被访问</span><br>        vector&lt;<span class="hljs-type">bool</span>&gt;<span class="hljs-built_in">isInStack</span>(numCourses,<span class="hljs-literal">false</span>);<span class="hljs-comment">//记录节点i是否已经入栈</span><br>        stack&lt;<span class="hljs-type">int</span>&gt;sta;<span class="hljs-comment">//存储逆拓扑排序序列</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre:prerequisites)<br>        &#123;<br>            vec[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(pre[<span class="hljs-number">0</span>]);<span class="hljs-comment">//初始化vec数组</span><br>        &#125;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<span class="hljs-comment">//当flag==1时，说明正在被访问的结果遭到二次访问，说明图中有环，返回空数组</span><br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)&#123;<br>            <span class="hljs-keyword">if</span>(flag)<br>                <span class="hljs-keyword">return</span>;<br>            isvisited[idx]=<span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">auto</span>&amp; ve=vec[idx];<span class="hljs-comment">//当前节点直接指向的节点</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; ve_:ve)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(!isvisited[ve_])<span class="hljs-comment">//确保正在被访问的结果没有遭到二次访问</span><br>                &#123;<br>                    <span class="hljs-keyword">if</span>(!isInStack[ve_])<br>                        <span class="hljs-built_in">dfs</span>(ve_);<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    flag=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            sta.<span class="hljs-built_in">push</span>(idx);<br>            isvisited[idx]=<span class="hljs-literal">false</span>;<br>            isInStack[idx]=<span class="hljs-literal">true</span>;<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numCourses;++i)<br>            <span class="hljs-keyword">if</span>(!isInStack[i])<br>            &#123;<br>                <span class="hljs-built_in">dfs</span>(i);<br>                <span class="hljs-keyword">if</span>(flag)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br>            &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;ret;<br>        ret.<span class="hljs-built_in">reserve</span>(numCourses);<br>        <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            ret.<span class="hljs-built_in">emplace_back</span>(sta.<span class="hljs-built_in">top</span>());<br>            sta.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论1：统计点对的数目">图论1：统计点对的数目</h3><p><a href="https://leetcode.cn/problems/count-pairs-of-nodes/description/">leetcode1782</a></p><p>参考<a href="https://leetcode.cn/problems/count-pairs-of-nodes/solutions/2400682/ji-bai-100cong-shuang-zhi-zhen-dao-zhong-yhze/">灵神的题解</a></p><p>利用算法：[哈希表6.9:两数之和 II - 输入有序数组](#哈希表6.9:两数之和 II - 输入有序数组)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">countPairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges, vector&lt;<span class="hljs-type">int</span>&gt;&amp; queries)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">deg</span>(n);<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;cnt_e;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; edge:edges)<br>        &#123;<br>            <span class="hljs-type">int</span> x=edge[<span class="hljs-number">0</span>]<span class="hljs-number">-1</span>,y=edge[<span class="hljs-number">1</span>]<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">if</span>(x&gt;y)<br>                <span class="hljs-built_in">swap</span>(x,y);<br>            ++deg[x];<br>            ++deg[y];<br>            ++cnt_e[x&lt;&lt;<span class="hljs-number">16</span>|y];<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;sorted_deg=deg;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">ans</span>(queries.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-built_in">sort</span>(sorted_deg.<span class="hljs-built_in">begin</span>(),sorted_deg.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;queries.<span class="hljs-built_in">size</span>();++j)<br>        &#123;<br>            <span class="hljs-type">int</span> q=queries[j];<br>            <span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=n<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(left&lt;right)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(sorted_deg[left]+sorted_deg[right]&gt;q)<br>                &#123;<br>                    ans[j]+=right-left;<br>                    --right;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                    ++left;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; e:cnt_e)<br>            &#123;<br>                <span class="hljs-type">int</span> x=e.first&gt;&gt;<span class="hljs-number">16</span>;<br>                <span class="hljs-type">int</span> y=e.first&amp;<span class="hljs-number">0xffff</span>;<br>                <span class="hljs-type">int</span> num=e.second;<br>                <span class="hljs-keyword">if</span>(deg[x]+deg[y]&gt;q&amp;&amp;deg[x]+deg[y]-num&lt;=q)<br>                    --ans[j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论2：课程表IV">图论2：课程表IV</h3><p><a href="https://leetcode.cn/problems/course-schedule-iv/">leetcode1462</a></p><p>Floyd算法：</p><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-comment">## floyd 算法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">checkIfPrerequisite</span>(<span class="hljs-params">self, numCourses: <span class="hljs-built_in">int</span>, prerequisites: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], queries: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">bool</span>]:<br>        arr=[[<span class="hljs-literal">False</span>]*numCourses <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses)]<br>        <span class="hljs-keyword">for</span> pre,now <span class="hljs-keyword">in</span> prerequisites:<br>            arr[pre][now]=<span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses):<br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(numCourses):<br>                    arr[i][j]=arr[i][j] <span class="hljs-keyword">or</span> arr[i][k] <span class="hljs-keyword">and</span> arr[k][j]<br>        ret=[<span class="hljs-literal">False</span>]*<span class="hljs-built_in">len</span>(queries)<br>        <span class="hljs-keyword">for</span> idx,[pre,now] <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(queries):<br>            ret[idx]=arr[pre][now]<br>        <span class="hljs-keyword">return</span> ret  <br></code></pre></td></tr></table></figure><p>广度优先搜索+记忆化</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">checkIfPrerequisite</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; queries)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">arr</span>(numCourses);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; ar:arr)<br>        &#123;<br>            ar.<span class="hljs-built_in">reserve</span>(numCourses);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pre:prerequisites)<br>        &#123;<br>            arr[pre[<span class="hljs-number">1</span>]].<span class="hljs-built_in">emplace_back</span>(pre[<span class="hljs-number">0</span>]);<br>        &#125;<br>        vector&lt;<span class="hljs-type">bool</span>&gt;ret;<br>        ret.<span class="hljs-built_in">reserve</span>(queries.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; que:queries)<br>        &#123;<br>            <span class="hljs-type">int</span> pre=que[<span class="hljs-number">0</span>],now=que[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">bool</span> flag=<span class="hljs-literal">false</span>;<br>            unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>            queue&lt;<span class="hljs-type">int</span>&gt;q;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; fin:arr[now])<br>            &#123;<br>                q.<span class="hljs-built_in">push</span>(fin);<br>                <span class="hljs-keyword">if</span>(fin==pre)<br>                &#123;<br>                    flag=<span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-type">int</span> cnt=arr[now].<span class="hljs-built_in">size</span>();<br>            <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>()&amp;&amp;!flag)<br>            &#123;<br>                --cnt;<br>                <span class="hljs-type">int</span> cur=q.<span class="hljs-built_in">front</span>();<br>                q.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">if</span>(hash[cur]==<span class="hljs-number">1</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                hash[cur]=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(cnt&lt;<span class="hljs-number">0</span>)<br>                    arr[now].<span class="hljs-built_in">emplace_back</span>(cur);<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp;fin:arr[cur])<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(fin==pre)<br>                    &#123;<br>                        flag=<span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    q.<span class="hljs-built_in">push</span>(fin);<br>                &#125;<br>            &#125;<br>            ret.<span class="hljs-built_in">emplace_back</span>(flag);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论3：所有可能的路径">图论3：所有可能的路径</h3><p><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/description/">leetcode797</a></p><p>dfs搜索所有路径</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">allPathsSourceTarget</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; graph) <br>    &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ret;<br>        vector&lt;<span class="hljs-type">int</span>&gt;tmp;<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> cur)&#123;<br>            tmp.<span class="hljs-built_in">emplace_back</span>(cur);<br>            <span class="hljs-keyword">if</span>(cur==graph.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>)<br>            &#123;<br>                ret.<span class="hljs-built_in">emplace_back</span>(tmp);<br>                tmp.<span class="hljs-built_in">pop_back</span>();<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; next:graph[cur])<br>            &#123;<br>                <span class="hljs-built_in">dfs</span>(next);<br>            &#125;<br>            tmp.<span class="hljs-built_in">pop_back</span>();<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论4：岛屿数量">图论4：岛屿数量</h3><p><a href="https://leetcode.cn/problems/number-of-islands/">leetcode200</a></p><p>dfs</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; grid)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;judge=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>        &#123;<br>            <span class="hljs-keyword">return</span> x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;m&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;n&amp;&amp;grid[x][y]==<span class="hljs-string">&#x27;1&#x27;</span>;<br>        &#125;;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j))<br>                &#123;<br>                    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>                    &#123;<br>                        grid[x][y]=<span class="hljs-string">&#x27;2&#x27;</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x+<span class="hljs-number">1</span>,y))<br>                            <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x<span class="hljs-number">-1</span>,y))<br>                            <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y+<span class="hljs-number">1</span>))<br>                            <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y<span class="hljs-number">-1</span>))<br>                            <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>);<br>                    &#125;;<br>                    <span class="hljs-built_in">dfs</span>(i,j);<br>                    ++ret;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论5：岛屿的最大面积">图论5：岛屿的最大面积</h3><p><a href="https://leetcode.cn/problems/max-area-of-island/description/">leetcode695</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxAreaOfIsland</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;judge=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>        &#123;<br>            <span class="hljs-keyword">return</span> x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;m&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;n&amp;&amp;grid[x][y]==<span class="hljs-number">1</span>;<br>        &#125;;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j))<br>                &#123;<br>                    <span class="hljs-type">int</span> cur=<span class="hljs-number">0</span>;<br>                    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)<br>                    &#123;<br>                        ++cur;<br>                        grid[x][y]=<span class="hljs-number">-1</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x+<span class="hljs-number">1</span>,y))<br>                            <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x<span class="hljs-number">-1</span>,y))<br>                            <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y+<span class="hljs-number">1</span>))<br>                            <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y<span class="hljs-number">-1</span>))<br>                            <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>);<br>                    &#125;;<br>                    <span class="hljs-built_in">dfs</span>(i,j);<br>                    ret=<span class="hljs-built_in">max</span>(ret,cur);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论6：飞地的数量">图论6：飞地的数量</h3><p><a href="https://leetcode.cn/problems/number-of-enclaves/description/">leetcode1020</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numEnclaves</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m=grid.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=grid[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;judge=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<span class="hljs-comment">//只判断越界</span><br>            <span class="hljs-keyword">return</span> x&gt;=<span class="hljs-number">0</span>&amp;&amp;x&lt;m&amp;&amp;y&gt;=<span class="hljs-number">0</span>&amp;&amp;y&lt;n;<br>        &#125;;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">1</span>)<br>                &#123;<br>                    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>                    <span class="hljs-type">bool</span> flag=<span class="hljs-literal">false</span>;<br>                    function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>                        ++cnt;<br>                        ++ret;<br>                        grid[x][y]=<span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x<span class="hljs-number">-1</span>,y))<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(grid[x<span class="hljs-number">-1</span>][y]==<span class="hljs-number">1</span>)<br>                                <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                            flag=<span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x+<span class="hljs-number">1</span>,y))<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(grid[x+<span class="hljs-number">1</span>][y]==<span class="hljs-number">1</span>)<br>                                <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                            flag=<span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y<span class="hljs-number">-1</span>))<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(grid[x][y<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<br>                                <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                            flag=<span class="hljs-literal">true</span>;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y+<span class="hljs-number">1</span>))<br>                        &#123;<br>                            <span class="hljs-keyword">if</span>(grid[x][y+<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>)<br>                                <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>                        &#125;<br>                        <span class="hljs-keyword">else</span><br>                            flag=<span class="hljs-literal">true</span>;<br>                    &#125;;<br>                    <span class="hljs-built_in">dfs</span>(i,j);<br>                    <span class="hljs-keyword">if</span>(flag)<br>                        ret-=cnt;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>相似题目：统计封闭岛屿的数目</p><p><a href="https://leetcode.cn/problems/number-of-closed-islands/description/">leetcode1254</a></p><h3 id="图论9：太平洋大西洋水流问题">图论9：太平洋大西洋水流问题</h3><p><a href="https://leetcode.cn/problems/pacific-atlantic-water-flow/description/">leetcode417</a></p><p>从四边形边界开始dfs搜索，搜索的条件为下一个待搜索的位置高度比当前所在位置高</p><p>共进行二轮搜索，第一轮从最左列和最上行出发，第二轮从最下行和最右列出发</p><p>最后返回两轮都被搜索到的下标</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> judge(x,y) ((x)<span class="hljs-string">&lt;m&amp;&amp;(y)&lt;n&amp;&amp;(x)&gt;</span>=0&amp;&amp;(y)&gt;=0&amp;&amp;tmp[(x)][(y)]==0)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">pacificAtlantic</span>(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; heights) &#123;<br>        <span class="hljs-type">int</span> m=heights.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=heights[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>();<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">arr</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n));<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">tmp</span>(m,<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n));<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>            tmp[x][y]=<span class="hljs-number">1</span>;<br>            ++arr[x][y];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x+<span class="hljs-number">1</span>,y)&amp;&amp;heights[x+<span class="hljs-number">1</span>][y]&gt;=heights[x][y])<br>                <span class="hljs-built_in">dfs</span>(x+<span class="hljs-number">1</span>,y);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x<span class="hljs-number">-1</span>,y)&amp;&amp;heights[x<span class="hljs-number">-1</span>][y]&gt;=heights[x][y])<br>                <span class="hljs-built_in">dfs</span>(x<span class="hljs-number">-1</span>,y);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y+<span class="hljs-number">1</span>)&amp;&amp;heights[x][y+<span class="hljs-number">1</span>]&gt;=heights[x][y])<br>                <span class="hljs-built_in">dfs</span>(x,y+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(x,y<span class="hljs-number">-1</span>)&amp;&amp;heights[x][y<span class="hljs-number">-1</span>]&gt;=heights[x][y])<br>                <span class="hljs-built_in">dfs</span>(x,y<span class="hljs-number">-1</span>);<br>        &#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<span class="hljs-comment">//扫描最上行</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(<span class="hljs-number">0</span>,j))<br>                <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>,j);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<span class="hljs-comment">//扫描最左列</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,<span class="hljs-number">0</span>))<br>                <span class="hljs-built_in">dfs</span>(i,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                tmp[i][j]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<span class="hljs-comment">//扫描最下行</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(m<span class="hljs-number">-1</span>,j))<br>                <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,j);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<span class="hljs-comment">//扫描最右列</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,n<span class="hljs-number">-1</span>))<br>                <span class="hljs-built_in">dfs</span>(i,n<span class="hljs-number">-1</span>);<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;ret;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;m;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>                <span class="hljs-keyword">if</span>(arr[i][j]==<span class="hljs-number">2</span>)<br>                    ret.<span class="hljs-built_in">push_back</span>(&#123;i,j&#125;);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论10：最大人工岛">图论10：最大人工岛</h3><p><a href="https://leetcode.cn/problems/making-a-large-island/description/">leetcode827</a></p><p>使用并查集</p><p>第一次遍历整个矩阵中值为1的部分，连接所有岛屿</p><p>第二次遍历整个矩阵中值为0的部分，考虑将当前遍历的点变为岛屿，可以连接的岛屿面积有多大</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> judge(x,y) ((x)&gt;=0&amp;&amp;(x)<span class="hljs-string">&lt;n&amp;&amp;(y)&gt;</span>=0&amp;&amp;(y)&lt;n&amp;&amp;grid[(x)][(y)]==1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> n;<br>    vector&lt;<span class="hljs-type">int</span>&gt;djs;<span class="hljs-comment">//Disjoint-set</span><br>    vector&lt;<span class="hljs-type">int</span>&gt;area;<span class="hljs-comment">//面积</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findParent</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> cur=y+x*n;<br>        <span class="hljs-keyword">while</span>(djs[cur]!=cur)<br>            cur=djs[cur];<br>        <span class="hljs-keyword">return</span> cur;        <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> x1,<span class="hljs-type">int</span> y1,<span class="hljs-type">int</span> x2,<span class="hljs-type">int</span> y2)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> c1=y1+n*x1;<br>        <span class="hljs-type">int</span> c2=y2+n*x2;<br>        <span class="hljs-type">int</span> p1=<span class="hljs-built_in">findParent</span>(x1,y1);<br>        <span class="hljs-type">int</span> p2=<span class="hljs-built_in">findParent</span>(x2,y2);<br>        <span class="hljs-keyword">if</span>(p1&gt;p2)<br>            <span class="hljs-built_in">swap</span>(p1,p2);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p1==p2)<br>            <span class="hljs-keyword">return</span>;<br>        djs[p2]=p1;<br>        djs[c2]=p1;<br>        djs[c1]=p1;<br>        area[p1]+=area[p2];<br>        area[p2]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">largestIsland</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;<br>        n=grid.<span class="hljs-built_in">size</span>();<br>        djs.<span class="hljs-built_in">resize</span>(n*n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n*n;++i)<br>            djs[i]=i;<br>        area.<span class="hljs-built_in">resize</span>(n*n,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">0</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i<span class="hljs-number">-1</span>,j))<br>                    <span class="hljs-built_in">join</span>(i,j,i<span class="hljs-number">-1</span>,j);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i+<span class="hljs-number">1</span>,j))<br>                    <span class="hljs-built_in">join</span>(i,j,i+<span class="hljs-number">1</span>,j);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j<span class="hljs-number">-1</span>))<br>                    <span class="hljs-built_in">join</span>(i,j,i,j<span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j+<span class="hljs-number">1</span>))<br>                    <span class="hljs-built_in">join</span>(i,j,i,j+<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<span class="hljs-comment">//统计岛屿总数，判断是不是n*n</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(grid[i][j]==<span class="hljs-number">1</span>)<br>                &#123;<br>                    ++cnt;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> up=<span class="hljs-number">-1</span>,down=<span class="hljs-number">-1</span>,left=<span class="hljs-number">-1</span>,right=<span class="hljs-number">-1</span>;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i<span class="hljs-number">-1</span>,j))<br>                    up=<span class="hljs-built_in">findParent</span>(i<span class="hljs-number">-1</span>,j);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i+<span class="hljs-number">1</span>,j))<br>                    down=<span class="hljs-built_in">findParent</span>(i+<span class="hljs-number">1</span>,j);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j<span class="hljs-number">-1</span>))<br>                    left=<span class="hljs-built_in">findParent</span>(i,j<span class="hljs-number">-1</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(i,j+<span class="hljs-number">1</span>))<br>                    right=<span class="hljs-built_in">findParent</span>(i,j+<span class="hljs-number">1</span>);<br>                <span class="hljs-type">int</span> add=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(up!=<span class="hljs-number">-1</span>)<br>                    add+=area[up];<br>                <span class="hljs-keyword">if</span>(down!=<span class="hljs-number">-1</span>&amp;&amp;down!=up)<br>                    add+=area[down];<br>                <span class="hljs-keyword">if</span>(left!=<span class="hljs-number">-1</span>&amp;&amp;left!=up&amp;&amp;left!=down)<br>                    add+=area[left];<br>                <span class="hljs-keyword">if</span>(right!=<span class="hljs-number">-1</span>&amp;&amp;right!=up&amp;&amp;right!=down&amp;&amp;right!=left)<br>                    add+=area[right];<br>                ret=<span class="hljs-built_in">max</span>(ret,add);                <br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(cnt==n*n)<br>            ret=cnt;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><h3 id="图论11：单词接龙">图论11：单词接龙</h3><p><a href="https://leetcode.cn/problems/word-ladder/description/">leetcode127</a></p><p>利用BFS搜索可能的单词转换路径</p><p>挑战：用C语言解决</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//手撸STL queue队列（链表实现）</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> qtype;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">rear</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">front</span>;</span><br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span></span><br><span class="hljs-class">&#123;</span><br>qtype data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">next</span>;</span><br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">QMake</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q)</span><br>&#123;<br>q-&gt;front = (<span class="hljs-keyword">struct</span> qnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> qnode));<br>q-&gt;rear = q-&gt;front;<br>q-&gt;front-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">QPush</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q, qtype data)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">p</span> =</span> (<span class="hljs-keyword">struct</span> qnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> qnode));<br>p-&gt;data = data;<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>q-&gt;rear-&gt;next = p;<br>q-&gt;rear = p;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>qtype <span class="hljs-title function_">QRead</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q)</span><br>&#123;<br><span class="hljs-keyword">if</span> (q-&gt;front-&gt;next == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> q-&gt;front-&gt;next-&gt;data;<br>&#125;<br>qtype <span class="hljs-title function_">QPop</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q)</span><br>&#123;<br><span class="hljs-keyword">if</span> (q-&gt;front-&gt;next == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">rubbish</span> =</span> q-&gt;front-&gt;next;<br>    <span class="hljs-keyword">if</span> (q-&gt;rear == rubbish)<br>&#123;<br>q-&gt;rear = q-&gt;front;<br>&#125;<br>qtype ret = rubbish-&gt;data;<br>q-&gt;front-&gt;next = rubbish-&gt;next;<br><span class="hljs-built_in">free</span>(rubbish);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">QLength</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q)</span><br>&#123;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qnode</span>* <span class="hljs-title">p</span>;</span><br>p = q-&gt;front-&gt;next;<br><span class="hljs-keyword">while</span> (p!=<span class="hljs-literal">NULL</span>)<br>&#123;<br>ret++;<br>p = p-&gt;next;<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">QEmpty</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> <span class="hljs-built_in">queue</span>* q)</span><br>&#123;<br><span class="hljs-keyword">return</span> QLength(q) == <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//正片开始</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ladderLength</span><span class="hljs-params">(<span class="hljs-type">char</span>* beginWord, <span class="hljs-type">char</span>* endWord, <span class="hljs-type">char</span>** wordList, <span class="hljs-type">int</span> wordListSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> be = <span class="hljs-number">-1</span>, p = <span class="hljs-number">0</span>;<span class="hljs-comment">//be为beginword在邻接矩阵中的位置</span><br>    <span class="hljs-type">int</span> whether_beginword_in_graph = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> wordlen = <span class="hljs-built_in">strlen</span>(beginWord);<span class="hljs-comment">//单词长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; wordListSize; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(wordList[i], endWord) == <span class="hljs-number">0</span>)<br>            p = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(wordList[i], beginWord) == <span class="hljs-number">0</span>)<br>            be = i;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//endword不在字典中</span><br>    <span class="hljs-type">int</span>** graph;<span class="hljs-comment">//创建邻接表</span><br>    <span class="hljs-type">int</span>* if_searched;<span class="hljs-comment">//判断元素是否被搜索过</span><br>    <span class="hljs-type">int</span>* search;<span class="hljs-comment">//记录搜索轮数</span><br>    <span class="hljs-keyword">if</span> (be == <span class="hljs-number">-1</span>)<span class="hljs-comment">//beginword是否在邻接表中</span><br>    &#123;<br>        if_searched = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (wordListSize + <span class="hljs-number">1</span>));<br>        search = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (wordListSize + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(if_searched, <span class="hljs-number">0</span>, (wordListSize + <span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-built_in">memset</span>(search, <span class="hljs-number">0</span>, (wordListSize + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        be = wordListSize;<br>        whether_beginword_in_graph = <span class="hljs-number">0</span>;<br>        graph = <span class="hljs-built_in">malloc</span>((wordListSize + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; wordListSize + <span class="hljs-number">1</span>; i++)<br>            graph[i] = <span class="hljs-built_in">malloc</span>((wordListSize + <span class="hljs-number">1</span>) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-type">char</span>* wordi, * wordj;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; wordListSize + <span class="hljs-number">1</span>; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordListSize + <span class="hljs-number">1</span>; j++)<br>            &#123;<br>                wordi = (i == wordListSize ? beginWord : wordList[i]);<br>                wordj = (j == wordListSize ? beginWord : wordList[j]);<br>                <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; wordlen; k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (wordi[k] != wordj[k])<br>                        cnt++;<br>                &#125;<br>                graph[i][j] = cnt == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">//cnt=1时为近义词</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> curword;<span class="hljs-comment">//当前正在处理的单词标号</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span> <span class="hljs-title">myque</span>;</span><br>        QMake(&amp;myque);<br>        QPush(&amp;myque, be);<br>        if_searched[be] = <span class="hljs-number">1</span>;<br>        search[be] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (QEmpty(&amp;myque))<br>                <span class="hljs-keyword">break</span>;<br>            curword = QPop(&amp;myque);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordListSize + <span class="hljs-number">1</span>; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (graph[curword][j] == <span class="hljs-number">1</span> &amp;&amp; if_searched[j] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    search[j] = search[curword] + <span class="hljs-number">1</span>;<br>                    if_searched[j] = <span class="hljs-number">1</span>;<br>                    QPush(&amp;myque, j);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(wordList[j], endWord) == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">return</span> search[j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        if_searched = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (wordListSize));<br>        search = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>) * (wordListSize + <span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(if_searched, <span class="hljs-number">0</span>, wordListSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-built_in">memset</span>(search, <span class="hljs-number">0</span>, wordListSize*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        graph = <span class="hljs-built_in">malloc</span>((wordListSize) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; wordListSize; i++)<br>            graph[i] = <span class="hljs-built_in">malloc</span>((wordListSize) * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>        <span class="hljs-type">char</span>* wordi, * wordj;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; wordListSize; i++)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordListSize; j++)<br>            &#123;<br>                wordi = wordList[i];<br>                wordj = wordList[j];<br>                <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; wordlen; k++)<br>                &#123;<br>                    <span class="hljs-keyword">if</span> (wordi[k] != wordj[k])<br>                        cnt++;<br>                &#125;<br>                graph[i][j] = cnt == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<span class="hljs-comment">//cnt=1时为近义词</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> curword;<span class="hljs-comment">//当前正在处理的单词标号</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">queue</span> <span class="hljs-title">myque</span>;</span><br>        QMake(&amp;myque);<br>        QPush(&amp;myque, be);<br>        if_searched[be] = <span class="hljs-number">1</span>;<br>        search[be] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (QEmpty(&amp;myque))<br>                <span class="hljs-keyword">break</span>;<br>            curword = QPop(&amp;myque);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; wordListSize; j++)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (graph[curword][j] == <span class="hljs-number">1</span> &amp;&amp; if_searched[j] == <span class="hljs-number">0</span>)<br>                &#123;<br>                    search[j] = search[curword] + <span class="hljs-number">1</span>;<br>                    if_searched[j] = <span class="hljs-number">1</span>;<br>                    QPush(&amp;myque, j);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(wordList[j], endWord) == <span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">return</span> search[j];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图论12：钥匙和房间">图论12：钥匙和房间</h3><p><a href="https://leetcode.cn/problems/keys-and-rooms/description/">leetcode841</a></p><p>BFS</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canVisitAllRooms</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; rooms)</span> </span>&#123;<br>        queue&lt;<span class="hljs-type">int</span>&gt;q;<br>        q.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> n=rooms.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">v</span>(n);<br>        v[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> cur=q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            ++cnt;<br>            vector&lt;<span class="hljs-type">int</span>&gt;&amp;r=rooms[cur];<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; i:r)<br>                <span class="hljs-keyword">if</span>(v[i]==<span class="hljs-number">0</span>)<br>                &#123;<br>                    q.<span class="hljs-built_in">push</span>(i);<br>                    v[i]=<span class="hljs-number">1</span>;<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt==n;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="图论16：冗余连接">图论16：冗余连接</h3><p><a href="https://leetcode.cn/problems/redundant-connection/description/">leetcode684</a></p><p>使用并查集，从前到后遍历所有边，连接当前边的两个结点，直到当前两个结点的父结点相同</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> n;<br>    vector&lt;<span class="hljs-type">int</span>&gt;v;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find_parent</span><span class="hljs-params">(<span class="hljs-type">int</span> cur)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">while</span>(v[cur]!=cur)<br>            cur=v[cur];<br>        <span class="hljs-keyword">return</span> cur;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">join</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> pa=<span class="hljs-built_in">find_parent</span>(a);<br>        <span class="hljs-type">int</span> pb=<span class="hljs-built_in">find_parent</span>(b);<br>        v[pb]=pa;<br>    &#125;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findRedundantConnection</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n=edges.<span class="hljs-built_in">size</span>();<br>        v.<span class="hljs-built_in">resize</span>(n+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)<br>            v[i]=i;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; ed:edges)<br>        &#123;<br>            <span class="hljs-type">int</span> p1=<span class="hljs-built_in">find_parent</span>(ed[<span class="hljs-number">0</span>]);<br>            <span class="hljs-type">int</span> p2=<span class="hljs-built_in">find_parent</span>(ed[<span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span>(p1==p2)<br>                <span class="hljs-keyword">return</span> ed;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">join</span>(p1,p2);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="12-动态规划专题">(12)动态规划专题</h2><h3 id="代码随想录的刷题顺序">==代码随想录的刷题顺序:==</h3><h3 id="动态规划3-爬楼梯">动态规划3:爬楼梯</h3><p>[点击跳转](#70. 爬楼梯)</p><h3 id="动态规划4-使用最小花费爬楼梯">动态规划4:使用最小花费爬楼梯</h3><p>[点击跳转](#746. 使用最小花费爬楼梯)</p><h3 id="动态规划6-不同路径">动态规划6:不同路径</h3><p><a href="https://leetcode.cn/problems/unique-paths/">leetcode62</a></p><p>方法1:数学,利用组合数直接计算<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mrow><mi>m</mi><mo>+</mo><mi>n</mi><mo>−</mo><mn>2</mn></mrow><mrow><mi>m</mi><mo>−</mo><mn>1</mn></mrow></msubsup></mrow><annotation encoding="application/x-tex">C_{m+n-2}^{m-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1789em;vertical-align:-0.3246em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8542em;"><span style="top:-2.4337em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.1031em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3246em;"><span></span></span></span></span></span></span></span></span></span></p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> a=m+n<span class="hljs-number">-2</span>,b=m<span class="hljs-number">-1</span>&lt;n<span class="hljs-number">-1</span>?m<span class="hljs-number">-1</span>:n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    ll ret=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;b;++i)<br>    &#123;<br>        ret=ret*(a-i)/(i+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法2:动态规划</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x,y</span>):<br>            <span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dfs(x,y-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> y==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dfs(x-<span class="hljs-number">1</span>,y)<br>            <span class="hljs-keyword">return</span> dfs(x-<span class="hljs-number">1</span>,y)+dfs(x,y-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dfs(m,n)<br></code></pre></td></tr></table></figure><h3 id="动态规划7-不同路径II">动态规划7:不同路径II</h3><p><a href="https://leetcode.cn/problems/unique-paths-ii/description/">leetcode63</a></p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">uniquePathsWithObstacles</span><span class="hljs-params">(<span class="hljs-type">int</span>** obstacleGrid, <span class="hljs-type">int</span> obstacleGridSize, <span class="hljs-type">int</span>* obstacleGridColSize)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> row=obstacleGridSize;<br>    <span class="hljs-type">int</span> col=obstacleGridColSize[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span>** arr=(<span class="hljs-type">int</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*(row+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=row;++i)<br>    &#123;<br>        arr[i]=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*(col+<span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">memset</span>(arr[i],<span class="hljs-number">0</span>,(col+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    &#125;<br>    arr[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=row;++i)<br>    &#123;<br>        <span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)<br>            j=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(;j&lt;=col;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(obstacleGrid[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]==<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">continue</span>;<br>            arr[i][j]=arr[i<span class="hljs-number">-1</span>][j]+arr[i][j<span class="hljs-number">-1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> ret=arr[row][col];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=row;++i)<br>        <span class="hljs-built_in">free</span>(arr[i]);<br>    <span class="hljs-built_in">free</span>(arr);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePathsWithObstacles</span>(<span class="hljs-params">self, obstacleGrid: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x,y</span>):<br>            <span class="hljs-keyword">if</span> obstacleGrid[x-<span class="hljs-number">1</span>][y-<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> x==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dfs(x,y-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> y==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dfs(x-<span class="hljs-number">1</span>,y)<br>            <span class="hljs-keyword">return</span> dfs(x-<span class="hljs-number">1</span>,y)+dfs(x,y-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(obstacleGrid),<span class="hljs-built_in">len</span>(obstacleGrid[<span class="hljs-number">0</span>]))<br></code></pre></td></tr></table></figure><h3 id="动态规划8-整数拆分">动态规划8:整数拆分</h3><p><a href="#343.%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86">点击跳转</a></p><h3 id="动态规划9-不同的二叉搜索树">动态规划9:不同的二叉搜索树</h3><p><a href="#96.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91">点击跳转</a></p><h3 id="0-1背包系列-13-17">==0-1背包系列 13~17==</h3><h3 id="动态规划13-分割等和子集">动态规划13:分割等和子集</h3><p>[点击跳转](#416. 分割等和子集)</p><h3 id="动态规划14：最后一块石头的重量II">动态规划14：最后一块石头的重量II</h3><p><a href="#1049.%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII">点击跳转</a></p><h3 id="动态规划16：目标和">动态规划16：目标和</h3><p>[点击跳转](#494. 目标和(0-1背包))</p><h3 id="动态规划17：一和零">动态规划17：一和零</h3><p>[点击跳转](#474. 一和零)</p><h3 id="完全背包系列-19-26">==完全背包系列 19~26==</h3><h3 id="动态规划19：零钱兑换II">动态规划19：零钱兑换II</h3><p>[点击跳转](#322. 零钱兑换)</p><h3 id="动态规划21：组合总和IV">动态规划21：组合总和IV</h3><p><a href="#377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV">点击跳转</a></p><h3 id="动态规划23：零钱兑换">动态规划23：零钱兑换</h3><p>[点击跳转](#322. 零钱兑换)</p><h3 id="动态规划24：完全平方数">动态规划24：完全平方数</h3><p>[点击跳转](#279. 完全平方数)</p><h3 id="动态规划26：单词拆分">动态规划26：单词拆分</h3><p><a href="https://leetcode.cn/problems/word-break/description/">leetcode139</a></p><p>方法1：BFS(广度优先搜索)+记忆化搜索</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;hash;<br>        queue&lt;<span class="hljs-type">int</span>&gt; que;<br>        <span class="hljs-type">int</span> wlen=wordDict.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> slen=s.<span class="hljs-built_in">size</span>();<br>        que.<span class="hljs-built_in">push</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">while</span>(!que.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>            <span class="hljs-type">int</span> cur=que.<span class="hljs-built_in">front</span>();<br>            <span class="hljs-keyword">if</span>(cur==slen)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            que.<span class="hljs-built_in">pop</span>();<br>            vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">wor</span>(wlen,<span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> findnum=wlen;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;cur+i&lt;=slen&amp;&amp;findnum&gt;<span class="hljs-number">0</span>;++i)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;wlen;++j)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(wor[j]==<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">if</span>(i&gt;=wordDict[j].<span class="hljs-built_in">size</span>())<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(hash[cur+wordDict[j].<span class="hljs-built_in">size</span>()]==<span class="hljs-number">0</span>)<br>                            que.<span class="hljs-built_in">push</span>(cur+wordDict[j].<span class="hljs-built_in">size</span>());<br>                        hash[cur+wordDict[j].<span class="hljs-built_in">size</span>()]=<span class="hljs-number">1</span>;<br>                        --findnum;<br>                        wor[j]=<span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(s[cur+i]!=wordDict[j][i])<br>                    &#123;<br>                        --findnum;<br>                        wor[j]=<span class="hljs-number">0</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2：完全背包</p><p>(出自代码随想录)</p><blockquote><p>单词就是物品，字符串s就是背包，单词能否组成字符串s，就是问物品能不能把背包装满。</p><p>拆分时可以重复使用字典中的单词，说明就是一个完全背包！</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wordBreak</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, wordDict: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            flag=<span class="hljs-number">1</span><br>            le=<span class="hljs-built_in">len</span>(wordDict[i])<br>            <span class="hljs-keyword">if</span> c&lt;le-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">for</span> idx,ch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(wordDict[i]):<br>                <span class="hljs-keyword">if</span> s[c-le+<span class="hljs-number">1</span>+idx]!=ch:<br>                    flag=<span class="hljs-number">0</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,c)+dp(<span class="hljs-built_in">len</span>(wordDict)-<span class="hljs-number">1</span>,c-le)<br>            <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,c)<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(wordDict)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)!=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="打家劫舍问题29-31">==打家劫舍问题29-31==</h3><h3 id="动态规划29：打家劫舍">动态规划29：打家劫舍</h3><p><a href="#198%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D">点击跳转</a></p><h3 id="动态规划30：打家劫舍II">动态规划30：打家劫舍II</h3><p>[点击跳转](#213.打家劫舍 II)</p><h3 id="动态规划31：打家劫舍III">动态规划31：打家劫舍III</h3><p><a href="https://leetcode.cn/problems/house-robber-iii/">leetcode337</a></p><p>每个节点都有偷和不偷两种选择，用pair对组存储两种情况下的最大收益</p><p>如果偷了当前节点，则左右节点都不能偷，只有一种情况</p><p>如果不偷当前节点，有四种情况：偷左右节点、偷左不偷右、偷右不偷左、左右都不偷</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(TreeNode* root)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//pair中存储的分别是偷和不偷的最大收益</span><br>        function&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;(TreeNode*)&gt;dfs=[&amp;](TreeNode* cur)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">nullptr</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">auto</span> pl=<span class="hljs-built_in">dfs</span>(cur-&gt;left);<br>            <span class="hljs-keyword">auto</span> pr=<span class="hljs-built_in">dfs</span>(cur-&gt;right);<br>            <span class="hljs-type">int</span> steal=cur-&gt;val+pl.second+pr.second;<br>            <span class="hljs-type">int</span> noSteal=<span class="hljs-built_in">max</span>(pl.first+pr.second,<span class="hljs-built_in">max</span>(pl.second+pr.first,<span class="hljs-built_in">max</span>(pl.first+pr.first,pl.second+pr.second)));<br>            ret=<span class="hljs-built_in">max</span>(ret,<span class="hljs-built_in">max</span>(steal,noSteal));<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(steal,noSteal);<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(root);<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="股票问题32-38">==股票问题32-38==</h3><h3 id="动态规划32-买卖股票的最佳时机">动态规划32.买卖股票的最佳时机</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">leetcode121</a></p><p>方法1：贪心</p><p>用双指针实现，左指针取最小值，右指针取最大值，差值就是最大利润</p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> fmax(x,y) ((x)&gt;(y)?(x):(y))</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span>* prices, <span class="hljs-type">int</span> pricesSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> min=<span class="hljs-number">0</span>,max=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;pricesSize;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(prices[i]&lt;prices[min])<br>        &#123;<br>            ret=fmax(ret,prices[max]-prices[min]);<br>            min=i;<br>            max=i;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(prices[i]&gt;prices[max])<br>        &#123;<br>            max=i;<br>            ret=fmax(ret,prices[max]-prices[min]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法2：动态规划</p><p>维护两个变量，分别是have今天结束后 持有股票的最大利润，notHave今天结束后 不持有股票的最大利润</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        have=-prices[<span class="hljs-number">0</span>]  <span class="hljs-comment">## 当前持有股票的最大利润</span><br>        notHave=<span class="hljs-number">0</span>  <span class="hljs-comment">## 当前不持有股票的最大利润</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(prices)):<br>            tp1=<span class="hljs-built_in">max</span>(have,-prices[i])<br>            tp2=<span class="hljs-built_in">max</span>(notHave,have+prices[i])<br>            have=tp1<br>            notHave=tp2<br>        <span class="hljs-keyword">return</span> notHave<br></code></pre></td></tr></table></figure><h3 id="动态规划34-买卖股票的最佳时机II">动态规划34.买卖股票的最佳时机II</h3><p>详见[贪心章节](#贪心6:买卖股票的最佳时机 II)</p><p><strong>总结一下32题和34题的动态规划区别</strong></p><p>32题的特点是<strong>只能买一次</strong>：</p><ul><li>今天持有股票的最大利润=max{昨天持有股票的最大利润(继承了昨天的情况)，今天买股票后的利润(-今天的股价)}</li><li>今天不持有股票的最大利润=max{昨天不持有股票的最大利润(继承了昨天的情况)，今天卖股票后的利润(卖掉昨天持有的)}</li></ul><p>34题的特点是<strong>无限次购买</strong>:</p><ul><li><p>今天持有股票的最大利润=max{昨天持有股票的最大利润(继承了昨天的情况)，==在昨天不持有股票的基础上==今天买股票后的利润(==昨天不持有股票的利润==-今天的股价)}</p></li><li><p>今天不持有股票的最大利润=max{昨天不持有股票的最大利润(继承了昨天的情况)，今天卖股票后的利润(卖掉昨天持有的)}</p></li></ul><p>除了标黄的部分，两题的递推公式都是一样的</p><p>对比代码：</p><p>32题：</p><p>tp1=max(have,-prices[i])</p><p>tp2=max(notHave,have+prices[i])</p><p>34题：</p><p>tp1=max(have,==notHave==-prices[i])</p><p>tp2=max(notHave,have+prices[i])</p><h3 id="动态规划35-买卖股票的最佳时机III">动态规划35.买卖股票的最佳时机III</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/">leetcode123</a></p><p>本题是下一题的削减版，对应下一题的k=2情况</p><p>动态规划：</p><p>注意，如果你用的是C++，<code>-inf</code>不能简单地用<code>INT_MIN</code>代替，因为动态规划过程中可能会涉及到对<code>INT_MAX</code>减去一个正数的操作</p><table><thead><tr><th></th><th></th><th>3</th><th>3</th><th>5</th><th>0</th><th>0</th><th>3</th><th>1</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>第一次持有</td><td>-3</td><td>-3</td><td>-3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>第一次卖出</td><td>-inf</td><td>0</td><td>2</td><td>2</td><td>2</td><td>3</td><td>3</td><td>4</td></tr><tr><td>2</td><td>第二次持有</td><td>-inf</td><td>-inf</td><td>-5</td><td>2</td><td>2</td><td>2</td><td>2</td><td>2</td></tr><tr><td>3</td><td>第二次卖出</td><td>-inf</td><td>-inf</td><td>-inf</td><td>-5</td><td>2</td><td>5</td><td>5</td><td>6</td></tr></tbody></table><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">dp[i][<span class="hljs-number">0</span>]=max&#123;dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],-prices[i]&#125;<br>dp[i][<span class="hljs-number">1</span>]=max&#123;dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]+prices[i]&#125;<br>dp[i][<span class="hljs-number">2</span>]=max&#123;dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]-prices[i]&#125;<br>dp[i][<span class="hljs-number">3</span>]=max&#123;dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">3</span>],dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">2</span>]+prices[i]&#125;<br>......<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        k=<span class="hljs-number">2</span>  <span class="hljs-comment">## 最多完成k笔交易</span><br>        n=<span class="hljs-built_in">len</span>(prices)<br>        <span class="hljs-comment">## 构造数组</span><br>        dp=[[<span class="hljs-number">0</span>]]*n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            dp[i]=[<span class="hljs-number">0</span>]*(<span class="hljs-number">2</span>*k)<br>        <span class="hljs-comment">## 数组初始化第一行</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=-prices[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*k):<br>            dp[<span class="hljs-number">0</span>][i]=-inf<br>        <span class="hljs-comment">## 开始递推</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],-prices[i]) <span class="hljs-comment">#第1列的递推</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*k):<br>                <span class="hljs-keyword">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:  <span class="hljs-comment">## 偶数列，表示第j//2次持有</span><br>                    dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]-prices[i])<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment">## 奇数列，表示第j//2+1次卖出</span><br>                    dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+prices[i])<br>        ret=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>*k):<br>            ret=<span class="hljs-built_in">max</span>(ret,dp[n-<span class="hljs-number">1</span>][i])<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>C++:  实现上有些区别，比如将每次持有和卖出的两种情况压缩到对组内</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">using</span> ll=<span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(prices.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;pair&lt;ll,ll&gt;&gt;&gt; <span class="hljs-built_in">dfs</span>(prices.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;vec:dfs)<br>            vec.<span class="hljs-built_in">resize</span>(k+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pa:dfs[<span class="hljs-number">0</span>])<br>        &#123;<br>            pa.first=INT_MIN;<br>            pa.second=INT_MIN;<br>        &#125;<br>        dfs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].first=<span class="hljs-number">0</span>;<br>        dfs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].second=-prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;prices.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=k;++j)<br>            &#123;<br>                dfs[i][j].first=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>][j].first,dfs[i<span class="hljs-number">-1</span>][j].second+prices[i]);<br>                <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                    dfs[i][j].second=dfs[i<span class="hljs-number">-1</span>][j].second;<br>                <span class="hljs-keyword">else</span><br>                    dfs[i][j].second=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>][j].second,dfs[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>].first-prices[i]);<br>            &#125;<br>        &#125;<br>        ll ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=k;++i)<br>        &#123;<br>            ret=<span class="hljs-built_in">max</span>(ret,dfs[prices.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>][i].first);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态规划36：买卖股票的最佳时机IV">动态规划36：买卖股票的最佳时机IV</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/">leetcode188</a></p><p>解析见上一题</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, k: <span class="hljs-built_in">int</span>, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(prices)<br>        <span class="hljs-comment">## 构造数组</span><br>        dp=[[<span class="hljs-number">0</span>]]*n<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            dp[i]=[<span class="hljs-number">0</span>]*(<span class="hljs-number">2</span>*k)<br>        <span class="hljs-comment">## 数组初始化第一行</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=-prices[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*k):<br>            dp[<span class="hljs-number">0</span>][i]=-inf<br>        <span class="hljs-comment">## 开始递推</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],-prices[i]) <span class="hljs-comment">#第1列的递推</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>*k):<br>                <span class="hljs-keyword">if</span> j%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:  <span class="hljs-comment">## 偶数列，表示第j//2次持有</span><br>                    dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]-prices[i])<br>                <span class="hljs-keyword">else</span>:  <span class="hljs-comment">## 奇数列，表示第j//2+1次卖出</span><br>                    dp[i][j]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][j],dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+prices[i])<br>        ret=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>*k):<br>            ret=<span class="hljs-built_in">max</span>(ret,dp[n-<span class="hljs-number">1</span>][i])<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll=<span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> k, vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(prices.<span class="hljs-built_in">size</span>()==<span class="hljs-number">0</span>||k==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;pair&lt;ll,ll&gt;&gt;&gt; <span class="hljs-built_in">dfs</span>(prices.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp;vec:dfs)<br>            vec.<span class="hljs-built_in">resize</span>(k+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; pa:dfs[<span class="hljs-number">0</span>])<br>        &#123;<br>            pa.first=INT_MIN;<br>            pa.second=INT_MIN;<br>        &#125;<br>        dfs[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>].first=<span class="hljs-number">0</span>;<br>        dfs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].second=-prices[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;prices.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=k;++j)<br>            &#123;<br>                dfs[i][j].first=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>][j].first,dfs[i<span class="hljs-number">-1</span>][j].second+prices[i]);<br>                <span class="hljs-keyword">if</span>(j==<span class="hljs-number">0</span>)<br>                    dfs[i][j].second=dfs[i<span class="hljs-number">-1</span>][j].second;<br>                <span class="hljs-keyword">else</span><br>                    dfs[i][j].second=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>][j].second,dfs[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>].first-prices[i]);<br>            &#125;<br>        &#125;<br>        ll ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=k;++i)<br>        &#123;<br>            ret=<span class="hljs-built_in">max</span>(ret,dfs[prices.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>][i].first);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态规划37：买卖股票的最佳时机含冷冻期">动态规划37：买卖股票的最佳时机含冷冻期</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">leetcode309</a></p><p>方法1：划分出三种状态</p><table><thead><tr><th></th><th></th><th>1</th><th>2</th><th>3</th><th>0</th><th>2</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>持有股票</td><td>-1</td><td>-1</td><td>-1</td><td>1</td><td>1</td></tr><tr><td><strong>1</strong></td><td>保持卖出股票</td><td>0</td><td>0</td><td>1</td><td>2</td><td>2</td></tr><tr><td><strong>2</strong></td><td>卖出股票</td><td>-inf</td><td>1</td><td>2</td><td>-1</td><td>3</td></tr></tbody></table><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>-prices<span class="hljs-comment">[i]</span>&#125;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[2]</span>&#125;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[2]</span>=dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>+prices<span class="hljs-comment">[i]</span><br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(prices)<br>        <span class="hljs-comment">## 构造dp数组</span><br>        dp=[[<span class="hljs-number">0</span>]*<span class="hljs-number">3</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        <span class="hljs-comment">## 初始化第一行</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=-prices[<span class="hljs-number">0</span>]<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]=<span class="hljs-number">0</span><br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]=-inf<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]-prices[i])<br>            dp[i][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>            dp[i][<span class="hljs-number">2</span>]=dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]+prices[i]<br>        ret=<span class="hljs-built_in">max</span>(dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> ret&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> ret<br></code></pre></td></tr></table></figure><p>方法2：两种状态(带<u>下划线</u>的初始化要特殊考虑)</p><table><thead><tr><th></th><th></th><th>1</th><th>2</th><th>3</th><th>0</th><th>2</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>不持有股票</td><td><u>0</u></td><td>1</td><td>2</td><td>2</td><td>3</td></tr><tr><td><strong>1</strong></td><td>持有股票</td><td><u>-1</u></td><td><u>-1</u></td><td>-1</td><td>1</td><td>1</td></tr></tbody></table><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>+prices<span class="hljs-comment">[i]</span>&#125;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>,dp<span class="hljs-comment">[i-2]</span><span class="hljs-comment">[0]</span>-prices<span class="hljs-comment">[i]</span>&#125;<br></code></pre></td></tr></table></figure><p>python:记忆化递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,hold</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> -inf <span class="hljs-keyword">if</span> hold <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> hold:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">True</span>),dfs(i-<span class="hljs-number">2</span>,<span class="hljs-literal">False</span>)-prices[i])<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>),dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">True</span>)+prices[i])<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(prices)-<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span>(len&lt;=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">dfs</span>(len);<br>       dfs[<span class="hljs-number">0</span>].first=<span class="hljs-number">0</span>;<br>       dfs[<span class="hljs-number">0</span>].second=-prices[<span class="hljs-number">0</span>];<br>       dfs[<span class="hljs-number">1</span>].second=<span class="hljs-built_in">max</span>(-prices[<span class="hljs-number">1</span>],dfs[<span class="hljs-number">0</span>].second);<br>       dfs[<span class="hljs-number">1</span>].first=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,dfs[<span class="hljs-number">0</span>].second+prices[<span class="hljs-number">1</span>]);<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;len;++i)<br>       &#123;<br>           dfs[i].first=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].first,dfs[i<span class="hljs-number">-1</span>].second+prices[i]);<br>           dfs[i].second=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].second,dfs[i<span class="hljs-number">-2</span>].first-prices[i]);<br>        &#125;<br>       <span class="hljs-keyword">return</span> dfs[len<span class="hljs-number">-1</span>].first;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态规划38：买卖股票的最佳时机含手续费">动态规划38：买卖股票的最佳时机含手续费</h3><p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">leetcode714</a></p><p>fee=2</p><table><thead><tr><th></th><th></th><th>1</th><th>3</th><th>2</th><th>8</th><th>4</th><th>9</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>不持有股票</td><td>0</td><td>0</td><td>0</td><td>5</td><td>5</td><td>8</td></tr><tr><td><strong>1</strong></td><td>持有股票</td><td>-3</td><td>-3</td><td>-3</td><td>-3</td><td>-1</td><td>-1</td></tr></tbody></table><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[0]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>+prices<span class="hljs-comment">[i]</span>&#125;<br>dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=max&#123;dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[0]</span>-prices<span class="hljs-comment">[i]</span>-fee&#125;<br></code></pre></td></tr></table></figure><p>python:递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxProfit</span>(<span class="hljs-params">self, prices: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], fee: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,hold</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> -inf <span class="hljs-keyword">if</span> hold <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> hold:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">True</span>),dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>)-prices[i]-fee)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>),dfs(i-<span class="hljs-number">1</span>,<span class="hljs-literal">True</span>)+prices[i])<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(prices)-<span class="hljs-number">1</span>,<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>C++:递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices, <span class="hljs-type">int</span> fee)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=prices.<span class="hljs-built_in">size</span>();<br>        vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dfs</span>(len);<br>        dfs[<span class="hljs-number">0</span>].first=<span class="hljs-number">0</span>;<br>        dfs[<span class="hljs-number">0</span>].second=-prices[<span class="hljs-number">0</span>]-fee;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;++i)<br>        &#123;<br>            dfs[i].first=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].first,dfs[i<span class="hljs-number">-1</span>].second+prices[i]);<br>            dfs[i].second=<span class="hljs-built_in">max</span>(dfs[i<span class="hljs-number">-1</span>].second,dfs[i<span class="hljs-number">-1</span>].first-fee-prices[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> dfs[len<span class="hljs-number">-1</span>].first;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="子序列问题">==子序列问题==</h3><h3 id="动态规划41：最长递增子序列">动态规划41：最长递增子序列</h3><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/description/">leetcode300</a></p><p>n为nums数组长度</p><p>方法1：动态规划</p><p>dp[i]表示以i为结尾的最长子序列</p><p>时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dp</span><span class="hljs-params">(len,<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> tmp=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(nums[j]&lt;nums[i])<br>                    tmp=<span class="hljs-built_in">max</span>(tmp,dp[j]);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(tmp&gt;<span class="hljs-number">0</span>)<br>                dp[i]=tmp+<span class="hljs-number">1</span>;<br>            ret=<span class="hljs-built_in">max</span>(ret,dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2：贪心+二分查找</p><p>g[i]为长度为i+1的子序列末尾元素的最小值</p><p>贪心+二分查找，时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n\log(n))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span></p><p>g数组性质：1、严格递增 2、只更新一个位置，更新的位置是第一个&gt;=nums[i]的数的下标</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=nums.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;greed=&#123;nums[<span class="hljs-number">0</span>]&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">auto</span> it=<span class="hljs-built_in">lower_bound</span>(greed.<span class="hljs-built_in">begin</span>(),greed.<span class="hljs-built_in">end</span>(),nums[i]);<br>            <span class="hljs-keyword">if</span>(it==greed.<span class="hljs-built_in">end</span>())<br>                greed.<span class="hljs-built_in">emplace_back</span>(nums[i]);<br>            <span class="hljs-keyword">else</span><br>                *it=nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> greed.<span class="hljs-built_in">size</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态规划42：最长连续递增序列">动态规划42：最长连续递增序列</h3><p><a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/">leetcode674</a></p><p>简单题，大佬们可以跳过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findLengthOfLCIS</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(nums)<br>        ret=<span class="hljs-number">1</span><br>        tmp=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            <span class="hljs-keyword">if</span> nums[i]&gt;nums[i-<span class="hljs-number">1</span>]:<br>                tmp+=<span class="hljs-number">1</span><br>                ret=<span class="hljs-built_in">max</span>(ret,tmp)<br>            <span class="hljs-keyword">else</span>:<br>                tmp=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="动态规划43：最长公共子序列">动态规划43：最长公共子序列</h3><p><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">leetcode718</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findLength</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n1=<span class="hljs-built_in">len</span>(nums1)<br>        n2=<span class="hljs-built_in">len</span>(nums2)<br>        dp=[[<span class="hljs-number">0</span>]*(n2+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n1+<span class="hljs-number">1</span>)]<br>        ret=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n1+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n2+<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> nums1[i-<span class="hljs-number">1</span>]==nums2[j-<span class="hljs-number">1</span>]:<br>                    dp[i][j]=dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span><br>                    ret=<span class="hljs-built_in">max</span>(ret,dp[i][j])<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="动态规划44：最长公共子序列">动态规划44：最长公共子序列</h3><p><a href="#1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">点击跳转</a></p><h3 id="动态规划45：不相交的线">动态规划45：不相交的线</h3><p><a href="https://leetcode.cn/problems/uncrossed-lines/">leetcode1035</a></p><table><thead><tr><th></th><th>10</th><th>5</th><th>2</th><th>1</th><th>5</th><th>2</th></tr></thead><tbody><tr><td><strong>2</strong></td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td><strong>5</strong></td><td>0</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td></tr><tr><td><strong>1</strong></td><td>0</td><td>1</td><td>1</td><td>2</td><td>2</td><td>2</td></tr><tr><td><strong>2</strong></td><td>0</td><td>1</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td><strong>5</strong></td><td>0</td><td>1</td><td>2</td><td>2</td><td>3</td><td>3</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp[i][j]=\begin{cases}dp[i-1][j-1]+1 ,nums1[i]=nums2[j]\\max\{dp[i-1][j],dp[i][j-1]\},nums1[i]\ne nums2[j]\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">]}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxUncrossedLines</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> nums1[i]==nums2[j]:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(nums1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums2)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="动态规划46：最大子序和">动态规划46：最大子序和</h3><p><a href="https://leetcode.cn/problems/maximum-subarray/">leetcode53</a></p><p>代码随想录：</p><blockquote><p><strong>dp[i]：包括下标i（以nums[i]为结尾）的最大连续子序列和为dp[i]</strong>。</p><ol><li>确定递推公式</li></ol><p>dp[i]只有两个方向可以推出来：</p><ul><li>dp[i - 1] + nums[i]，即：nums[i]加入当前连续子序列和</li><li>nums[i]，即：从头开始计算当前连续子序列和</li></ul><p>一定是取最大的，所以dp[i] = max(dp[i - 1] + nums[i], nums[i]);</p></blockquote><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> ret=nums[<span class="hljs-number">0</span>],add=nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            add=<span class="hljs-built_in">max</span>(add+nums[i],nums[i]);<br>            ret=<span class="hljs-built_in">max</span>(ret,add);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        add=<span class="hljs-number">0</span><br>        ret=-<span class="hljs-number">100000</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            add=<span class="hljs-built_in">max</span>(add+num,num)<br>            ret=<span class="hljs-built_in">max</span>(ret,add)<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="动态规划47：判断子序列">动态规划47：判断子序列</h3><p><a href="https://leetcode.cn/problems/is-subsequence/">leetcode392</a></p><p>本题和45：不相交的线很像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isSubsequence</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> s[i]==t[j]:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(t)-<span class="hljs-number">1</span>)==<span class="hljs-built_in">len</span>(s)<br></code></pre></td></tr></table></figure><h3 id="动态规划48：不同的子序列">动态规划48：不同的子序列</h3><p><a href="https://leetcode.cn/problems/distinct-subsequences/">leetcode115</a></p><p><code>dp(i,j)</code>表示 字符串<u>t的前i+1个字母</u>（t[0:i+1]） 在 字符串<u>s的前j+1个字母</u>（s[0:j+1]）的子序列中 出现的次数</p><table><thead><tr><th>dp(i,j)</th><th>s[j]</th><th>b</th><th>a</th><th>b</th><th>g</th><th>b</th><th>a</th><th>g</th></tr></thead><tbody><tr><td><strong>t[i]</strong></td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td><strong>b</strong></td><td>0</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>3</td><td>3</td></tr><tr><td><strong>a</strong></td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>4</td><td>4</td></tr><tr><td><strong>g</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>5</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>s</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp(i,j)=\begin{cases}dp(i,j-1)+dp(i-1,j-1),t[i]=s[j]\\dp(i,j-1),t[i]\ne s[j]\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>解析：</p><p>当<code>t[i]!=s[j]</code>时，当前的两个字符不匹配，<code>dp(i,j)=dp(i,j-1)</code>，<code>t[0:i+1]和s[0:j+1]</code>的匹配问题可以转化为<code>t[0:i+1]</code>和<code>s[0:j]</code>的匹配问题。</p><p>举个例子，s=“bab”和t=“ba”不同子序列数，等价于s=“ba”和t=“ba”的不同子序列数，因为前者两个串末尾不同，可以看作s1新增的末尾字母b对不同子序列数不构成影响</p><p>当<code>t[i]==s[j]</code>时，当前的两个字符匹配，<code>dp(i,j)=dp(i,j-1)+dp(i-1,j-1)</code>。</p><p>举个例子，s=“babgba”和t=“ba”的不同子序列数，等于s=“babgb”和g=“ba”的子序列数，加上s=“babgb”，t=“b”的子序列数。</p><ul><li>s=“babgb”，t=“b”的子序列数，包括了在字母a加入字符串t和s之前，s和t的子序列匹配数。加入a实际上是在之前已经匹配的子序列的基础上，延长了那些子序列。可以看出这里字母b匹配了三次，给两个串同时加上a，就变成了ba匹配了三次</li><li>s=“babgb”和g=“ba”的子序列数，是考虑在字母加入字符串s之前，s和t的子序列匹配数。可以看出s和t已经匹配了一对ba，再给s加入a对之前的匹配不构成影响。</li></ul><p>python:(记忆化递归)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numDistinct</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, t: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:  <span class="hljs-comment">## 记忆化递归dp</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> t[i]==s[j]:<br>                <span class="hljs-keyword">return</span> dp(i,j-<span class="hljs-number">1</span>)+dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> dp(i,j-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(t)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numDistinct</span><span class="hljs-params">(string s, string t)</span> <span class="hljs-comment">//递推版dp</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">using</span> ll=<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br>        <span class="hljs-type">int</span> slen=s.<span class="hljs-built_in">size</span>(),tlen=t.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//初始化二维数组</span><br>        vector&lt;vector&lt;ll&gt;&gt;<span class="hljs-built_in">dp</span>(tlen+<span class="hljs-number">1</span>);<br>        dp[<span class="hljs-number">0</span>].<span class="hljs-built_in">resize</span>(slen+<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=tlen;++i)<br>            dp[i].<span class="hljs-built_in">resize</span>(slen+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//递推</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=tlen;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=slen;++j)<br>                <span class="hljs-keyword">if</span>(t[i<span class="hljs-number">-1</span>]==s[j<span class="hljs-number">-1</span>])<br>                    dp[i][j]=dp[i][j<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>                <span class="hljs-keyword">else</span><br>                    dp[i][j]=dp[i][j<span class="hljs-number">-1</span>];<br>        <span class="hljs-keyword">return</span> dp[tlen][slen];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">s</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">string</span>&#125; <span class="hljs-variable">t</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> numDistinct = <span class="hljs-keyword">function</span>(<span class="hljs-params">s, t</span>) <span class="hljs-comment">//递推版dp</span><br>&#123;<br>    <span class="hljs-keyword">let</span> dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=t.<span class="hljs-property">length</span>;++i)<br>        dp[i]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>;i&lt;=s.<span class="hljs-property">length</span>;++i)<br>        dp[<span class="hljs-number">0</span>][i]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=t.<span class="hljs-property">length</span>;++i)<br>        dp[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=t.<span class="hljs-property">length</span>;++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>;j&lt;=s.<span class="hljs-property">length</span>;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(t[i-<span class="hljs-number">1</span>]==s[j-<span class="hljs-number">1</span>])<br>                dp[i][j]=dp[i][j-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">else</span><br>                dp[i][j]=dp[i][j-<span class="hljs-number">1</span>];<br>        &#125;<br>    <span class="hljs-keyword">return</span> dp[t.<span class="hljs-property">length</span>][s.<span class="hljs-property">length</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="动态规划49：两个字符串的删除操作">动态规划49：两个字符串的删除操作</h3><p><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">leetcode583</a></p><p>这题本质上和<a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9243%EF%BC%9A%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97">动态规划43：最长公共子序列</a>相同</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDistance</span>(<span class="hljs-params">self, word1: <span class="hljs-built_in">str</span>, word2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> word1[i]==word2[j]:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(word1)+<span class="hljs-built_in">len</span>(word2)-<span class="hljs-number">2</span>*dp(<span class="hljs-built_in">len</span>(word1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(word2)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> max(x,y) (x)&gt;(y)?(x):(y)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence</span><span class="hljs-params">(<span class="hljs-type">char</span> * text1, <span class="hljs-type">char</span> * text2)</span><br>&#123;<br>    <span class="hljs-type">char</span> s1[<span class="hljs-number">1005</span>]=<span class="hljs-string">&quot; &quot;</span>,s2[<span class="hljs-number">1005</span>]=<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">strcat</span>(s1,text1);<br>    <span class="hljs-built_in">strcat</span>(s2,text2);<br>    <span class="hljs-type">int</span> l1=<span class="hljs-built_in">strlen</span>(text1);<br>    <span class="hljs-type">int</span> l2=<span class="hljs-built_in">strlen</span>(text2);<br>    <span class="hljs-type">int</span>** mat=(<span class="hljs-type">int</span>**)<span class="hljs-built_in">malloc</span>((l1+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=l1;++i)<br>        mat[i]=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>((l2+<span class="hljs-number">1</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=l1;++i)<br>        mat[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=l2;++i)<br>        mat[<span class="hljs-number">0</span>][i]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=l1;++i)<br>    &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=l2;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(s1[i]==s2[j])<br>                mat[i][j]=mat[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                mat[i][j]=max(mat[i<span class="hljs-number">-1</span>][j],mat[i][j<span class="hljs-number">-1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> ret=mat[l1][l2];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=l1;++i)<br>        <span class="hljs-built_in">free</span>(mat[i]);<br>    <span class="hljs-built_in">free</span>(mat);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">minDistance</span><span class="hljs-params">(<span class="hljs-type">char</span> * word1, <span class="hljs-type">char</span> * word2)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">strlen</span>(word1)+<span class="hljs-built_in">strlen</span>(word2)<span class="hljs-number">-2</span>*longestCommonSubsequence(word1,word2);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态规划50：编辑距离">动态规划50：编辑距离</h3><p>[点击跳转](#72. 编辑距离)</p><h3 id="动态规划52：回文子串">动态规划52：回文子串</h3><p><a href="https://leetcode.cn/problems/palindromic-substrings/">leetcode647</a></p><p>中心扩散解法：时间复杂度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countSubstrings</span><span class="hljs-params">(string s)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> n=s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> ret=n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> left=i<span class="hljs-number">-1</span>,right=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(left&gt;=<span class="hljs-number">0</span>&amp;&amp;right&lt;n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[left]==s[right])<br>                    ++ret;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                --left;<br>                ++right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n<span class="hljs-number">-1</span>;++i)<br>        &#123;<br>            <span class="hljs-type">int</span> left=i,right=i+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(left&gt;=<span class="hljs-number">0</span>&amp;&amp;right&lt;n)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(s[left]==s[right])<br>                    ++ret;<br>                <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                --left;<br>                ++right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>动态规划解法也是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，就懒得写了</p><h3 id="动态规划53：最长回文子序列">动态规划53：最长回文子序列</h3><p><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/description/">leetcode516</a></p><p><code>dp(i,j)</code>表示在区间<code>[i,j]</code>内最长回文子序列的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestPalindromeSubseq</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i==j:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&gt;j:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> s[i]==s[j]:<br>                <span class="hljs-keyword">return</span> dp(i+<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+<span class="hljs-number">2</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i,j-<span class="hljs-number">1</span>),dp(i+<span class="hljs-number">1</span>,j))<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h3 id="动态规划54：切披萨的方案数">动态规划54：切披萨的方案数</h3><p><a href="https://leetcode.cn/problems/number-of-ways-of-cutting-a-pizza/description/">leetcode1444</a></p><p>考察二维差分和三维动态规划</p><p>此题定义了pi数组，<code>pi[i][j]</code>意义为pizza数组中左上角<code>(i,j)</code>到右下角<code>(row-1,col-1)</code>矩形区域内苹果总数</p><p><code>dp(i,j,c)</code>的意义为左上角<code>(i,j)</code>到右下角<code>(row-1,col-1)</code>矩形区域切<code>c</code>刀的方案总数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ways</span>(<span class="hljs-params">self, pizza: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        mod=<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span><br>        row=<span class="hljs-built_in">len</span>(pizza)<br>        col=<span class="hljs-built_in">len</span>(pizza[<span class="hljs-number">0</span>])<br>        pi=[[<span class="hljs-number">0</span>]*col <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row)]<br>        <span class="hljs-keyword">if</span> pizza[row-<span class="hljs-number">1</span>][col-<span class="hljs-number">1</span>]==<span class="hljs-string">&quot;A&quot;</span>:<br>            pi[row-<span class="hljs-number">1</span>][col-<span class="hljs-number">1</span>]=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            pi[i][col-<span class="hljs-number">1</span>]=pi[i+<span class="hljs-number">1</span>][col-<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> pizza[i][col-<span class="hljs-number">1</span>]==<span class="hljs-string">&quot;A&quot;</span>:<br>                pi[i][col-<span class="hljs-number">1</span>]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            pi[row-<span class="hljs-number">1</span>][i]=pi[row-<span class="hljs-number">1</span>][i+<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">if</span> pizza[row-<span class="hljs-number">1</span>][i]==<span class="hljs-string">&quot;A&quot;</span>:<br>                pi[row-<span class="hljs-number">1</span>][i]+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(col-<span class="hljs-number">2</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                pi[i][j]=pi[i+<span class="hljs-number">1</span>][j]+pi[i][j+<span class="hljs-number">1</span>]-pi[i+<span class="hljs-number">1</span>][j+<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">if</span> pizza[i][j]==<span class="hljs-string">&quot;A&quot;</span>:<br>                    pi[i][j]+=<span class="hljs-number">1</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> pi[i][j]&gt;<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            tmp=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,row):<br>                <span class="hljs-keyword">if</span> pi[i][j]-pi[i1][j]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> pi[i1][j]!=<span class="hljs-number">0</span>:<br>                    tmp+=dp(i1,j,c-<span class="hljs-number">1</span>)<br>                    tmp%=mod<br>            <span class="hljs-keyword">for</span> j1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j+<span class="hljs-number">1</span>,col):<br>                <span class="hljs-keyword">if</span> pi[i][j]-pi[i][j1]!=<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> pi[i][j1]!=<span class="hljs-number">0</span>:<br>                    tmp+=dp(i,j1,c-<span class="hljs-number">1</span>)<br>                    tmp%=mod<br>            <span class="hljs-keyword">return</span> tmp<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,k-<span class="hljs-number">1</span>)%mod<br></code></pre></td></tr></table></figure><hr><h3 id="灵神的刷题顺序">==灵神的刷题顺序:==</h3><h3 id="动态规划-从记忆化搜索到递推">动态规划:从记忆化搜索到递推</h3><p><a href="https://www.bilibili.com/video/BV1Xj411K7oF/?share_source=copy_web&amp;vd_source=0746909e8642dc821f4dc86699071129">动态规划入门：从记忆化搜索到递推【基础算法精讲 17】</a>(参考视频)</p><h4 id="198打家劫舍">198打家劫舍</h4><p><a href="https://leetcode.cn/problems/house-robber/"><code>leetcode</code>链接</a></p><p>维护一个数组<code>vec[i]</code>表示从前<code>i</code>个房子中能获得的最大金额和</p><p><code>vec[i]=max(vec[i-2]+nums[i],vec[i-1])</code></p><p>如果选择偷当前第<code>i</code>间的,最优收益是偷前<code>i-2</code>间的收益加上本间的收益</p><p>如果不偷当前第<code>i</code>间,最优收益是偷前<code>i-1</code>间的收益</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">vec</span>(nums.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-comment">//先处理边界情况,确保nums.size()&gt;2</span><br>        <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums.<span class="hljs-built_in">size</span>()==<span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>        vec[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>        vec[<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>        <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<span class="hljs-comment">//维护vec[]数组中的最大值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            vec[i]=<span class="hljs-built_in">max</span>(vec[i<span class="hljs-number">-1</span>],vec[i<span class="hljs-number">-2</span>]+nums[i]);<br>            ret=<span class="hljs-built_in">max</span>(ret,vec[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        li=[]<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> le==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">elif</span> le==<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>])<br>        li.append(nums[<span class="hljs-number">0</span>])<br>        li.append(<span class="hljs-built_in">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]))<br>        i=<span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span> i&lt;le:<br>            li.append(<span class="hljs-built_in">max</span>(li[i-<span class="hljs-number">1</span>],li[i-<span class="hljs-number">2</span>]+nums[i]))<br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> li[le-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>(灵神的递归做法)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-comment">## 递归做法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @(<span class="hljs-params">cache</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">idx</span>):<br>            <span class="hljs-keyword">if</span> idx&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            cur=<span class="hljs-built_in">max</span>(dfs(idx-<span class="hljs-number">1</span>),dfs(idx-<span class="hljs-number">2</span>)+nums[idx])<br>            <span class="hljs-keyword">return</span> cur<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> rob = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) <br>&#123;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-property">length</span>==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    dp[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">2</span>;i&lt;nums.<span class="hljs-property">length</span>;++i)<br>        dp[i]=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[i-<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">2</span>]+nums[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>],dp[nums.<span class="hljs-property">length</span>-<span class="hljs-number">2</span>]);<br>&#125;;<br></code></pre></td></tr></table></figure><p>课后作业：</p><h4 id="70-爬楼梯">70. 爬楼梯</h4><p><a href="https://leetcode.cn/problems/climbing-stairs/">leetcode链接</a></p><p>用<code>vec[i]</code>表示到达第<code>i</code>级楼梯至少需要几步</p><p>一次可以跨1或2阶,故<code>vec[i]=vec[i-1]+vec[i-2]</code></p><p>C:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> a[<span class="hljs-number">46</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">digui</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(a[n]!=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> a[n];<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        a[n]=<span class="hljs-built_in">digui</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">digui</span>(n<span class="hljs-number">-2</span>);<br>        <span class="hljs-keyword">return</span> a[n];<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    a[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>    a[<span class="hljs-number">2</span>]=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>) <br>    &#123;<br>        <span class="hljs-comment">//a[1]=1;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">2</span>) <br>    &#123;<br>        <span class="hljs-comment">//a[2]=2;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">digui</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:  <span class="hljs-comment">## 等价于斐波那契数列</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i==<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> i==<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>            <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>)+dfs(i-<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> dfs(n)<br></code></pre></td></tr></table></figure><h4 id="746-使用最小花费爬楼梯">746. 使用最小花费爬楼梯</h4><p><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">leetcode链接</a></p><p>用数组<code>li[k]</code>表示到达第k级的最小花费</p><p>因为出发没有花费,<code>li[0]=li[1]=0</code></p><p><code>li[k]=min(li[k-1]+cost[k-1],li[k-2]+cost[k-2])</code></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCostClimbingStairs</span>(<span class="hljs-params">self, cost: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        i=<span class="hljs-number">0</span><br>        le=<span class="hljs-built_in">len</span>(cost)<br>        li=[<span class="hljs-number">0</span>]*(le+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,le+<span class="hljs-number">1</span>):<br>            li[k]=<span class="hljs-built_in">min</span>(li[k-<span class="hljs-number">1</span>]+cost[k-<span class="hljs-number">1</span>],li[k-<span class="hljs-number">2</span>]+cost[k-<span class="hljs-number">2</span>])<br>        <span class="hljs-keyword">return</span> li[le]<br></code></pre></td></tr></table></figure><h4 id="2466-统计构造好字符串的方案数">2466.统计构造好字符串的方案数</h4><p><a href="https://leetcode.cn/problems/count-ways-to-build-good-strings/">leetcode链接</a></p><p><code>dfs[i]</code>表示长度为<code>i</code>的字符串的好字符串数目</p><p><code>dfs[0]=1</code>,<code>dfs[k]=0(k&lt;0)</code></p><p><code>dfs[i]=dfs[i-zero]+dfs[i-one]</code></p><p>为了C++防溢出(python防爆内存),需要在计算过程中对<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mo>=</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">m=10^9+7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">9</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7</span></span></span></span>取余</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll=<span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">countGoodStrings</span><span class="hljs-params">(<span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high, <span class="hljs-type">int</span> zero, <span class="hljs-type">int</span> one)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        ll m=<span class="hljs-number">1000000007</span>;<br>        vector&lt;ll&gt;<span class="hljs-built_in">dfs</span>(high+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=high;++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i-zero==<span class="hljs-number">0</span>)<br>                dfs[i]+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i-zero&gt;<span class="hljs-number">0</span>)<br>                dfs[i]+=dfs[i-zero];<br>            <span class="hljs-keyword">if</span>(i-one==<span class="hljs-number">0</span>)<br>                dfs[i]+=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i-one&gt;<span class="hljs-number">0</span>)<br>                dfs[i]+=dfs[i-one];<br>            dfs[i]%=m;              <br>        &#125;<br>        ll ret=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=low;i&lt;=high;++i)<br>        &#123;<br>            ret+=dfs[i];<br>            ret%=m;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">m=<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">countGoodStrings</span>(<span class="hljs-params">self, low: <span class="hljs-built_in">int</span>, high: <span class="hljs-built_in">int</span>, zero: <span class="hljs-built_in">int</span>, one: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">elif</span> i==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> dfs(i-zero)%m+dfs(i-one)%m<br>        ret=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(low,high+<span class="hljs-number">1</span>):<br>            ret+=dfs(k)<br>            ret=ret%m<br>        <span class="hljs-keyword">return</span> ret%(<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><h4 id="213-打家劫舍-II">213.打家劫舍 II</h4><p><a href="https://leetcode.cn/problems/house-robber-ii/">leetcode链接</a></p><p>本题和打家劫舍类似,可以套用上次的代码,因为首尾相接,从<code>[0,n]</code>间房获得的最大收益等价于</p><p><code>max&#123;从[0,n-1]间房获得的最大收益,从[1,n]间房获得的最大收益&#125;</code></p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">rob1</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span><br>&#123;<br>    <span class="hljs-type">int</span> first=<span class="hljs-number">0</span>,second=<span class="hljs-number">0</span>,max=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize;++i)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i&gt;=<span class="hljs-number">2</span>)<br>        &#123;<br>            <span class="hljs-type">int</span> this=first+nums[i]&gt;second?first+nums[i]:second;<br>            first=second;<br>            second=this;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)<br>                first=nums[<span class="hljs-number">0</span>];<br>            <span class="hljs-keyword">else</span><br>                second=nums[<span class="hljs-number">1</span>]&gt;nums[<span class="hljs-number">0</span>]?nums[<span class="hljs-number">1</span>]:nums[<span class="hljs-number">0</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> first&gt;second?first:second;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">rob</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(numsSize==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> ans1=rob1(nums,numsSize<span class="hljs-number">-1</span>);<br>    <span class="hljs-type">int</span> ans2=rob1(nums+<span class="hljs-number">1</span>,numsSize<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">return</span> ans1&gt;ans2?ans1:ans2;<br>&#125;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rob</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        le=<span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span>(le==<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>]<br>        n1=nums[<span class="hljs-number">0</span>:le-<span class="hljs-number">1</span>]<br>        n2=nums[<span class="hljs-number">1</span>:le]<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs1</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs1(i-<span class="hljs-number">1</span>),dfs1(i-<span class="hljs-number">2</span>)+n1[i])<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs2</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs2(i-<span class="hljs-number">1</span>),dfs2(i-<span class="hljs-number">2</span>)+n2[i])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs1(le-<span class="hljs-number">2</span>),dfs2(le-<span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">number</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> rob1 = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) <br>&#123;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-property">length</span>==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> dp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    dp[<span class="hljs-number">0</span>]=nums[<span class="hljs-number">0</span>];<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(nums[<span class="hljs-number">0</span>],nums[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">2</span>;i&lt;nums.<span class="hljs-property">length</span>;++i)<br>        dp[i]=<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[i-<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">2</span>]+nums[i]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(dp[nums.<span class="hljs-property">length</span>-<span class="hljs-number">1</span>],dp[nums.<span class="hljs-property">length</span>-<span class="hljs-number">2</span>]);<br>&#125;;<br><span class="hljs-keyword">var</span> rob = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) <br>&#123;<br>    <span class="hljs-keyword">if</span>(nums.<span class="hljs-property">length</span>==<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">var</span> back=nums.<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">var</span> ret1=<span class="hljs-title function_">rob1</span>(nums);<br>    nums.<span class="hljs-title function_">push</span>(back);<br>    nums.<span class="hljs-title function_">shift</span>();<br>    <span class="hljs-keyword">var</span> ret2=<span class="hljs-title function_">rob1</span>(nums);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(ret1,ret2);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="拆分类动态规划">拆分类动态规划</h3><h4 id="343-整数拆分">343.整数拆分</h4><p><a href="https://leetcode.cn/problems/integer-break/description/">leetcode链接</a></p><p><a href="https://www.bilibili.com/video/BV1Mg411q7YJ?vd_source=0746909e8642dc821f4dc86699071129">参考视频</a></p><p>解法1:动态规划</p><p>定义<code>dp[i]</code>是整数<code>i</code>拆分后相乘能得到的最大整数<code>(i&gt;=2)</code></p><p><code>dp[i]=max(j*(i-j),j*dp[i-j])   (1&lt;=j&lt;i)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">integerBreak</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dp</span>(<span class="hljs-number">60</span>,<span class="hljs-number">0</span>);<br>        dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">2</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">3</span>;i&lt;=n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=i/<span class="hljs-number">2</span>;++j)<br>            &#123;<br>                dp[i]=<span class="hljs-built_in">max</span>(dp[i],<span class="hljs-built_in">max</span>(j*(i-j),j*dp[i-j]));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>解法2: 数学</p><p>粘贴自讨论区:</p><p>If an optimal product contains a factor<code>f &gt;= 4</code>, then you can replace it with factors<code>2</code>and <code>f-2</code> without losing optimality, as <code>2*(f-2) = 2f-4 &gt;= f</code>. So you never need a factor greater than or equal to <code>4</code>, meaning you only need factors <code>1</code>, <code>2</code> and <code>3</code> (and <code>1</code> is of course wasteful and you’d only use it for <code>n=2</code> and <code>n=3</code>, where it’s needed).</p><p>For the rest I agree, <code>3*3</code> is simply better than<code> 2*2*2</code>, so you’d never use <code>2</code>more than twice.</p><p>C:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">integerBreak</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span>(n)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> a=n/<span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> b=n%<span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(b==<span class="hljs-number">2</span>)<br>        ret=<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,a)*<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b==<span class="hljs-number">1</span>)<br>        ret=<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,a<span class="hljs-number">-1</span>)*<span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">else</span><br>        ret=<span class="hljs-built_in">pow</span>(<span class="hljs-number">3</span>,a);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="96-不同的二叉搜索树">96.不同的二叉搜索树</h4><p><a href="https://leetcode.cn/problems/unique-binary-search-trees/description/">leetcode链接</a></p><p><a href="https://www.bilibili.com/video/BV1eK411o7QA?vd_source=0746909e8642dc821f4dc86699071129">参考视频</a></p><p>C++: 数组动规</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numTrees</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dp</span>(<span class="hljs-number">20</span>,<span class="hljs-number">0</span>);<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;i/<span class="hljs-number">2</span>;++j)<br>                dp[i]+=dp[i-j<span class="hljs-number">-1</span>]*dp[j];<br>            dp[i]*=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<br>                dp[i]+=dp[i/<span class="hljs-number">2</span>]*dp[i/<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python: 记忆化递归</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numTrees</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">idx</span>):<br>            <span class="hljs-keyword">if</span> idx==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            tmp=<span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,idx):<br>                tmp+=dp(i)*dp(idx-<span class="hljs-number">1</span>-i)<br>            <span class="hljs-keyword">return</span> tmp<br>        <span class="hljs-keyword">return</span> dp(n)<br></code></pre></td></tr></table></figure><h3 id="0-1背包和完全背包">0-1背包和完全背包</h3><p>01背包：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">416. 分割等和子集</a> <a href="https://leetcode-cn.com/problems/ones-and-zeroes/">474. 一和零</a> <a href="https://leetcode-cn.com/problems/target-sum/">494. 目标和</a> <a href="https://leetcode-cn.com/problems/profitable-schemes/">879. 盈利计划</a> <a href="https://leetcode-cn.com/problems/last-stone-weight-ii/">1049. 最后一块石头的重量 II</a> <a href="https://leetcode-cn.com/problems/toss-strange-coins/">1230. 抛掷硬币</a></p><p>完全背包：<a href="https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/">1449. 数位成本和为目标值的最大数字</a> <a href="https://leetcode-cn.com/problems/coin-change/">322. 零钱兑换</a> <a href="https://leetcode-cn.com/problems/coin-change-2/">518. 零钱兑换 II</a> <a href="https://leetcode-cn.com/problems/perfect-squares/">279. 完全平方数</a></p><hr><p><a href="https://www.bilibili.com/video/BV16Y411v7Y6/?share_source=copy_web&amp;vd_source=0746909e8642dc821f4dc86699071129">0-1背包 完全背包 基础算法精讲 18</a>(视频链接)</p><h4 id="494-目标和-0-1背包">494. 目标和(0-1背包)</h4><p><a href="https://leetcode.cn/problems/target-sum/solutions/2119041/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-s1cx/">leetcode链接</a></p><h5 id="解法1-回溯-暴力-解法-可以1952ms踩线通过">解法1. 回溯(暴力)解法:可以1952ms踩线通过</h5><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetSumWays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>,add=<span class="hljs-number">0</span>,left=<span class="hljs-number">0</span>;<br>        left=<span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span> idx)&gt;dfs=[&amp;](<span class="hljs-type">int</span> idx)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">abs</span>(target-add)&gt;left)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">if</span>(idx==nums.<span class="hljs-built_in">size</span>())<br>            &#123;<br>                <span class="hljs-keyword">if</span>(add==target)<br>                    ++cnt;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            add+=nums[idx];<br>            left-=nums[idx];<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            add-=<span class="hljs-number">2</span>*nums[idx];<br>            <span class="hljs-built_in">dfs</span>(idx+<span class="hljs-number">1</span>);<br>            add+=nums[idx];<br>            left+=nums[idx];<br>        &#125;;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> cnt;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="解法2-灵神的0-1背包记忆递归模板">解法2:灵神的0-1背包记忆递归模板</h5><p>记忆递归模板</p><p>示例出自<a href="http://t.csdn.cn/rvknL">CSDN</a></p><p><strong>有n个物品，它们有各自的体积和价值，现有给定容量的背包，如何让背包里装入的物品具有最大的价值总和？</strong></p><p>为方便讲解和理解，下面讲述的例子均先用具体的数字代入，即：eg：number＝4，capacity＝8</p><table><thead><tr><th>i（物品编号）</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>w（体积）</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>v（价值）</td><td>3</td><td>4</td><td>5</td><td>6</td></tr></tbody></table><p>上述例子的dp数组打印:   (<code>dfs(i,c)=max(dfs(i-1,c),dfs(i-1,c-w[i])+v[i])</code>)</p><table><thead><tr><th>dfs</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td><strong>-1</strong></td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><strong>0</strong></td><td>0</td><td>0</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td><td>3</td></tr><tr><td><strong>1</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>4</td><td>7</td><td>7</td><td>7</td><td>7</td></tr><tr><td><strong>2</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>5</td><td>7</td><td>8</td><td>9</td><td>9</td></tr><tr><td><strong>3</strong></td><td>0</td><td>0</td><td>3</td><td>4</td><td>5</td><td>7</td><td>8</td><td>9</td><td>10</td></tr></tbody></table><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230705180715673.png" alt="image-20230705180715673"></p><p>灵神0-1背包递归模板(python):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">zero_one_knapsack</span>(<span class="hljs-params">capacity: <span class="hljs-built_in">int</span>, w: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>], v: <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    灵神0-1背包模板</span><br><span class="hljs-string">    :param capacity: 背包容量</span><br><span class="hljs-string">    :param w: 物品重量</span><br><span class="hljs-string">    :param v: 物品价值</span><br><span class="hljs-string">    :return: 取物品的最大价值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    n = <span class="hljs-built_in">len</span>(w)<br><br><span class="hljs-meta">    @cache</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i, c</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        深度优先搜索</span><br><span class="hljs-string">        :param i: 只考虑前i件物品</span><br><span class="hljs-string">        :param c: 剩余容量为c</span><br><span class="hljs-string">        :return: 能获得的最大价值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> c - w[i] &lt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> dfs(i - <span class="hljs-number">1</span>, c)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i - <span class="hljs-number">1</span>, c), dfs(i - <span class="hljs-number">1</span>, c - w[i]) + v[i])<br><br>    <span class="hljs-keyword">return</span> dfs(n - <span class="hljs-number">1</span>, capacity)<br></code></pre></td></tr></table></figure><p>上述模板的C++版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">zero_one_knapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity,vector&lt;<span class="hljs-type">int</span>&gt;&amp;w,vector&lt;<span class="hljs-type">int</span>&gt;&amp;v)</span></span><br><span class="hljs-function"></span>&#123;<br>    unordered_map&lt;string,<span class="hljs-type">int</span>&gt;cache;<span class="hljs-comment">//用于实现记忆化递归的哈希函数</span><br>    function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs;<br>    function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;cdfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<span class="hljs-comment">//直接可以调用，带有记忆化效果</span><br>    &#123;<br>        string key=<span class="hljs-built_in">to_string</span>(i)+<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;,&quot;</span>)+<span class="hljs-built_in">to_string</span>(c);<br>        <span class="hljs-keyword">if</span>(cache.<span class="hljs-built_in">find</span>(key)==cache.<span class="hljs-built_in">end</span>())<br>            cache[key]=<span class="hljs-built_in">dfs</span>(i,c);<br>        <span class="hljs-keyword">return</span> cache[key];<br>    &#125;;<br>    dfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(c-w[i]&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c),<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c-w[i])+v[i]);<br>    &#125;;<br>    <span class="hljs-comment">// for(int i=-1;i&lt;(int)w.size();++i)</span><br>    <span class="hljs-comment">// &#123;</span><br>    <span class="hljs-comment">//     for(int j=0;j&lt;=capacity;++j)</span><br>    <span class="hljs-comment">//         cout&lt;&lt;cdfs(i,j)&lt;&lt;&#x27; &#x27;;</span><br>    <span class="hljs-comment">//     cout&lt;&lt;endl;</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(w.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,capacity);<br>&#125;<br></code></pre></td></tr></table></figure><p>本题需要对上述模板进行变形,变形方式如下图</p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230705202036945.png" alt="image-20230705202036945"></p><p>解题</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findTargetSumWays</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(nums)<br>        add=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> nums:<br>            add+=k<br>        <span class="hljs-keyword">if</span> add-target&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> (add-target)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        add=(add-target)//<span class="hljs-number">2</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i:<span class="hljs-built_in">int</span>,c:<span class="hljs-built_in">int</span></span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> c&lt;nums[i]:<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)+dfs(i-<span class="hljs-number">1</span>,c-nums[i])<br>        <span class="hljs-keyword">return</span> dfs(n-<span class="hljs-number">1</span>,add)<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetSumWays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(sum&lt;target||(sum-target)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        sum=(sum-target)/<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//核心代码模板</span><br>        unordered_map&lt;string,<span class="hljs-type">int</span>&gt;cache;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;cdfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<br>        &#123;<br>            string key=<span class="hljs-built_in">to_string</span>(i)+<span class="hljs-built_in">string</span>(<span class="hljs-string">&quot;,&quot;</span>)+<span class="hljs-built_in">to_string</span>(c);<br>            <span class="hljs-keyword">if</span>(cache.<span class="hljs-built_in">find</span>(key)==cache.<span class="hljs-built_in">end</span>())<br>                cache[key]=<span class="hljs-built_in">dfs</span>(i,c);<br>            <span class="hljs-keyword">return</span> cache[key];<br>        &#125;;<br>        dfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> c==<span class="hljs-number">0</span>?<span class="hljs-number">1</span>:<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(c-nums[i]&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c)+<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c-nums[i]);<br>        &#125;;<br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>,sum);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="解法3-数组递推的动态规划解法">解法3: 数组递推的动态规划解法</h5><p>本题相当于<code>v[i]=1,w[i]=nums[i]</code>的情况</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mo>=</mo><mo stretchy="false">(</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></msubsup><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo>−</mo><mi>t</mi><mi>a</mi><mi>r</mi><mi>g</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">s=(\sum\limits_{i=0}^nnums[i])-target</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3291em;vertical-align:-0.9777em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3514em;"><span style="top:-2.1223em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop op-symbol small-op">∑</span></span></span><span style="top:-3.95em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">])</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8095em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span></p><p>本题等价于在<code>nums</code>中任意取几个数相加,满足和等于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>s</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac s 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>,求任意取几个数相加的方法总数</p><p>例如<code>nums=[1,2,3,1,2]</code>,<code>target=-1</code></p><p>只需在<code>nums</code>中任意取几个数相加,满足和等于5</p><table><thead><tr><th><code>arr[i][j]</code></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>-1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0(1)</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1(2)</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr><tr><td>2(3)</td><td>1</td><td>1</td><td>1</td><td>2</td><td>1</td><td>1</td></tr><tr><td>3(1)</td><td>1</td><td>2</td><td>2</td><td>3</td><td>3</td><td>2</td></tr><tr><td>4(2)</td><td>1</td><td>2</td><td>3</td><td>5</td><td>5</td><td>5</td></tr></tbody></table><p><code>arr[i][j]</code>表示只考虑<code>nums</code>前<code>i</code>个元素时,相加得到<code>j</code>的最多方法数</p><p><code>arr[i][j]=arr[i-1][j]+arr[i-1][j-nums[i]]</code></p><p>注意坑: s为奇数或s&lt;0都应当返回0</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findTargetSumWays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> add=(sum-target)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span>(sum-target&lt;<span class="hljs-number">0</span>||(sum-target)%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(nums.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; vec_:vec)<br>            vec_.<span class="hljs-built_in">resize</span>(add+<span class="hljs-number">1</span>);<br>        vec[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;nums[i<span class="hljs-number">-1</span>]&amp;&amp;j&lt;=add;++j)<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(;j&lt;=add;++j)<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j]+vec[i<span class="hljs-number">-1</span>][j-nums[i<span class="hljs-number">-1</span>]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec[nums.<span class="hljs-built_in">size</span>()][add];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findTargetSumWays</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        add=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> nums:<br>            add+=k<br>        <span class="hljs-keyword">if</span> (add-target)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> add-target&lt;<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        add=(add-target)//<span class="hljs-number">2</span><br>        size=<span class="hljs-built_in">len</span>(nums)<br>        li = [<span class="hljs-number">0</span>] * (size + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size+<span class="hljs-number">1</span>):<br>            li[k]=[<span class="hljs-number">0</span>]*(add+<span class="hljs-number">1</span>)<br>        li[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,size+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(add+<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> j-nums[i-<span class="hljs-number">1</span>]&gt;=<span class="hljs-number">0</span>:<br>                    li[i][j]=li[i-<span class="hljs-number">1</span>][j]+li[i-<span class="hljs-number">1</span>][j-nums[i-<span class="hljs-number">1</span>]]<br>                <span class="hljs-keyword">else</span>:<br>                    li[i][j]=li[i-<span class="hljs-number">1</span>][j]<br>        <span class="hljs-keyword">return</span> li[size][add]<br></code></pre></td></tr></table></figure><h4 id="322-零钱兑换">322. 零钱兑换</h4><p><a href="https://leetcode.cn/problems/coin-change/description/">leetcode链接</a></p><p>这是一个完全背包问题</p><p>举例:</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog">输入：coins = <span class="hljs-string">[1, 2, 3, 4, 5]</span>, amount = <span class="hljs-number">7</span><br>输出：<span class="hljs-number">3</span> <br></code></pre></td></tr></table></figure><p><code>arr[i][j]</code>表示当前状态下所需最少硬币数</p><p><code>arr[i][j]=min(arr[i-1][j],arr[i][j-coins[i-1]]+1)</code>（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mo>≥</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i\ge 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7955em;vertical-align:-0.136em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</p><table><thead><tr><th><code>i</code></th><th>coins</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>0</td><td></td><td>0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td></tr><tr><td>1</td><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td></tr><tr><td>2</td><td>2</td><td>0</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>3</td><td>4</td></tr><tr><td>3</td><td>3</td><td>0</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>2</td><td>3</td></tr><tr><td>4</td><td>4</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>2</td></tr><tr><td>5</td><td>5</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td></tr></tbody></table><p>C++:二维数组递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> big 0x7ffffff0 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(coins.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>);<br>        vec[<span class="hljs-number">0</span>].<span class="hljs-built_in">resize</span>(amount+<span class="hljs-number">1</span>,big);<br>        vec[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=coins.<span class="hljs-built_in">size</span>();++i)<br>            vec[i].<span class="hljs-built_in">resize</span>(amount+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=coins.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;coins[i<span class="hljs-number">-1</span>]&amp;&amp;j&lt;=amount;++j)<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(;j&lt;=amount;++j)<br>                vec[i][j]=<span class="hljs-built_in">min</span>(vec[i<span class="hljs-number">-1</span>][j],vec[i][j-coins[i<span class="hljs-number">-1</span>]]+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec[coins.<span class="hljs-built_in">size</span>()][amount]==big?<span class="hljs-number">-1</span>:vec[coins.<span class="hljs-built_in">size</span>()][amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Python:(记忆化递归)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">coinChange</span>(<span class="hljs-params">self, coins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], amount: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        n=<span class="hljs-built_in">len</span>(coins)<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> c&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> inf<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(dfs(i-<span class="hljs-number">1</span>,c),dfs(i,c-coins[i])+<span class="hljs-number">1</span>)<br>        ret=dfs(n-<span class="hljs-number">1</span>,amount)<br>        <span class="hljs-keyword">if</span> ret==inf:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><p>优化：压缩为一维数组</p><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> big 0x7ffffff0</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">coinChange</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">int</span> amount)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(amount+<span class="hljs-number">1</span>,big)</span></span>;<br>        vec[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; coi:coins)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=coi;i&lt;=amount;++i)<br>                vec[i]=<span class="hljs-built_in">min</span>(vec[i],vec[i-coi]+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> vec[amount]==big?<span class="hljs-number">-1</span>:vec[amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">coinChange</span>(<span class="hljs-params">self, coins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], amount: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        arr=[inf]*(amount+<span class="hljs-number">1</span>)<br>        arr[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> idx,coin <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(coins):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(coin,amount+<span class="hljs-number">1</span>):<br>                arr[i]=<span class="hljs-built_in">min</span>(arr[i],arr[i-coin]+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> arr[amount]==inf:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> arr[amount]<br></code></pre></td></tr></table></figure><p>==课后作业：==</p><h5 id="416-分割等和子集">416. 分割等和子集</h5><p><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">leetcode链接</a></p><p>对于<code>nums=[1,5,11,5]</code>的测试用例</p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th></tr></thead><tbody><tr><td></td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>5</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>11</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr><tr><td>5</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>2</td><td>2</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><p><code>arr(i,c)=arr(i-1,c-num[i])+arr(i-1,c)</code></p><p>完成第5行时最后一列非0,可以返回True</p><p>记忆化递归</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canPartition</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        s=<span class="hljs-built_in">sum</span>(nums)<br>        <span class="hljs-keyword">if</span> s%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        s//=<span class="hljs-number">2</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> c-nums[i]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c-nums[i])+dfs(i-<span class="hljs-number">1</span>,c)<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):  <span class="hljs-comment">## k从小到大进行枚举</span><br>            <span class="hljs-keyword">if</span>(dfs(k,s)!=<span class="hljs-number">0</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>代码中k从小到大进行枚举,相当于按照<code>nums</code>数组由短到长枚举,很多数组只考虑前面一小段就符合条件,这样可以减少递归层级,防止超出内存限制</p><p>正常的二维数组动规:</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        sum/=<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> m=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> n=sum;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">arr</span>(m+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; ar:arr)<br>            ar.<span class="hljs-built_in">resize</span>(n+<span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j&gt;=nums[i<span class="hljs-number">-1</span>])<br>                    arr[i][j]=<span class="hljs-built_in">max</span>(arr[i<span class="hljs-number">-1</span>][j],arr[i<span class="hljs-number">-1</span>][j-nums[i<span class="hljs-number">-1</span>]]+nums[i<span class="hljs-number">-1</span>]);<br>                <span class="hljs-keyword">else</span><br>                    arr[i][j]=arr[i<span class="hljs-number">-1</span>][j];<br>                <span class="hljs-keyword">if</span>(arr[i][j]==sum)<br>                &#123;<br>                    flag=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">goto</span> Theend;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Theend:<br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Javascript:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">number[]</span>&#125; <span class="hljs-variable">nums</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">boolean</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> canPartition = <span class="hljs-keyword">function</span>(<span class="hljs-params">nums</span>) <br>&#123;<br>    <span class="hljs-keyword">let</span> sum=<span class="hljs-built_in">eval</span>(nums.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;+&#x27;</span>));<br>    <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    sum/=<span class="hljs-number">2</span>;<br>    len=nums.<span class="hljs-property">length</span>;<br>    <span class="hljs-keyword">let</span> arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    arr[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>    arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">1</span>;j&lt;=sum;++j)<br>        arr[<span class="hljs-number">0</span>][j]=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">1</span>;i&lt;=len;++i)<br>    &#123;<br>        arr[i]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> j=<span class="hljs-number">0</span>;j&lt;=sum;++j)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(j-nums[i-<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>)<br>                arr[i][j]=arr[i-<span class="hljs-number">1</span>][j];<br>            <span class="hljs-keyword">else</span><br>                arr[i][j]=arr[i-<span class="hljs-number">1</span>][j]+arr[i-<span class="hljs-number">1</span>][j-nums[i-<span class="hljs-number">1</span>]];<br>        &#125;<br>        <span class="hljs-keyword">if</span>(arr[i][sum]&gt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>压缩为一维数组:</p><p>Python:使用临时数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">canPartition</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        s=<span class="hljs-built_in">sum</span>(nums)<br>        <span class="hljs-keyword">if</span> s%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        s//=<span class="hljs-number">2</span><br>        arr=[<span class="hljs-number">0</span>]*(s+<span class="hljs-number">1</span>)<br>        arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> idx,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            arr2=arr.copy()  <span class="hljs-comment">## 注意:这里要用.copy(),否则会深拷贝</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num,s+<span class="hljs-number">1</span>):<br>                arr2[i]+=arr[i-num]<br>            <span class="hljs-keyword">if</span> arr2[s]!=<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            arr=arr2.copy()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>C++:carl模板的倒序递推</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> sum=<span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(sum%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        sum/=<span class="hljs-number">2</span>;<br>        cout&lt;&lt;sum&lt;&lt;endl;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">dp</span>(sum+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=sum;j&gt;=nums[i];--j)<span class="hljs-comment">//从后往前遍历，就是0-1背包</span><br>            &#123;<br>                dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-nums[i]]+nums[i]);  <br>            &#125;<br>            <span class="hljs-keyword">if</span>(dp[sum]==sum)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注意：本题如果用C++，只能用递推公式<code>dp[j]=max(dp[j],dp[j-nums[i]]+nums[i]);</code></p><p>而不能用<code>dp[j]+=dp[j-nums[i]]</code>，因为后者<code>dp[i]</code>的含义是当前枚举到的数中加和为<code>i</code>的所有组合总数，会溢出</p><p>分割等和子集问题的变换:</p><h5 id="1049-最后一块石头的重量II">1049.最后一块石头的重量II</h5><p><a href="https://leetcode.cn/problems/last-stone-weight-ii/description/">leetcode链接</a></p><p>对于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>s</mi><mo>=</mo><mo stretchy="false">[</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">stones=[a_1,a_2,\cdots,a_n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">es</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></p><p>可以找到一种分割子集的方法,使两个子集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[b_1,b_2,\cdots,b_i]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>c</mi><mi>j</mi></msub><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[c_1,c_2,\cdots,c_j]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span></span></span>的和相差最小,相差记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></p><p>有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><msub><mi>c</mi><mn>1</mn></msub><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>c</mi><mi>j</mi></msub><mo>+</mo><mi>s</mi></mrow><annotation encoding="application/x-tex">b_1+b_2+\cdots+b_i=c_1+c_2+\cdots+c_j+s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span></p><p>(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>b</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>b</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>c</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>c</mi><mi>j</mi></msub><mo>∈</mo><mi>s</mi><mi>t</mi><mi>o</mi><mi>n</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">b_1,b_2,\cdots,b_i,c_1,c_2,\cdots,c_j\in stones</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">es</span></span></span></span>)</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi></mrow><annotation encoding="application/x-tex">s</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">s</span></span></span></span>就是最后石头的最小可能重量</p><p>最后会把石头分成两堆，重量分别为<code>add</code>和<code>su-add</code>(<code>add&lt;=su-add</code>)</p><p><code>add</code>的理论最大值为<code>su//add</code>(//是整除)，只需让<code>add</code>从<code>su//add</code>开始枚举递减，直到找到一种石头组合是部分总重量为<code>add</code></p><p>对应的最后一块石头的重量为<code>su-add-add=su-2*add</code></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lastStoneWeightII</span>(<span class="hljs-params">self, stones: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        su=<span class="hljs-built_in">sum</span>(stones)<br>        le=<span class="hljs-built_in">len</span>(stones)<br>        add=su//<span class="hljs-number">2</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span>(c&lt;stones[i]):<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)+dfs(i-<span class="hljs-number">1</span>,c-stones[i])<br>        <span class="hljs-keyword">while</span> dfs(le-<span class="hljs-number">1</span>,add)==<span class="hljs-number">0</span>:<br>            add-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(su-<span class="hljs-number">2</span>*add)<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> mul 100000</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lastStoneWeightII</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; stones)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> su=<span class="hljs-built_in">accumulate</span>(stones.<span class="hljs-built_in">begin</span>(),stones.<span class="hljs-built_in">end</span>(),<span class="hljs-number">0</span>);<br>        <span class="hljs-type">int</span> le=stones.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> add=su/<span class="hljs-number">2</span>;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;cache;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;cdfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<br>        &#123;<br>            <span class="hljs-type">int</span> key=i*mul+c;<br>            <span class="hljs-keyword">if</span>(cache.<span class="hljs-built_in">find</span>(key)==cache.<span class="hljs-built_in">end</span>())<br>                cache[key]=<span class="hljs-built_in">dfs</span>(i,c);<br>            <span class="hljs-keyword">return</span> cache[key];<br>        &#125;;<br>        dfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> c)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(c==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(c-stones[i]&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c)+<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,c-stones[i]);<br>        &#125;;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">cdfs</span>(le<span class="hljs-number">-1</span>,add)==<span class="hljs-number">0</span>)<br>            --add;<br>        <span class="hljs-keyword">return</span> su<span class="hljs-number">-2</span>*add;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="279-完全平方数">279. 完全平方数</h4><p><a href="https://leetcode.cn/problems/perfect-squares/">leetcode链接</a></p><p>测试用例<code>n=12</code>:</p><p><code>arr=[1,4,9]</code></p><table><thead><tr><th><code>dfs</code></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th></tr></thead><tbody><tr><td></td><td>0</td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord">∞</span></span></span></span></td></tr><tr><td>1</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><td>4</td><td>0</td><td>1</td><td>2</td><td>3</td><td>1</td><td>2</td><td>3</td><td>4</td><td>2</td><td>3</td><td>4</td><td>5</td><td>3</td></tr><tr><td>9</td><td>0</td><td>1</td><td>2</td><td>3</td><td>1</td><td>2</td><td>3</td><td>4</td><td>2</td><td>1</td><td>2</td><td>3</td><td>3</td></tr></tbody></table><p><code>dfs(i,c)=min(dfs(i-1,c),dfs(i,c-arr[i])+1)</code></p><p>递归会爆内存,所以只贴压缩为一维数组的递推代码</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numSquares</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">arr</span><span class="hljs-params">(n+<span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> g=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">generate</span>(arr.<span class="hljs-built_in">begin</span>(),arr.<span class="hljs-built_in">end</span>(),[&amp;]()&#123;<span class="hljs-keyword">return</span> g++;&#125;);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=n;++i)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=n;++j)<br>                <span class="hljs-keyword">if</span>(j-i*i&gt;=<span class="hljs-number">0</span>)<br>                    arr[j]=<span class="hljs-built_in">min</span>(arr[j],arr[j-i*i]+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> arr[n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">numSquares</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        arr=[<span class="hljs-number">1</span>]<br>        num=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> arr[num-<span class="hljs-number">1</span>]&lt;=n:<br>            num+=<span class="hljs-number">1</span><br>            arr.append(num**<span class="hljs-number">2</span>)<br>        dfs=[inf]*(n+<span class="hljs-number">1</span>)<br>        dfs[<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> idx,nu <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(arr):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nu,n+<span class="hljs-number">1</span>):<br>                dfs[i]=<span class="hljs-built_in">min</span>(dfs[i],dfs[i-nu]+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dfs[n]<br></code></pre></td></tr></table></figure><h4 id="518-零钱兑换-II">518. 零钱兑换 II</h4><p><a href="https://leetcode.cn/problems/coin-change-ii/">leetcode链接</a></p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td></td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>3</td></tr><tr><td>5</td><td>1</td><td>1</td><td>2</td><td>2</td><td>3</td><td>4</td></tr></tbody></table><p><code>vec[i][j]=vec[i-1][j]+vec[i][j-coins[i-1]];</code></p><p>二维数组法</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> amount, vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;<span class="hljs-built_in">vec</span>(coins.<span class="hljs-built_in">size</span>()+<span class="hljs-number">1</span>);<br>        vec[<span class="hljs-number">0</span>].<span class="hljs-built_in">resize</span>(amount+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=coins.<span class="hljs-built_in">size</span>();++i)<br>            vec[i].<span class="hljs-built_in">resize</span>(amount+<span class="hljs-number">1</span>);<br>        vec[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=coins.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(;j&lt;coins[i<span class="hljs-number">-1</span>]&amp;&amp;j&lt;=amount;++j)<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j];<br>            <span class="hljs-keyword">for</span>(;j&lt;=amount;++j)<br>                vec[i][j]=vec[i<span class="hljs-number">-1</span>][j]+vec[i][j-coins[i<span class="hljs-number">-1</span>]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec[coins.<span class="hljs-built_in">size</span>()][amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>(记忆化)递归法</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">self, amount: <span class="hljs-built_in">int</span>, coins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:  <span class="hljs-comment">## 灵神记忆化递归模板</span><br>        n=<span class="hljs-built_in">len</span>(coins)<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> c-coins[i]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)+dfs(i,c-coins[i])<br>        <span class="hljs-keyword">return</span> dfs(n-<span class="hljs-number">1</span>,amount)<br></code></pre></td></tr></table></figure><p>压缩为一维数组:</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> amount, vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">arr</span>(amount+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span>&amp; coin:coins)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=coin;i&lt;=amount;++i)<br>                arr[i]+=arr[i-coin];<br>        <span class="hljs-keyword">return</span> arr[amount];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">self, amount: <span class="hljs-built_in">int</span>, coins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        arr=[<span class="hljs-number">0</span>]*(amount+<span class="hljs-number">1</span>)<br>        arr[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> idx,coin <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(coins):<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(coin,amount+<span class="hljs-number">1</span>):<br>                arr[i]+=arr[i-coin]<br>        <span class="hljs-keyword">return</span> arr[amount]<br></code></pre></td></tr></table></figure><h5 id="377-组合总和IV">377.组合总和IV</h5><p><a href="https://leetcode.cn/problems/combination-sum-iv/">leetcode链接</a></p><p>与上题几乎一样,区别使上一题求组合数,不考虑顺序,本题求排列数,考虑顺序</p><p>只需交换两个for循环的顺序</p><p>dp数组表：(<code>nums=[1,2,3],target=4</code>)</p><table><thead><tr><th></th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td></td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><strong>1</strong></td><td>1</td><td>1</td><td>1</td><td>2</td><td>4</td></tr><tr><td><strong>2</strong></td><td>1</td><td>1</td><td>2</td><td>3</td><td>6</td></tr><tr><td><strong>3</strong></td><td>1</td><td>1</td><td>2</td><td>4</td><td>7</td></tr></tbody></table><p>二维数组：</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo>&lt;</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>c</mi><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mi mathvariant="normal">.</mi><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>c</mi><mo>−</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>c</mi><mo>≥</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp(i,c)=\begin{cases}dp(i-1,c),c&lt;nums[i]\\dp(i-1,c)+dp(nums.size()-1,c-nums[i]),c\ge nums[i]\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal">ze</span><span class="mopen">(</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">])</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">combinationSum4</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c</span>):<br>            <span class="hljs-keyword">if</span> c==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> c-nums[i]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c)<br>            <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>,c-nums[i])+dfs(i-<span class="hljs-number">1</span>,c)<br>        <span class="hljs-keyword">return</span> dfs(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>,target)<br></code></pre></td></tr></table></figure><p>一维数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> ll=<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">combinationSum4</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;ll&gt;<span class="hljs-built_in">dp</span>(target+<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=target;++j)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.<span class="hljs-built_in">size</span>();++i)<br>            &#123;<br>                <span class="hljs-keyword">if</span>(j-nums[i]&gt;=<span class="hljs-number">0</span>)<br>                    dp[j]+=dp[j-nums[i]];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[target];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="474-一和零">474. 一和零</h4><p><a href="https://leetcode.cn/problems/ones-and-zeroes/description/">leetcode链接</a></p><p>这是一个0-1背包问题,区别是背包容量是一个二维的情况,即要同时考虑0和1的容量</p><p><code>w0[i]</code>表示<code>str[i]</code>含有0的个数</p><p><code>w1[i]</code>表示<code>str[i]</code>含有1的个数</p><p><code>dfs(i,c,d)</code>表示只考虑前<code>i</code>个字符串,0的剩余容量为<code>c</code>,1的剩余容量为<code>d</code>的情况下,字串的最大长度</p><p><code>dfs(i,c,d)=max&#123;dfs(i-1,c,d),dfs(i-1,c-w0[i],d-w1[i])+1&#125;</code></p><p>方法1：灵神模板记忆化递归</p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">findMaxForm</span>(<span class="hljs-params">self, strs: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        le=<span class="hljs-built_in">len</span>(strs)<br>        w0=[<span class="hljs-number">0</span>]*le<br>        w1=[<span class="hljs-number">0</span>]*le<br>        <span class="hljs-keyword">for</span> idx,s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(strs):<br>            w0[idx]=s.count(<span class="hljs-string">&quot;0&quot;</span>)<br>            w1[idx]=s.count(<span class="hljs-string">&quot;1&quot;</span>)<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,c,d</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> c&lt;w0[i] <span class="hljs-keyword">or</span> d&lt;w1[i]:<br>                <span class="hljs-keyword">return</span> dfs(i-<span class="hljs-number">1</span>,c,d)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>,c,d),dfs(i-<span class="hljs-number">1</span>,c-w0[i],d-w1[i])+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dfs(le-<span class="hljs-number">1</span>,m,n)<br></code></pre></td></tr></table></figure><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> m1 (101*101)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> m2 101</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaxForm</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> le=strs.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;w0=<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(le);<br>        vector&lt;<span class="hljs-type">int</span>&gt;w1=<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(le);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;strs.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            w0[i]=<span class="hljs-built_in">count</span>(strs[i].<span class="hljs-built_in">begin</span>(),strs[i].<span class="hljs-built_in">end</span>(),<span class="hljs-string">&#x27;0&#x27;</span>);<br>            w1[i]=<span class="hljs-built_in">count</span>(strs[i].<span class="hljs-built_in">begin</span>(),strs[i].<span class="hljs-built_in">end</span>(),<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;cache;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;dfs;<br>        function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>,<span class="hljs-type">int</span>,<span class="hljs-type">int</span>)&gt;cdfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> n0,<span class="hljs-type">int</span> n1)<br>        &#123;<br>            <span class="hljs-type">int</span> key=i*m1+n0*m2+n1;<br>            <span class="hljs-keyword">if</span>(cache.<span class="hljs-built_in">find</span>(key)==cache.<span class="hljs-built_in">end</span>())<br>                cache[key]=<span class="hljs-built_in">dfs</span>(i,n0,n1);<br>            <span class="hljs-keyword">return</span> cache[key];<br>        &#125;;<br>        dfs=[&amp;](<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> n0,<span class="hljs-type">int</span> n1)<br>        &#123;<br>            <span class="hljs-keyword">if</span>(i&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span>(n0-w0[i]&lt;<span class="hljs-number">0</span>||n1-w1[i]&lt;<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,n0,n1);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,n0,n1),<span class="hljs-built_in">cdfs</span>(i<span class="hljs-number">-1</span>,n0-w0[i],n1-w1[i])+<span class="hljs-number">1</span>);<br>        &#125;;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">cdfs</span>(le<span class="hljs-number">-1</span>,m,n);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>方法2：三维数组动规</p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMaxForm</span><span class="hljs-params">(vector&lt;string&gt;&amp; strs, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-type">int</span> len=strs.<span class="hljs-built_in">size</span>();<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">w0</span>(len);<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">w1</span>(len);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            w0[i]=<span class="hljs-built_in">count</span>(strs[i].<span class="hljs-built_in">begin</span>(),strs[i].<span class="hljs-built_in">end</span>(),<span class="hljs-string">&#x27;0&#x27;</span>);<br>            w1[i]=<span class="hljs-built_in">count</span>(strs[i].<span class="hljs-built_in">begin</span>(),strs[i].<span class="hljs-built_in">end</span>(),<span class="hljs-string">&#x27;1&#x27;</span>);<br>        &#125;<br>        vector&lt;vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">vec</span>(len);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; vec_1:vec)<br>        &#123;<br>            vec_1.<span class="hljs-built_in">resize</span>(m+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; vec_2:vec_1)<br>                vec_2.<span class="hljs-built_in">resize</span>(n+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;++i)<br>        &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;=m;++j)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;=n;++k)<br>                &#123;<br>                    <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)<br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(j&lt;w0[i]||k&lt;w1[i])<br>                            vec[i][j][k]=<span class="hljs-number">0</span>;<br>                        <span class="hljs-keyword">else</span> <br>                            vec[i][j][k]=<span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span>(j-w0[i]&lt;<span class="hljs-number">0</span>||k-w1[i]&lt;<span class="hljs-number">0</span>)<br>                    &#123;<br>                        vec[i][j][k]=vec[i<span class="hljs-number">-1</span>][j][k];<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    vec[i][j][k]=<span class="hljs-built_in">max</span>(vec[i<span class="hljs-number">-1</span>][j][k],vec[i<span class="hljs-number">-1</span>][j-w0[i]][k-w1[i]]+<span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> vec[len<span class="hljs-number">-1</span>][m][n];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="879-盈利计划">879.盈利计划</h4><p><a href="https://leetcode.cn/problems/profitable-schemes/">leetcode链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">profitableSchemes</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, minProfit: <span class="hljs-built_in">int</span>, group: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], profit: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        m=<span class="hljs-number">10</span>**<span class="hljs-number">9</span>+<span class="hljs-number">7</span><br>        le=<span class="hljs-built_in">len</span>(group)<br>        <span class="hljs-comment">## 首先计算符合人数要求的所有方案</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp1</span>(<span class="hljs-params">i,num</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> num-group[i]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dp1(i-<span class="hljs-number">1</span>,num)<br>            <span class="hljs-keyword">return</span> (dp1(i-<span class="hljs-number">1</span>,num)+dp1(i-<span class="hljs-number">1</span>,num-group[i]))%m<br>        ans1=dp1(le-<span class="hljs-number">1</span>,n)<br>        <span class="hljs-comment">## 然后计算利润小于minProfit的方案</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp2</span>(<span class="hljs-params">i,g,p</span>):<br>            <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> p==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> g-group[i]&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> p-profit[i]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dp2(i-<span class="hljs-number">1</span>,g,p)%m<br>            <span class="hljs-keyword">return</span> (dp2(i-<span class="hljs-number">1</span>,g-group[i],p-profit[i])+dp2(i-<span class="hljs-number">1</span>,g,p))%m<br>        maxprofit=<span class="hljs-built_in">sum</span>(profit)<br>        ans2=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(minProfit):<br>            ans2+=dp2(<span class="hljs-built_in">len</span>(group)-<span class="hljs-number">1</span>,n,i)<br>            ans2%=m<br>        <span class="hljs-keyword">return</span> (ans1+m-ans2)%m<br></code></pre></td></tr></table></figure><h3 id="最长公共子序列">最长公共子序列</h3><p><a href="https://www.bilibili.com/video/BV1TM4y1o7ug?vd_source=0746909e8642dc821f4dc86699071129">最长公共子序列 编辑距离【基础算法精讲 19】</a> (参考视频)</p><h4 id="1143-最长公共子序列">1143.最长公共子序列</h4><p><a href="https://leetcode.cn/problems/longest-common-subsequence/description/">leetcode链接</a></p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230706112658119.png" alt="image-20230706112658119"></p><p>可以得到递推式：</p><p><img src="./%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93.assets/image-20230706112721998.png" alt="image-20230706112721998"></p><p>可以证明，简化后结果为</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mspace width="2em"/><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>d</mi><mi>f</mi><mi>s</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mspace width="2em"/><mo stretchy="false">(</mo><mi>s</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>t</mi><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dfs(i,j)=\begin{cases}dfs(i-1,j-1)+1\qquad (s[i]=t[j])\\max\{dfs(i-1,j),dfs(i,j-1)\}\qquad (s[i]\neq t[j])\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">])</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">df</span><span class="mord mathnormal">s</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)}</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">])</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">longestCommonSubsequence</span>(<span class="hljs-params">self, text1: <span class="hljs-built_in">str</span>, text2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        m=<span class="hljs-built_in">len</span>(text1)<br>        n=<span class="hljs-built_in">len</span>(text2)<br>        arr=[[]]*(m+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> idx,arr_ <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(arr):<br>            arr[idx]=[<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> text1[i-<span class="hljs-number">1</span>]==text2[j-<span class="hljs-number">1</span>]:<br>                    arr[i][j]=arr[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    arr[i][j]=<span class="hljs-built_in">max</span>(arr[i-<span class="hljs-number">1</span>][j],arr[i][j-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> arr[m][n]<br></code></pre></td></tr></table></figure><h4 id="72-编辑距离">72. 编辑距离</h4><p><a href="https://leetcode.cn/problems/edit-distance/solutions/2133222/jiao-ni-yi-bu-bu-si-kao-dong-tai-gui-hua-uo5q/">leetcode链接</a></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">{</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>w</mi><mi>o</mi><mi>r</mi><mi>d</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp(i,j)=\begin{cases}min\{dp(i-1,j),dp(i,j-1),dp(i-1,j-1)\}+1,word1[i]\ne word2[j]\\dp(i-1,j-1),word1[i]=word2[j]\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">min</span><span class="mopen">{</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)}</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span><span class="mord mathnormal">d</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><table><thead><tr><th>dp(i,j)</th><th><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6633em;vertical-align:-0.0817em;"></span><span class="mord amsrm">∅</span></span></span></span></th><th>r</th><th>o</th><th>s</th></tr></thead><tbody><tr><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∅</mi></mrow><annotation encoding="application/x-tex">\varnothing</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6633em;vertical-align:-0.0817em;"></span><span class="mord amsrm">∅</span></span></span></span></td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td><strong>h</strong></td><td>1</td><td>1</td><td>2</td><td>3</td></tr><tr><td><strong>o</strong></td><td>2</td><td>2</td><td>1</td><td>2</td></tr><tr><td><strong>r</strong></td><td>3</td><td>2</td><td>2</td><td>2</td></tr><tr><td><strong>s</strong></td><td>4</td><td>3</td><td>3</td><td>2</td></tr><tr><td><strong>e</strong></td><td>5</td><td>4</td><td>4</td><td>3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minDistance</span>(<span class="hljs-params">self, word1: <span class="hljs-built_in">str</span>, word2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dp(i,j-<span class="hljs-number">1</span>)+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> j==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j)+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> word1[i]==word2[j]:<br>                <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">min</span>(dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>),dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>))+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(word1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(word2)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>课后作业：</p><h4 id="583-两个字符串的删除操作">583. 两个字符串的删除操作</h4><p><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/">leetcode链接</a></p><p><a href="#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%9249%EF%BC%9A%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C">点击跳转</a></p><h4 id="712-两个字符串的最小ASCII删除和">712. 两个字符串的最小ASCII删除和</h4><p><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/">leetcode链接</a></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>a</mi><mi>s</mi><mi>c</mi><mi>i</mi><mi>i</mi><mo stretchy="false">(</mo><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo><mi>s</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo><mo separator="true">,</mo><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo mathvariant="normal">≠</mo><mi>s</mi><mn>2</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">dp(i,j)=\begin{cases}dp(i-1,j-1)+ascii(s1[i]),s1[i]=s2[j]\\max\{dp(i-1,j),dp(i,j-1)\},s1[i]\ne s2[i]\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">sc</span><span class="mord mathnormal">ii</span><span class="mopen">(</span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">])</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)}</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minimumDeleteSum</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> s1[i]!=s2[j]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>))<br>            <span class="hljs-keyword">return</span> dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+<span class="hljs-built_in">ord</span>(s1[i])<br>        add=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s1:<br>            add+=<span class="hljs-built_in">ord</span>(ch)<br>        <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> s2:<br>            add+=<span class="hljs-built_in">ord</span>(ch)<br>        <span class="hljs-keyword">return</span> add-<span class="hljs-number">2</span>*dp(<span class="hljs-built_in">len</span>(s1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(s2)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h4 id="1458-两个子序列的最大点积">1458. 两个子序列的最大点积</h4><p><a href="https://leetcode.cn/problems/max-dot-product-of-two-subsequences/">leetcode链接</a></p><table><thead><tr><th></th><th></th><th><strong>3</strong></th><th><strong>0</strong></th><th><strong>-6</strong></th></tr></thead><tbody><tr><td></td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td><strong>2</strong></td><td>0</td><td>6</td><td>6</td><td>6</td></tr><tr><td><strong>1</strong></td><td>0</td><td>6</td><td>6</td><td>6</td></tr><tr><td><strong>-2</strong></td><td>0</td><td>6</td><td>6</td><td>18</td></tr><tr><td><strong>5</strong></td><td>0</td><td>15</td><td>15</td><td>18</td></tr></tbody></table><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">{</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>1</mn><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mn>2</mn><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>d</mi><mi>p</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">}</mo></mrow><annotation encoding="application/x-tex">dp(i,j)=max\{dp(i-1,j-1)+nums1[i]*nums2[j],dp(i-1,j),dp(i,j-1)\}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ma</span><span class="mord mathnormal">x</span><span class="mopen">{</span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">1</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord">2</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)}</span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxDotProduct</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j</span>):  <span class="hljs-comment">## 记忆化递归</span><br>            <span class="hljs-keyword">if</span> i&lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp(i-<span class="hljs-number">1</span>,j-<span class="hljs-number">1</span>)+nums1[i]*nums2[j],dp(i-<span class="hljs-number">1</span>,j),dp(i,j-<span class="hljs-number">1</span>))<br>        ret=dp(<span class="hljs-built_in">len</span>(nums1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums2)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> ret==<span class="hljs-number">0</span>:  <span class="hljs-comment">## ret==0可能是因为答案为负数，此时需要分别找出两个数组中绝对值最小的元素，并相乘</span><br>            min1=inf<br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums1:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(n)&lt;<span class="hljs-built_in">abs</span>(min1):<br>                    min1=n<br>            min2=inf<br>            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums2:<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(n)&lt;<span class="hljs-built_in">abs</span>(min2):<br>                    min2=n<br>            <span class="hljs-keyword">return</span> min1*min2<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h4 id="97-交错字符串">97. 交错字符串</h4><p><a href="https://leetcode.cn/problems/interleaving-string/">leetcode链接</a></p><p>三维dp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isInterleave</span>(<span class="hljs-params">self, s1: <span class="hljs-built_in">str</span>, s2: <span class="hljs-built_in">str</span>, s3: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">i,j,k</span>):<br>            <span class="hljs-keyword">if</span> i==-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j==-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> k==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">elif</span> k==-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">return</span> i!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> dp(i-<span class="hljs-number">1</span>,j,k-<span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> s1[i]==s3[k] <span class="hljs-keyword">or</span> j!=-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> dp(i,j-<span class="hljs-number">1</span>,k-<span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> s2[j]==s3[k]<br>        <span class="hljs-keyword">return</span> dp(<span class="hljs-built_in">len</span>(s1)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(s2)-<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(s3)-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><h2 id="13-单调栈专题">(13)单调栈专题</h2><h3 id="单调栈1：每日温度">单调栈1：每日温度</h3><p><a href="https://leetcode.cn/problems/daily-temperatures/">leetcode739</a></p><p>C++:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">dailyTemperatures</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; temperatures)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; vec=temperatures;<br>        <span class="hljs-type">int</span> n=vec.<span class="hljs-built_in">size</span>();<br>        stack&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; sta;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">ret</span>(n);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>()&amp;&amp;sta.<span class="hljs-built_in">top</span>().first&lt;=vec[i])<br>                sta.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(sta.<span class="hljs-built_in">empty</span>())<br>                ret[i]=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span><br>                ret[i]=sta.<span class="hljs-built_in">top</span>().second-i;<br>            sta.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(vec[i],i));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dailyTemperatures</span>(<span class="hljs-params">self, temperatures: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        stack=[[inf,-<span class="hljs-number">1</span>]]  <span class="hljs-comment">## 单调栈，其中元素必须递减</span><br>        ret=[<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(temperatures)<br>        <span class="hljs-keyword">for</span> idx,num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(temperatures):<br>            <span class="hljs-keyword">while</span> stack[<span class="hljs-built_in">len</span>(stack)-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]&lt;num:<br>                ret[stack[<span class="hljs-built_in">len</span>(stack)-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]]=idx-stack[<span class="hljs-built_in">len</span>(stack)-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]<br>                stack.pop(<span class="hljs-built_in">len</span>(stack)-<span class="hljs-number">1</span>)<br>            stack.append([num,idx])<br>        <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><h3 id="单调栈2：下一个更大元素I">单调栈2：下一个更大元素I</h3><p><a href="https://leetcode.cn/problems/next-greater-element-i/description/">leetcode496</a></p><p>原理和上一题一样，时间复杂度为<code>O(nums1.length + nums2.length)</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nextGreaterElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums1, vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums2)</span> </span><br><span class="hljs-function">    </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hash;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums2.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            hash[nums2[i]]=i;<br>        &#125;<br>        stack&lt;<span class="hljs-type">int</span>&gt; sta;<br>        vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">ans</span>(nums2.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=nums2.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;--i)<br>        &#123;<br>            <span class="hljs-keyword">while</span>(!sta.<span class="hljs-built_in">empty</span>()&amp;&amp;sta.<span class="hljs-built_in">top</span>()&lt;=nums2[i])<br>                sta.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span>(sta.<span class="hljs-built_in">empty</span>())<br>                ans[i]=<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">else</span><br>                ans[i]=sta.<span class="hljs-built_in">top</span>();<br>            sta.<span class="hljs-built_in">push</span>(nums2[i]);<br>        &#125;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ret</span><span class="hljs-params">(nums1.size())</span></span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums1.<span class="hljs-built_in">size</span>();++i)<br>        &#123;<br>            ret[i]=ans[hash[nums1[i]]];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>courses</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cpp-STL</title>
    <link href="/2023/06/08/language/cpp-STL/"/>
    <url>/2023/06/08/language/cpp-STL/</url>
    
    <content type="html"><![CDATA[<h1>C++ STL总结new</h1><p><strong>作者：CJL sysu</strong></p><p>参考文献：</p><ol><li><p><a href="https://blog.csdn.net/weixin_41743247/article/details/90635931">C++_vector操作</a>(vector容器部分参考了)</p></li><li><p><a href="https://www.bilibili.com/video/BV1et411b73Z/?share_source=copy_web&amp;vd_source=0746909e8642dc821f4dc86699071129">B站,黑马程序员C++教学视频</a></p></li></ol><h2 id="1-vector容器">1.vector容器</h2><p>需要头文件<code>#include&lt;vector&gt;</code></p><h3 id="1-构造">(1)构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//vector构造总结</span><br>vector&lt;<span class="hljs-type">int</span>&gt;b;<br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">//定义具有10个整型元素的向量（尖括号为元素类型名，它可以是任何合法的数据类型），不具有初值，其值不确定</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>);  <span class="hljs-comment">//定义具有10个整型元素的向量，且给出的每个元素初值为1</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(b);   <span class="hljs-comment">//用向量b给向量a赋值，a的值完全等价于b的值</span><br>vector&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">a</span>(b.<span class="hljs-built_in">begin</span>(),b.<span class="hljs-built_in">begin</span>()+<span class="hljs-number">3</span>);   <span class="hljs-comment">//将向量b中从0-2（共三个）的元素赋值给a，a的类型为int型</span><br><span class="hljs-type">int</span> c[<span class="hljs-number">7</span>]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<span class="hljs-comment">//从数组中获得初值</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(c, c + <span class="hljs-number">7</span>)</span></span>;<br>vector&lt;<span class="hljs-type">int</span>&gt;a&#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span> &#125;;<span class="hljs-comment">//初始化</span><br>vector&lt;<span class="hljs-type">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span> &#125;;<span class="hljs-comment">//和上面的等价</span><br></code></pre></td></tr></table></figure><h3 id="2-基本操作">(2)基本操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span><span class="hljs-comment">//基本操作</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt; a, b;<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//b为向量，将b的0-2个元素赋值给向量a</span><br>        a.<span class="hljs-built_in">assign</span>(b.<span class="hljs-built_in">begin</span>(), b.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">3</span>);<br>        <br>        <span class="hljs-comment">//a含有4个值为2的元素</span><br>        a.<span class="hljs-built_in">assign</span>(<span class="hljs-number">4</span>, <span class="hljs-number">2</span>);<br>        <br>        <span class="hljs-comment">//返回a的最后一个元素</span><br>        a.<span class="hljs-built_in">back</span>();<br>        <br>        <span class="hljs-comment">//返回a的第一个元素</span><br>        a.<span class="hljs-built_in">front</span>();<br>        <br>        <span class="hljs-comment">//返回a的第i元素,当且仅当a存在</span><br>        a[i];<br>        <br>        <span class="hljs-comment">//清空a中的元素</span><br>        a.<span class="hljs-built_in">clear</span>();<br>        <br>        <span class="hljs-comment">//判断a是否为空，空则返回true，非空则返回false</span><br>        a.<span class="hljs-built_in">empty</span>();<br>        <br>        <span class="hljs-comment">//删除a向量的最后一个元素</span><br>        a.<span class="hljs-built_in">pop_back</span>();<br>        <br>        <span class="hljs-comment">//删除a中第一个（从第0个算起）到第二个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+3（不包括它）结束</span><br>        a.<span class="hljs-built_in">erase</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">3</span>);<br>        <br>        <span class="hljs-comment">//在a的最后一个向量后插入一个元素，其值为5</span><br>        a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);<br>        <br>        <span class="hljs-comment">//在a的第一个元素（从第0个算起）位置(前面)插入数值5,</span><br>        a.<span class="hljs-built_in">insert</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        <br>        <span class="hljs-comment">//在a的第一个元素（从第0个算起）位置（前面）插入3个数，其值都为5</span><br>        a.<span class="hljs-built_in">insert</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br>        <br>        <span class="hljs-comment">//d为数组，在a的第一个元素（从第0个元素算起）的位置（前面）插入b的第三个元素到第5个元素（不包括b+6）</span><br>        <span class="hljs-type">int</span> d[<span class="hljs-number">8</span>];<br>        a.<span class="hljs-built_in">insert</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, d + <span class="hljs-number">3</span>, d + <span class="hljs-number">6</span>);<br>        <br>        <span class="hljs-comment">//返回a中元素的个数</span><br>        a.<span class="hljs-built_in">size</span>();<br>        <br>        <span class="hljs-comment">//返回a在内存中总共可以容纳的元素个数</span><br>        a.<span class="hljs-built_in">capacity</span>();<br>        <br>        <span class="hljs-comment">//将a的现有元素个数调整至10个，多则删，少则补，其值随机</span><br>        a.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br>        <br>        <span class="hljs-comment">//将a的现有元素个数调整至10个，多则删，少则补，其值为2</span><br>        a.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>);<br>        <br>        <span class="hljs-comment">//将a的容量扩充至100，</span><br>        a.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">100</span>);<br>        <br>        <span class="hljs-comment">//b为向量，将a中的元素和b中的元素整体交换</span><br>        a.<span class="hljs-built_in">swap</span>(b);<br>        <br>        <span class="hljs-comment">//b为向量，向量的比较操作还有 != &gt;= &gt; &lt;= &lt;</span><br>        a == b;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-反向迭代">(3)反向迭代</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-comment">//反向迭代</span><br>        vector&lt;<span class="hljs-type">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;::reverse_iterator iter = a.<span class="hljs-built_in">rbegin</span>(); iter != a.<span class="hljs-built_in">rend</span>(); iter++)<br>        &#123;<br>                cout &lt;&lt; *iter &lt;&lt; endl;<span class="hljs-comment">//10 9 8 7 6 5 4 3 2 1</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-插入">(4)插入</h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>插入位置都在pos迭代器之前一个位置，返回的迭代器指向插入的第一个元素</td><td></td></tr><tr><td>在迭代器 pos 指定的位置之前插入一个新元素elem，并返回表示新插入元素位置的迭代器。</td><td><code>iterator insert(pos, elem)</code></td></tr><tr><td>在迭代器 pos 指定的位置之前插入 n 个元素 elem，并返回表示第一个新插入元素位置的迭代器。</td><td><code>iterator insert(pos, n, elem)</code></td></tr><tr><td>在迭代器 pos 指定的位置之前，插入其他容器（不仅限于vector)中位于[first, last)区域的所有元素，并返回表示第一个新插入元素位置的迭代器。</td><td><code>iterator insert(pos, first, last)</code></td></tr><tr><td>在迭代器 pos 指定的位置之前，插入初始化列表(用大括号{}括起来的多个元素，中间有逗号隔开)中所有的元素，并返回表示第一个新插入元素位置的迭代器。</td><td><code>iterator insert(pos, initlist)</code></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br>        vector&lt;<span class="hljs-type">int</span>&gt;::iterator it1 = a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>;<br>        vector&lt;<span class="hljs-type">int</span>&gt;::iterator it2 = a.<span class="hljs-built_in">insert</span>(it1, &#123; <span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-3</span> &#125;);<br>        cout &lt;&lt; *it2 &lt;&lt; endl;<span class="hljs-comment">//-1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : a)<br>        &#123;<br>                cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//1 2 3 4 -1 -2 -3 5 6 7 8 9 10</span><br>        &#125;<br>        cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5">(5)</h3><table><thead><tr><th>pop_back()</th><th>删除 vector 容器中最后一个元素，该容器的大小（size)会减 1， 但容量(capacity)不会发生改变。</th></tr></thead><tbody><tr><td>erase(pos)</td><td>删除vector容器中pos迭代器指定位置处的元素,并返回指向被删除元素下一个位置元素的迭代器<br/>该容器的大小(size)会减1,但容量(capacity)不会发生改变。</td></tr><tr><td>???swap(beg)、 pop_back()</td><td>先调用 swap() 函数交换要删除的目标元素和容器最后一个元素的位置，<br/>然后使用 pop_back) 删除该目标元素。</td></tr><tr><td>erase(beg,end)</td><td>删除vector容器中位于迭代器[beg,end)指定区域内的所有元素,并返回指向被删除区域下一个<br/>位置元素的迭代器。该容器的大小(size)会减小,但容量（capacity）不会发生改变。</td></tr><tr><td>remove()</td><td>删除容器中所有和指定元素值相等的元素,并返回指向最后一个元素下一个位置的迭代器。<br/>值得一提的是,调用该函数不会改变容器的大小和容量。</td></tr><tr><td>clear()</td><td>删除 vector 容器中所有的元素,使其变成空的 vector 容器。<br/>该函数会改变 vector 的大小(变为 0) ,但不是改变其容量。</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test04</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;a = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span> &#125;;<br>        <span class="hljs-type">int</span> size = a.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">ptrdiff_t</span> cnt = <span class="hljs-built_in">count</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">6</span>);<span class="hljs-comment">//ptrdiff==long long</span><br>        <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">remove</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-number">6</span>);<br>        cout &lt;&lt; *it &lt;&lt; endl;<span class="hljs-comment">//7</span><br>        cout &lt;&lt; cnt &lt;&lt; endl;<span class="hljs-comment">//4</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : a)<br>        &#123;<br>                cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//1 2 3 4 5 7 8 9 10 7 8 9 10</span><br>        &#125;<br>        cout &lt;&lt; endl;<br>        a.<span class="hljs-built_in">resize</span>(size - cnt);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : a)<br>        &#123;<br>                cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//1 2 3 4 5 7 8 9 10</span><br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-deque-容器">2.deque 容器</h2><p>需要头文件<code>#include&lt;deque&gt;</code></p><h3 id="1-遍历容器">(1)遍历容器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printdeque</span><span class="hljs-params">(<span class="hljs-type">const</span> deque&lt;<span class="hljs-type">int</span>&gt;&amp; d)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">for</span> (deque&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = d.<span class="hljs-built_in">begin</span>(); it != d.<span class="hljs-built_in">end</span>(); it++)<br><span class="hljs-comment">//注意迭代器也要换成带const的</span><br>        &#123;<br>                cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>                <span class="hljs-comment">//*it = 100;加const后容器中的数据不可以修改了</span><br>        &#125;<br>        cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-构造容器">(2)构造容器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        deque&lt;<span class="hljs-type">int</span>&gt;d1;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                d1.<span class="hljs-built_in">push_front</span>(i+<span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printdeque</span>(d1);<br>        <span class="hljs-comment">//区间赋值</span><br>        deque&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">d2</span>(d1.<span class="hljs-built_in">begin</span>(), d1.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">printdeque</span>(d2);<br>        deque&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">d3</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printdeque</span>(d3);<br>        deque&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">d4</span>(d3);<br>        <span class="hljs-built_in">printdeque</span>(d4);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">7</span> <span class="hljs-number">6</span> <span class="hljs-number">5</span> <span class="hljs-number">4</span> <span class="hljs-number">3</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="3-赋值操作">(3)赋值操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        deque&lt;<span class="hljs-type">int</span>&gt;d1;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                d1.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">printdeque</span>(d1);<br>        <span class="hljs-comment">//operator= 赋值</span><br>        deque&lt;<span class="hljs-type">int</span>&gt;d2;<br>        d2 = d1;<br>        <span class="hljs-built_in">printdeque</span>(d2);<br>        <span class="hljs-comment">//assign赋值</span><br>        deque&lt;<span class="hljs-type">int</span>&gt;d3;<br>        d3.<span class="hljs-built_in">assign</span>(d2.<span class="hljs-built_in">begin</span>(), d2.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">printdeque</span>(d3);<br>        deque&lt;<span class="hljs-type">int</span>&gt;d4;<br>        d4.<span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br>        <span class="hljs-built_in">printdeque</span>(d4);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">100 </span><span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h3 id="4-插入和删除">(4) 插入和删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        deque&lt;<span class="hljs-type">int</span>&gt; d1;<br>        d1.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//尾插入1</span><br>        d1.<span class="hljs-built_in">pop_back</span>()<span class="hljs-comment">//尾删</span><br>        d1.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//头插入1</span><br>        d1.<span class="hljs-built_in">pop_front</span>();<span class="hljs-comment">//头删</span><br>        <span class="hljs-comment">//插入</span><br>        <span class="hljs-built_in">printdeque</span>(d1);<span class="hljs-comment">//1 2 3 4</span><br>        d1.<span class="hljs-built_in">insert</span>(d1.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">100</span>);<span class="hljs-comment">//100 1 2 3 4</span><br>        d1.<span class="hljs-built_in">insert</span>(d1.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//100 1000 1000 1 2 3 4</span><br>        <span class="hljs-built_in">printdeque</span>(d1);<br>        <span class="hljs-comment">//按照区间进行插入</span><br>        deque&lt;<span class="hljs-type">int</span>&gt;d2;<br>        d2.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>        d2.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>        d2.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>        d1.<span class="hljs-built_in">insert</span>(d1.<span class="hljs-built_in">begin</span>(), d2.<span class="hljs-built_in">begin</span>(), d2.<span class="hljs-built_in">end</span>());<br>        <span class="hljs-built_in">printdeque</span>(d1);<span class="hljs-comment">//1 2 3</span><br>        <span class="hljs-comment">//删除</span><br>        deque&lt;<span class="hljs-type">int</span>&gt;::iterator it = d1.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br>        d1.<span class="hljs-built_in">erase</span>(it);<br>        <span class="hljs-built_in">printdeque</span>(d1);<span class="hljs-comment">// 1 3</span><br>        d1.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-built_in">printdeque</span>(d1);<span class="hljs-comment">//空</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-数据存取">(5)数据存取</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">deque d1;<br>d1[<span class="hljs-number">2</span>];<span class="hljs-comment">//d1中第二个元素</span><br>d1.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>);<span class="hljs-comment">//d1中第二个元素</span><br><span class="hljs-comment">//访问头尾元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;第一个元素为&quot;</span> &lt;&lt; d.<span class="hljs-built_in">front</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-string">&quot;最后一个元素为&quot;</span> &lt;&lt; d.<span class="hljs-built_in">back</span>() &lt;&lt; endl;<br></code></pre></td></tr></table></figure><h2 id="3-stack-容器">3.stack 容器</h2><p>需要头文件<code>#include&lt;stack&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s;<br>        <span class="hljs-comment">//特点：符合先进后出的数据结构</span><br>        s.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>        s.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">push</span>(<span class="hljs-number">40</span>);<br>        <span class="hljs-type">int</span> m = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)<br>        &#123;<br>                cout &lt;&lt; s.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<span class="hljs-comment">//40 30 20 10</span><br>                s.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-queue容器">4.queue容器</h2><p>需要头文件<code>#include&lt;queue&gt;</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age)<br>        &#123;<br>                <span class="hljs-keyword">this</span>-&gt;m_name = name;<br>                <span class="hljs-keyword">this</span>-&gt;m_age = age;<br>        &#125;<br>        string m_name;<br>        <span class="hljs-type">int</span> m_age;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        queue&lt;Person&gt;q;<br>        <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;唐僧&quot;</span>, <span class="hljs-number">30</span>)</span></span>;<br>        <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;孙悟空&quot;</span>, <span class="hljs-number">1000</span>)</span></span>;<br>        <span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-string">&quot;猪八戒&quot;</span>, <span class="hljs-number">900</span>)</span></span>;<br>        <span class="hljs-function">Person <span class="hljs-title">p4</span><span class="hljs-params">(<span class="hljs-string">&quot;沙僧&quot;</span>, <span class="hljs-number">800</span>)</span></span>;<br>        q.<span class="hljs-built_in">push</span>(p1);<br>        q.<span class="hljs-built_in">push</span>(p2);<br>        q.<span class="hljs-built_in">push</span>(p3);<br>        q.<span class="hljs-built_in">push</span>(p4);<br>        cout &lt;&lt; <span class="hljs-string">&quot;队伍人数：&quot;</span> &lt;&lt; q.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>                <span class="hljs-comment">//查看队头</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;队头：姓名&quot;</span> &lt;&lt; q.<span class="hljs-built_in">front</span>().m_name &lt;&lt; <span class="hljs-string">&quot; 年龄&quot;</span> &lt;&lt; q.<span class="hljs-built_in">front</span>().m_age &lt;&lt; endl;<br>                <span class="hljs-comment">//查看队尾</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;队尾：姓名&quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_name &lt;&lt; <span class="hljs-string">&quot; 年龄&quot;</span> &lt;&lt; q.<span class="hljs-built_in">back</span>().m_age &lt;&lt; endl;<br>                q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-string容器">5.string容器</h2><h3 id="1-构造-2">(1)构造</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string s1;<span class="hljs-comment">//默认构造,创建一个空的字符串</span><br>cout &lt;&lt; <span class="hljs-string">&quot;s1=&quot;</span> &lt;&lt; s1 &lt;&lt; endl;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* str = <span class="hljs-string">&quot;hello world!&quot;</span>;<br><span class="hljs-function">string <span class="hljs-title">s2</span><span class="hljs-params">(str)</span></span>;<span class="hljs-comment">//使用字符串s初始化</span><br>cout &lt;&lt; <span class="hljs-string">&quot;s2=&quot;</span> &lt;&lt; s2 &lt;&lt; endl;<br><span class="hljs-function">string <span class="hljs-title">s3</span><span class="hljs-params">(s2)</span></span>;<span class="hljs-comment">//使用一个string对象初始化另一个string对象</span><br>cout &lt;&lt; <span class="hljs-string">&quot;s3=&quot;</span> &lt;&lt; s3 &lt;&lt; endl;<br><span class="hljs-function">string <span class="hljs-title">s4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;b&#x27;</span>)</span></span>;<span class="hljs-comment">//使用n个字符b初始化</span><br>cout &lt;&lt; <span class="hljs-string">&quot;s4=&quot;</span> &lt;&lt; s4 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">s1</span>=<br><span class="hljs-attr">s2</span>=hello world!<br><span class="hljs-attr">s3</span>=hello world!<br><span class="hljs-attr">s4</span>=bbbbbbbbbb<br></code></pre></td></tr></table></figure><h3 id="2-赋值">(2)赋值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1;<br>str1 = <span class="hljs-string">&quot;hello world!&quot;</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;str1 =&quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>string str2 = str1;<br>cout &lt;&lt; <span class="hljs-string">&quot;str2 =&quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br><span class="hljs-comment">//string str3 = &#x27;a&#x27;;//不知为何不可用</span><br>string str4;<br>str4.<span class="hljs-built_in">assign</span>(<span class="hljs-string">&quot;Hello C艹&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str4 =&quot;</span> &lt;&lt; str4 &lt;&lt; endl;<br>string str5;<br>str5.<span class="hljs-built_in">assign</span>(<span class="hljs-string">&quot;hello C艹&quot;</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//将str4的前五个字符赋给str5</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str5 =&quot;</span> &lt;&lt; str5 &lt;&lt; endl;<br>string str6;<br>str6.<span class="hljs-built_in">assign</span>(str5);<br>cout &lt;&lt; <span class="hljs-string">&quot;str6=&quot;</span> &lt;&lt; str6 &lt;&lt; endl;<br>string str7;<br>str7.<span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str7=&quot;</span> &lt;&lt; str7 &lt;&lt; endl;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">str1</span> =hello world!<br><span class="hljs-attr">str2</span> =hello world!<br><span class="hljs-attr">str4</span> =Hello C艹<br><span class="hljs-attr">str5</span> =hello<br><span class="hljs-attr">str6</span>=hello<br><span class="hljs-attr">str7</span>=wwwwwwwwww<br></code></pre></td></tr></table></figure><h3 id="3-拼接">(3)拼接</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1 = <span class="hljs-string">&quot;我&quot;</span>;<br>str1 += <span class="hljs-string">&quot;爱编程C艹&quot;</span>;<span class="hljs-comment">//拼接字符串</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>str1 += <span class="hljs-string">&quot;!&quot;</span>;<span class="hljs-comment">//拼接字符</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>string str2 = <span class="hljs-string">&quot;我也爱C语言&quot;</span>;<br>str1 += str2;<br>cout &lt;&lt; <span class="hljs-string">&quot;str2=&quot;</span> &lt;&lt; str2 &lt;&lt; endl;<br>string str3 = <span class="hljs-string">&quot;I&quot;</span>;<br>str3.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;love&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>str3.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;gameabcde&quot;</span>, <span class="hljs-number">4</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>str3.<span class="hljs-built_in">append</span>(str2);<br>cout &lt;&lt; <span class="hljs-string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>str3.<span class="hljs-built_in">append</span>(str2, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>);<span class="hljs-comment">//从str2的第三个字符开始，截取4个加在末尾，第二个参数为起始字符的位置(位置从0开始计算)，第三个参数为字符的长度</span><br><span class="hljs-comment">//中文字符占2个位置，英文字符占1个位置</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str3=&quot;</span> &lt;&lt; str3 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">str1</span>=我爱编程C艹<br><span class="hljs-attr">str1</span>=我爱编程C艹!<br><span class="hljs-attr">str2</span>=我也爱C语言<br><span class="hljs-attr">str3</span>=Ilove<br><span class="hljs-attr">str3</span>=Ilovegame<br><span class="hljs-attr">str3</span>=Ilovegame我也爱C语言<br><span class="hljs-attr">str3</span>=Ilovegame我也爱C语言爱C语言<br></code></pre></td></tr></table></figure><h3 id="4-查找和替换">(4)查找和替换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1 = <span class="hljs-string">&quot;abcdefgdefg&quot;</span>;<br><span class="hljs-type">int</span> pos1 = str1.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;de&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;pos1=&quot;</span> &lt;&lt; pos1 &lt;&lt; endl;<br><span class="hljs-type">int</span> pos2 = str1.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;df&quot;</span>);<span class="hljs-comment">//找不到则返回-1</span><br>cout &lt;&lt; <span class="hljs-string">&quot;pos2=&quot;</span> &lt;&lt; pos2 &lt;&lt; endl;<br><span class="hljs-comment">//rfind是最后一次出现的位置，find是第一次出现的位置</span><br><span class="hljs-type">int</span> pos3 = str1.<span class="hljs-built_in">rfind</span>(<span class="hljs-string">&quot;de&quot;</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;pos3=&quot;</span> &lt;&lt; pos3 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">pos1</span><span class="hljs-operator">=</span><span class="hljs-number">3</span><br><span class="hljs-attribute">pos2</span><span class="hljs-operator">=</span>-<span class="hljs-number">1</span><br><span class="hljs-attribute">pos3</span><span class="hljs-operator">=</span><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1 = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br>str1.<span class="hljs-built_in">replace</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&quot;1111&quot;</span>);<span class="hljs-comment">//从1号位置起 3个字符 替换为“1111”</span><br>cout &lt;&lt; <span class="hljs-string">&quot;str1=&quot;</span> &lt;&lt; str1 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">str1</span><span class="hljs-operator">=</span>a1111efg<br></code></pre></td></tr></table></figure><h3 id="5-字符串比较">(5)字符串比较</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1 = <span class="hljs-string">&quot;hfllo&quot;</span>;<br>string str2 = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">if</span> (str1.<span class="hljs-built_in">compare</span>(str2) == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;str1等于str2&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str1.<span class="hljs-built_in">compare</span>(str2) &gt; <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;str1大于str2&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;str1小于str2&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<span class="hljs-comment">//通过逐字符比较ASCII值，大于为1，小于为-1，等于为0,以第一个不一样的字符为准</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">str1大于str2<br></code></pre></td></tr></table></figure><h3 id="6-字符存取">(6)字符存取</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; str[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>cout &lt;&lt; str.<span class="hljs-built_in">at</span>(i) &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//改字符</span><br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;x&#x27;</span>;<br>str.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;y&#x27;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">h</span> e l l o<br><span class="hljs-built_in">h</span>  e  l  l  o<br>xyllo<br></code></pre></td></tr></table></figure><h3 id="7-插入和删除">(7)插入和删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>string str1=<span class="hljs-string">&quot;abcdefgh&quot;</span>;<br>str1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;xxx&quot;</span>);<br>cout &lt;&lt; str1 &lt;&lt; endl;<br>str1.<span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//删去从2开始的3个字符</span><br>cout &lt;&lt; str1 &lt;&lt; endl;<br>str1.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;x&#x27;</span>);<br>cout &lt;&lt; str1 &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">abxxxcdefgh</span><br><span class="hljs-attribute">abcdefgh</span><br><span class="hljs-attribute">abxxxcdefgh</span><br></code></pre></td></tr></table></figure><h3 id="8-子串">(8)子串</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;输入邮箱账号以登录游戏&quot;</span> &lt;&lt; endl;<br>string email;<br><span class="hljs-comment">//cin &gt;&gt; email;</span><br>email = <span class="hljs-string">&quot;handsome_boy@mail2.sysu.edu.cn&quot;</span>;<br><span class="hljs-type">int</span> pos = email.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27;@&#x27;</span>);<br><span class="hljs-keyword">if</span> (pos == <span class="hljs-number">-1</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;邮箱账号有误&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>string name;<br>name = email.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, pos);<br>cout &lt;&lt; <span class="hljs-string">&quot;你好，&quot;</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot;，欢迎进入游戏&quot;</span> &lt;&lt; endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">输入邮箱账号以登录游戏<br>你好，handsome_boy，欢迎进入游戏<br></code></pre></td></tr></table></figure><h3 id="9-string容器其他">(9)string容器其他</h3><ol><li>string s;  // 生成一个空字符串s</li><li>string s(str); // 拷贝构造函数生成str的复制品</li><li>string s(str, stridx);  // 将字符串str内&quot;始于位置stridx&quot;的部分当作字符串的初值</li><li>string s(str, stridx, strlen); // 将字符串str内&quot;始于stridx且长度顶多strlen&quot;的部分作为字符串的初值</li><li>string s(cstr);  // 将C字符串（以NULL结束）作为s的初值</li><li>string s(chars, chars_len);  // 将C字符串前chars_len个字符作为字符串s的初值。</li><li>string s(num, ‘c’);  // 生成一个字符串，包含num个c字符</li><li>string s(“value”);  string s = “value”;  // 将s初始化为一个字符串字面值副本</li><li>string s(begin, end);  // 以区间begin/end(不包含end)内的字符作为字符串s的初值</li><li>s.~string();  //销毁所有字符，释放内存</li></ol><p>string s;</p><ol><li>s.empty();  // s为空串 返回true</li><li>s.size();  // 返回s中字符个数 类型应为：string::size_type</li><li>s[n];  // 从0开始相当于下标访问</li><li>s1+s2;  // 把s1和s2连接成新串 返回新串</li><li>s1=s2;  // 把s1替换为s2的副本</li><li>v1==v2;  // 比较，相等返回true</li><li><code>!=, &lt;, &lt;=, &gt;, &gt;=</code>  惯有操作 任何一个大写字母都小于任意的小写字母</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-string">&quot;abc&quot;</span>)</span></span>;<br>cout &lt;&lt; s &lt;&lt; endl;<br>cout &lt;&lt; s.<span class="hljs-built_in">size</span>() &lt;&lt; endl;<br>cout &lt;&lt; <span class="hljs-built_in">strlen</span>(s.<span class="hljs-built_in">c_str</span>()) &lt;&lt; endl;<br>s.~<span class="hljs-built_in">basic_string</span>();<br>cout &lt;&lt; s &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">abc</span><br><span class="hljs-number">3</span><br><span class="hljs-number">3</span><br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>stringstream sstream;<br>string strresult;<br><span class="hljs-type">int</span> val = <span class="hljs-number">12345</span>;<br>sstream &lt;&lt; val;<br>sstream &gt;&gt; strresult;<br>cout &lt;&lt; strresult &lt;&lt; endl;<br>sstream.<span class="hljs-built_in">clear</span>();<br>sstream &lt;&lt; <span class="hljs-string">&quot;4321&quot;</span>;<br>sstream &gt;&gt; val;<br>cout &lt;&lt; val &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">12345</span><br><span class="hljs-number">4321</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//把string字符串转化为C风格的字符串</span><br>string s = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-type">char</span> str[<span class="hljs-number">1000</span>];<br><span class="hljs-built_in">strcpy</span>(str, s.<span class="hljs-built_in">c_str</span>());<br>str[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;p&#x27;</span>;<br>str[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;u&#x27;</span>;<br>cout &lt;&lt; str &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pbcdeug</span><br></code></pre></td></tr></table></figure><h2 id="6-set容器和multiset容器">6.set容器和multiset容器</h2><p>需要头文件<code>#include&lt;set&gt;</code></p><p>set不允许容器中有重复的元素</p><p>multiset允许容器中有重复的元素</p><p>其他操作基本一致</p><h3 id="1-遍历容器-2">(1)遍历容器</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printset</span><span class="hljs-params">(<span class="hljs-type">const</span> set&lt;<span class="hljs-type">int</span>&gt;&amp;s)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;set数组为空&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (set&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = s.<span class="hljs-built_in">begin</span>(); it != s.<span class="hljs-built_in">end</span>(); it++)<br>                cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printmultiset</span><span class="hljs-params">(<span class="hljs-type">const</span> multiset&lt;<span class="hljs-type">int</span>&gt;&amp; m)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;multiset数组为空&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (multiset&lt;<span class="hljs-type">int</span>&gt;::const_iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>                cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-插入和删除">(2)插入和删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        set&lt;<span class="hljs-type">int</span>&gt;s;<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">50</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">60</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">90</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>); <br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">110</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">120</span>);<br>        <span class="hljs-built_in">printset</span>(s);<br>        set&lt;<span class="hljs-type">int</span>&gt;::iterator it = s.<span class="hljs-built_in">begin</span>();<br>        set&lt;<span class="hljs-type">int</span>&gt;::iterator it2;<br>        it2 = s.<span class="hljs-built_in">erase</span>(++++it);<span class="hljs-comment">//删除迭代器所指元素，返回下一个元素的迭代器</span><br>        <span class="hljs-built_in">printset</span>(s);<br>        set&lt;<span class="hljs-type">int</span>&gt;::iterator it1 = s.<span class="hljs-built_in">end</span>();<br>        s.<span class="hljs-built_in">erase</span>(it2, ----it1);<span class="hljs-comment">//删除区间[it2,----it1)的所有元素，返回下一个元素的迭代器</span><br>        <span class="hljs-built_in">printset</span>(s);<br>        s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">110</span>);<span class="hljs-comment">//删除值为110的元素</span><br>        <span class="hljs-built_in">printset</span>(s);<br>        s.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空set容器</span><br>        <span class="hljs-built_in">printset</span>(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">60</span> <span class="hljs-number">70</span> <span class="hljs-number">80</span> <span class="hljs-number">90</span> <span class="hljs-number">100</span> <span class="hljs-number">110</span> <span class="hljs-number">120</span><br><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">60</span> <span class="hljs-number">70</span> <span class="hljs-number">80</span> <span class="hljs-number">90</span> <span class="hljs-number">100</span> <span class="hljs-number">110</span> <span class="hljs-number">120</span><br><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">110</span> <span class="hljs-number">120</span><br><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">120</span><br><span class="hljs-attribute">set</span>数组为空<br></code></pre></td></tr></table></figure><h3 id="3-查找和统计">(3)查找和统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        set&lt;<span class="hljs-type">int</span>&gt;s;<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">60</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">110</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">120</span>);<br>        <span class="hljs-built_in">printset</span>(s);<br>        set&lt;<span class="hljs-type">int</span>&gt;::iterator it1;<br>        it1 = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">70</span>);<span class="hljs-comment">//查找70是否存在，若存在，返回该键的元素的迭代器，若不存在，返回set.end()</span><br>        <span class="hljs-keyword">if</span> (it1 != s.<span class="hljs-built_in">end</span>())   <br>                cout &lt;&lt; *it1 &lt;&lt; endl; <br>        <span class="hljs-keyword">else</span>                     <br>                cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-type">int</span> num = s.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>        cout &lt;&lt; num &lt;&lt; endl;<span class="hljs-comment">//对于set而言，统计的结果只有0和1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">60</span> <span class="hljs-number">70</span> <span class="hljs-number">80</span> <span class="hljs-number">100</span> <span class="hljs-number">110</span> <span class="hljs-number">120</span><br><span class="hljs-number">70</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="4-set与multiset">(4)set与multiset</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        multiset&lt;<span class="hljs-type">int</span>&gt;s;<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">60</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">110</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">120</span>);<br>        <span class="hljs-built_in">printmultiset</span>(s);<br>        multiset&lt;<span class="hljs-type">int</span>&gt;::iterator it1;<br>        it1 = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">70</span>);<br><span class="hljs-comment">//查找70是否存在，若存在，返回该键的元素的迭代器，若不存在，返回set.end()</span><br>        <span class="hljs-keyword">if</span> (it1 != s.<span class="hljs-built_in">end</span>())  <br>                cout &lt;&lt; *(--it1) &lt;&lt; endl;  <br>        <span class="hljs-keyword">else</span> <br>                cout &lt;&lt; <span class="hljs-string">&quot;未找到元素&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-type">int</span> num = s.<span class="hljs-built_in">count</span>(<span class="hljs-number">30</span>);<br>        cout &lt;&lt; num &lt;&lt; endl;<span class="hljs-comment">//对于multiset而言，统计的结果不只有0和1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">60</span> <span class="hljs-number">70</span> <span class="hljs-number">70</span> <span class="hljs-number">80</span> <span class="hljs-number">100</span> <span class="hljs-number">110</span> <span class="hljs-number">120</span><br><span class="hljs-attribute">60</span><br><span class="hljs-attribute">2</span><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        set&lt;<span class="hljs-type">int</span>&gt;s;<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">20</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">40</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">30</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">60</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">80</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">70</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">100</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">110</span>);<br>        s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">120</span>);<br>        <span class="hljs-built_in">printset</span>(s);<br>        pair&lt;set&lt;<span class="hljs-type">int</span>&gt;::iterator, <span class="hljs-type">bool</span>&gt; ret = s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (ret.second)<br>                cout &lt;&lt; <span class="hljs-string">&quot;第一次插入成功&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span> <br>                cout &lt;&lt; <span class="hljs-string">&quot;第一次插入失败&quot;</span> &lt;&lt; endl; <br>        pair&lt;set&lt;<span class="hljs-type">int</span>&gt;::iterator, <span class="hljs-type">bool</span>&gt; ret1 = s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (ret1.second)<br>                cout &lt;&lt; <span class="hljs-string">&quot;第二次插入成功&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;第二次插入失败&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">20<span class="hljs-number"> 30 </span>40<span class="hljs-number"> 60 </span>70<span class="hljs-number"> 80 </span>100<span class="hljs-number"> 110 </span>120<br>第一次插入成功<br>第二次插入失败<br></code></pre></td></tr></table></figure><h2 id="7-map和multimap容器">7.map和multimap容器</h2><p>需要头文件<code>#include&lt;map&gt;</code></p><p>map中所有元素都是pair</p><p>pair中第一个元素为key(键值)，起到索引作用，第二个元素为value（实值）</p><p>所有元素都会根据元素键值自动排序</p><p>map/multimap属于关联式容器，底层结构是用二叉树实现</p><p>优点：可以根据key值快速找到value值</p><p>map和multimap区别:</p><p>map不允许容器中有重复key值元素</p><p>multimap允许容器中有重复key值元素</p><h3 id="（1）遍历">（1）遍历</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printmap</span><span class="hljs-params">(<span class="hljs-type">const</span> map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&amp; m)</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">empty</span>())<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;map容器为空&quot;</span> &lt;&lt; endl;<br>                <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::const_iterator it = m.<span class="hljs-built_in">begin</span>(); it != m.<span class="hljs-built_in">end</span>(); it++)<br>                cout &lt;&lt; <span class="hljs-string">&quot;学号：&quot;</span> &lt;&lt; (*it).first &lt;&lt; <span class="hljs-string">&quot;    分数：&quot;</span> &lt;&lt; it-&gt;second &lt;&lt; endl;<br>        cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;m;<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">95</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">73</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">81</span>)）;   <br><span class="hljs-built_in">printmap</span>(m);<span class="hljs-comment">//会按照key值（学号）自动排序</span><br><br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;<span class="hljs-built_in">m2</span>(m);<span class="hljs-comment">//拷贝构造</span><br><span class="hljs-built_in">printmap</span>(m2);<br>map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m3;<br>m3 = m2;<br><span class="hljs-built_in">printmap</span>(m3);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs">学号：1    分数：60<br>学号：2    分数：95<br>学号：3    分数：81<br>学号：4    分数：73<br><br>学号：1    分数：60<br>学号：2    分数：95<br>学号：3    分数：81<br>学号：4    分数：73<br><br>学号：1    分数：60<br>学号：2    分数：95<br>学号：3    分数：81<br>学号：4    分数：73<br></code></pre></td></tr></table></figure><h3 id="2-大小和交换">(2)大小和交换</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ma;<br>ma.<span class="hljs-built_in">size</span>();<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;ma1;<br>ma.<span class="hljs-built_in">swap</span>(ma1);<br></code></pre></td></tr></table></figure><h3 id="3-插入和删除">(3)插入和删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m;<br>        <span class="hljs-comment">//1</span><br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">95</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">73</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">81</span>));<br>        <span class="hljs-comment">//2</span><br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>));<br>        <span class="hljs-comment">//3</span><br>        m.<span class="hljs-built_in">insert</span>(map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::<span class="hljs-built_in">value_type</span>(<span class="hljs-number">6</span>, <span class="hljs-number">30</span>));<br>        <span class="hljs-comment">//4</span><br>        m[<span class="hljs-number">7</span>] = <span class="hljs-number">40</span>;<br><span class="hljs-comment">//这种插数方法和其他的不同在于可以修改已经插入的key对应的value</span><br>        <span class="hljs-built_in">printmap</span>(m);<br>        <span class="hljs-comment">//删除</span><br>        m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(), ++++m.<span class="hljs-built_in">begin</span>());<br>        <span class="hljs-built_in">printmap</span>(m);<br>        m.<span class="hljs-built_in">erase</span>(<span class="hljs-number">4</span>);<span class="hljs-comment">//按照key删除</span><br>        <span class="hljs-built_in">printmap</span>(m);<br>        m.<span class="hljs-built_in">clear</span>();<br>        <span class="hljs-built_in">printmap</span>(m);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs">学号：1    分数：60<br>学号：2    分数：10<br>学号：3    分数：95<br>学号：4    分数：73<br>学号：5    分数：81<br>学号：6    分数：30<br>学号：7    分数：40<br><br>学号：3    分数：95<br>学号：4    分数：73<br>学号：5    分数：81<br>学号：6    分数：30<br>学号：7    分数：40<br><br>学号：3    分数：95<br>学号：5    分数：81<br>学号：6    分数：30<br>学号：7    分数：40<br></code></pre></td></tr></table></figure><h3 id="4-查找与统计">(4)查找与统计</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;m;<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">3</span>, <span class="hljs-number">95</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">73</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">81</span>));<br>        m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">84</span>));<br>        map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;::iterator it;<br>        it = m.<span class="hljs-built_in">find</span>(<span class="hljs-number">4</span>);<br>        <span class="hljs-keyword">if</span> (it != m.<span class="hljs-built_in">end</span>())<br>                cout &lt;&lt; it-&gt;second &lt;&lt; endl;<span class="hljs-comment">//73</span><br>        <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;编号不存在&quot;</span> &lt;&lt; endl;<br>        cout &lt;&lt; m.<span class="hljs-built_in">count</span>(<span class="hljs-number">4</span>) &lt;&lt; endl;<span class="hljs-comment">//1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-priority-queue">8.priority_queue</h2><p><a href="http://t.csdn.cn/eGI2S">参考文献</a></p><p>头文件<code>#incldue&lt;queue&gt;</code></p><p><code>priority_queue</code>是一个元素有序排列的队列。默认队列头部的元素优先级最高。因为它是一个队列，所以只能访问第一个元素，这也意味着优先级最高的元素总是第一个被处理。</p><p>它能够实现常数时间的（默认）最大元素查找，对数代价的插入与释出</p><h3 id="1-构造-3">(1)构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue&lt;<span class="hljs-type">int</span>&gt; pq1;<br>priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq2;<br></code></pre></td></tr></table></figure><p><code>priority_queue </code>模板有 3 个参数，其中两个有默认的参数；</p><p>第一个参数是存储对象的类型，</p><p>第二个参数是存储元素的底层容器，</p><p>第三个参数是函数对象，它定义了一个用来决定元素顺序的断言。</p><h2 id="2-元素访问">(2)元素访问</h2><p>top()访问栈顶元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,less&lt;<span class="hljs-type">int</span>&gt;&gt; pq1;<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">40</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>    cout&lt;&lt;pq1.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">40<br></code></pre></td></tr></table></figure><h2 id="2-容量">(2)容量</h2><p>empty()判断是否为空</p><p>size()返回容器大小</p><h2 id="3-修改器">(3)修改器</h2><p>push插入元素并排序</p><p>pop删除队首元素并排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt; pq1;<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">40</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;The elements of the priority queue are : &quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">while</span>(!pq1.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout&lt;&lt;pq1.<span class="hljs-built_in">top</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        pq1.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">The</span> elements of the priority queue are : <br><span class="hljs-attribute">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>如果添加<code>greater&lt;int&gt;</code>仿函数,相对小的数优先级更高</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>,vector&lt;<span class="hljs-type">int</span>&gt;,greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq1;<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">10</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">40</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">20</span>);<br>    pq1.<span class="hljs-built_in">push</span>(<span class="hljs-number">30</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;The elements of the priority queue are : &quot;</span>&lt;&lt;endl;<br>    <span class="hljs-keyword">while</span>(!pq1.<span class="hljs-built_in">empty</span>())<br>    &#123;<br>        cout&lt;&lt;pq1.<span class="hljs-built_in">top</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        pq1.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">The</span> elements of the priority queue are : <br><span class="hljs-attribute">10</span> <span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h2 id="9-STL常用算法">9.STL常用算法</h2><p>以下除特别说明，都需要<code>#include&lt;algorithm&gt;</code>头文件</p><h3 id="（1）for-each和transform">（1）for_each和transform</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                v.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt;vtarget;<br>        vtarget.<span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-built_in">transform</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), vtarget.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">Transform</span>());<br><span class="hljs-comment">//101 102 103 104 105 106 107 108 109 110</span><br>        for_each(vtarget.<span class="hljs-built_in">begin</span>(), vtarget.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">myprint</span>());<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>find</th><th>查找元素</th></tr></thead><tbody><tr><td>find_if</td><td>按条件查找元素</td></tr><tr><td>adjacent_find</td><td>查找相邻重复元素</td></tr><tr><td>binary_search</td><td>二分查找法</td></tr><tr><td>count</td><td>统计元素个数</td></tr><tr><td>count_if</td><td>按条件统计元素个数</td></tr></tbody></table><h3 id="2-find">(2)find</h3><p>功能描述:.查找指定元素, 找到返回指定元素的选代器, 找不到返回结束选代器end()</p><p>函数原型 :</p><p>find(iterator beg, iterator end, value);</p><p>按值查找元素,找到返回指定位置选代器,找不到返回结束选代器位置</p><p>beg 开始迭代器</p><p>end结束迭代器</p><p>value查找的元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>        &#123;<br>                v.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>())<br>        &#123;<br>                cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;找到：&quot;</span> &lt;&lt; *it &lt;&lt; endl;<span class="hljs-comment">//找到：5</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-find-if">(3)find_if</h3><p>功能描述:</p><p>按条件查找元素</p><p>函数原型:.find_if(iterator beg, iterator end, _Pred);</p><p>按值查找元素,找到返回指定位置选代器,找不到返回结束选代器位置</p><p>beg开始迭代器</p><p>end结束迭代器</p><p>_Pred函数或者谓词(返回bool类型的仿函数)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mycompare</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-keyword">return</span> a &gt; <span class="hljs-number">5</span>;<br>        &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        vector&lt;<span class="hljs-type">int</span>&gt;v;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>                v.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>        vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">mycompare</span>());<br>        <span class="hljs-keyword">if</span> (it == v.<span class="hljs-built_in">end</span>())<br>                cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>                cout &lt;&lt; <span class="hljs-string">&quot;找到&quot;</span> &lt;&lt; *it &lt;&lt; endl;<span class="hljs-comment">//找到6</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-binary-search">(4)binary_search</h3><p>查找指定的元素，查到返回true，否则返回false</p><p>注意：在无序序列中不可用,因为结果会出错</p><p>降序也不行，只能用于升序序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">6</span>))<br>cout &lt;&lt; <span class="hljs-string">&quot;找到了&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br>&#125;<span class="hljs-comment">//找到了</span><br></code></pre></td></tr></table></figure><h3 id="5-adjacent-find">(5)adjacent_find</h3><p>查找相邻重复元素，返回相邻元素的第一个位置的迭代器</p><p>少用，但是考试会考</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator pos = <span class="hljs-built_in">adjacent_find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">if</span> (pos == v.<span class="hljs-built_in">end</span>())<br>cout &lt;&lt; <span class="hljs-string">&quot;未找到&quot;</span> &lt;&lt; endl;<br><span class="hljs-keyword">else</span><br>cout &lt;&lt; *pos &lt;&lt; endl;<br>&#125;<span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure><h3 id="6-count">(6)count</h3><p>统计元素个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">int</span> cou = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>);<br>cout &lt;&lt; cou &lt;&lt; endl;<br>&#125;<span class="hljs-comment">//输出3</span><br></code></pre></td></tr></table></figure><h3 id="7-count-if">(7)count_if</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">greaterfive</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a &gt; <span class="hljs-number">5</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-type">int</span> cou = <span class="hljs-built_in">count_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greaterfive</span>());<br>cout &lt;&lt; cou &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4<br></code></pre></td></tr></table></figure><h3 id="8-sort排序算法">(8)sort排序算法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>,<span class="hljs-number">40</span>,<span class="hljs-number">90</span>&#125;;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span> <span class="hljs-number">40</span> <span class="hljs-number">90</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">20</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">90</span><br><span class="hljs-symbol">90 </span><span class="hljs-number">50</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="9-random-shuffle">(9)random_shuffle</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">srand</span>((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br><span class="hljs-built_in">random_shuffle</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//随机打乱v的排序</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-merge">(10)merge</h3><p>可以把两个有序序列合在一起，形成一个新的有序序列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v1;<br>vector&lt;<span class="hljs-type">int</span>&gt;v2;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>&#123;<br>v1.<span class="hljs-built_in">push_back</span>(i);<br>v2.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt;vTarget;<span class="hljs-comment">//目标容器</span><br>vTarget.<span class="hljs-built_in">resize</span>(v1.<span class="hljs-built_in">size</span>() + v2.<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">merge</span>(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), vTarget.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="11-reverse">(11)reverse</h3><p>逆序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>&#125;;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">20 </span><span class="hljs-number">50</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="12-copy将容器内指定范围的元素拷贝到另一容器中">(12)copy将容器内指定范围的元素拷贝到另一容器中</h3><p>注意：新容器需要预留空间</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt;v2;<br>v2.<span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>());<br><span class="hljs-built_in">copy</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), v2.<span class="hljs-built_in">begin</span>());<br>for_each(v2.<span class="hljs-built_in">begin</span>(), v2.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="13-replace和replace-if">13.replace和replace_if</h3><p>replace将容器内指定范围的旧元素修改为新元素</p><p>replace_if将区间内满足条件替换成指定元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">compare</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a &gt;= <span class="hljs-number">40</span>;<br>&#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>&#125;;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">replace</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">4</span>, <span class="hljs-number">30</span>, <span class="hljs-number">300</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">replace_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">compare</span>(), <span class="hljs-number">66</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">300</span> <span class="hljs-number">40</span> <span class="hljs-number">300</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">66</span> <span class="hljs-number">66</span> <span class="hljs-number">66</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">66</span> <span class="hljs-number">66</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="14-swap">(14)swap</h3><p>交换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-comment">//swap交换两个同种类型容器的元素</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>&#125;;<br>vector&lt;<span class="hljs-type">int</span>&gt;v1;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>v1.<span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">1</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">swap</span>(v, v1);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span><span class="hljs-comment">//也可以swap两个数</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>, b = <span class="hljs-number">4</span>;<br><span class="hljs-built_in">swap</span>(a, b);<br>cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;<span class="hljs-comment">//4 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="15-accumulate和fill">(15)accumulate和fill</h3><p>需要头文件<code>#include&lt;numeric&gt;</code></p><p>accumulate计算容器元素累计总和</p><p>fill向容器中添加元素</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v&#123;<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>,<span class="hljs-number">20</span>&#125;;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-type">int</span> total=<span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br><span class="hljs-comment">//第三个参数表示起始累加值，0表示最后结果加0</span><br>cout &lt;&lt; total &lt;&lt; endl;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v;<br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-built_in">fill</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>() - <span class="hljs-number">2</span>, <span class="hljs-number">6</span>);<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">30</span> <span class="hljs-number">20</span> <span class="hljs-number">10</span> <span class="hljs-number">30</span> <span class="hljs-number">40</span> <span class="hljs-number">50</span> <span class="hljs-number">20</span><br><span class="hljs-number">2800</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">6 </span><span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">6</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="16-交集-并集-差集">(16)交集,并集,差集</h3><p>set_intersection求两个容器的交集</p><p>set_union并集</p><p>set_difference差集</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myprint</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span></span><br><span class="hljs-function"></span>&#123;<br>cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;v=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;v1=&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>,<span class="hljs-number">13</span>,<span class="hljs-number">14</span>,<span class="hljs-number">15</span>&#125;;<br>for_each(v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), myprint);<br>cout &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;vTarget;<br>vTarget.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">min</span>(v.<span class="hljs-built_in">size</span>(), v1.<span class="hljs-built_in">size</span>()));<span class="hljs-comment">//min是algorithm的算法</span><br>cout &lt;&lt; <span class="hljs-string">&quot;intersection:&quot;</span> &lt;&lt; endl;<br>vector&lt;<span class="hljs-type">int</span>&gt;::iterator itEnd=<span class="hljs-built_in">set_intersection</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(),vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd , myprint);<span class="hljs-comment">//itEnd为数据结束的位置，可避免输出大量0</span><br>cout &lt;&lt; endl;<br><span class="hljs-comment">//</span><br>vTarget.<span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>() + v1.<span class="hljs-built_in">size</span>());<br>cout &lt;&lt; <span class="hljs-string">&quot;union:&quot;</span> &lt;&lt; endl;<span class="hljs-comment">//注意：使用set_union必须保证两个集合都是有序序列</span><br>itEnd=<span class="hljs-built_in">set_union</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, myprint);<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//</span><br>vTarget.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">max</span>(v.<span class="hljs-built_in">size</span>(), v1.<span class="hljs-built_in">size</span>()));<span class="hljs-comment">//max是algorithm的算法</span><br>cout &lt;&lt; <span class="hljs-string">&quot;difference between v &amp; v1:&quot;</span> &lt;&lt; endl;<br>itEnd=<span class="hljs-built_in">set_difference</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), v1.<span class="hljs-built_in">begin</span>(), v1.<span class="hljs-built_in">end</span>(), vTarget.<span class="hljs-built_in">begin</span>());<br><span class="hljs-comment">//v和v1的差集表示在v中不在v1中的部分</span><br>for_each(vTarget.<span class="hljs-built_in">begin</span>(), itEnd, myprint);<br>cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span><br><span class="hljs-attribute">intersection</span>:<br><span class="hljs-attribute">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span><br><span class="hljs-attribute">union</span>:<br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span> <span class="hljs-number">10</span> <span class="hljs-number">11</span> <span class="hljs-number">12</span> <span class="hljs-number">13</span> <span class="hljs-number">14</span> <span class="hljs-number">15</span><br><span class="hljs-attribute">difference</span> between v &amp; v1:<br><span class="hljs-attribute">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="17-next-permutation">(17)next_permutation</h3><p>全排列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt;vec;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)<br>&#123;<br>vec.<span class="hljs-built_in">emplace_back</span>(i + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : vec)<br>cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">next_permutation</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>()))<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : vec)<br>cout &lt;&lt; k &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>cout &lt;&lt; endl;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>程序输出：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">2</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="18-lower-bound和upper-bound">(18)lower_bound和upper_bound</h3><p>lower_bound( )和upper_bound( )都是利用二分查找的方法在一个排好序的数组中进行查找的。</p><p>在从小到大的排序数组中，lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。</p><p>也可以用于vector容器，返回值是迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100000</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> INF = <span class="hljs-number">2</span> * <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span>) + <span class="hljs-number">10</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LL long long</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> num[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">15</span>,<span class="hljs-number">34</span> &#125;;<br><span class="hljs-built_in">sort</span>(num, num + <span class="hljs-number">6</span>);                           <span class="hljs-comment">//按从小到大排序 </span><br><span class="hljs-type">int</span> pos1 = <span class="hljs-built_in">lower_bound</span>(num, num + <span class="hljs-number">6</span>, <span class="hljs-number">7</span>) - num;    <span class="hljs-comment">//返回数组中第一个大于或等于被查数的值 </span><br><span class="hljs-type">int</span> pos2 = <span class="hljs-built_in">upper_bound</span>(num, num + <span class="hljs-number">6</span>, <span class="hljs-number">7</span>) - num;    <span class="hljs-comment">//返回数组中第一个大于被查数的值</span><br>cout &lt;&lt; pos1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num[pos1] &lt;&lt; endl;<span class="hljs-comment">//3 7</span><br>cout &lt;&lt; pos2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num[pos2] &lt;&lt; endl;<span class="hljs-comment">//4 15</span><br><span class="hljs-built_in">sort</span>(num, num + <span class="hljs-number">6</span>, cmd);                      <span class="hljs-comment">//按从大到小排序</span><br><span class="hljs-type">int</span> pos3 = <span class="hljs-built_in">lower_bound</span>(num, num + <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()) - num;  <span class="hljs-comment">//返回数组中第一个小于或等于被查数的值 </span><br><span class="hljs-type">int</span> pos4 = <span class="hljs-built_in">upper_bound</span>(num, num + <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()) - num;  <span class="hljs-comment">//返回数组中第一个小于被查数的值 </span><br>cout &lt;&lt; pos3 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num[pos3] &lt;&lt; endl;<span class="hljs-comment">//2 7</span><br>cout &lt;&lt; pos4 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; num[pos4] &lt;&lt; endl;<span class="hljs-comment">//3 4</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>programing languages</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/2023/04/16/markdown/index/"/>
    <url>/2023/04/16/markdown/index/</url>
    
    <content type="html"><![CDATA[<h1>Markdown语法</h1><p>作者CJL_sysu</p><p><a href="https://www.bilibili.com/video/BV1hG411p7fX/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d972a716696a84ec73bd13ed88c0aa99">参考视频</a></p><h2 id="1-标题">1.标题</h2><p><code># 标题</code></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>注:#后面必须有一个空格<br><br></code></pre></td></tr></table></figure><h2 id="2-强调">2.强调</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">**欢迎报考大山中学!**</span><br><span class="hljs-emphasis">__欢迎报考中山大学!__</span><br></code></pre></td></tr></table></figure><p><strong>欢迎报考中山大学</strong></p><p><strong>欢迎报考中山大学</strong></p><p>或者选中要强调的文字按下<code>Ctrl</code>+<code>B</code></p><h2 id="3-斜体">3.斜体</h2><p><code>*欢迎各位大佬来浇浇我各种知识*</code></p><p><code>_欢迎各位大佬来浇浇我各种知识_</code></p><p>或者选中想要强调的文字按下<code>Ctrl</code>+<code>I</code></p><p><em>欢迎各位大佬来浇浇我各种知识</em></p><p>斜体并强调用<code>***</code>或<code>___</code>包围</p><p><em><strong>斜体并强调</strong></em></p><h2 id="4-删除线">4.删除线</h2><p><code>~~我宣布个事儿,我是shabi~~</code></p><p><s>我宣布个事儿,我是傻逼</s></p><h2 id="5-高亮">5.*高亮</h2><p>(用==包围)</p><p><strong>注意:这是扩展语法,仅typora支持</strong></p><p><code>==我是黄色==</code></p><h2 id="6-代码">6.代码</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`sudo rm -rf /*`</span><br></code></pre></td></tr></table></figure><p><code>sudo rm -rf /*</code>(没事别乱敲这个)</p><h2 id="7-代码块">7.代码块</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string">代码块</span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><br></code></pre></td></tr></table></figure><h2 id="8-引用">8.引用</h2><p>[<code>&gt;</code>+<code>空格</code> 前置]</p><p>引用是可以嵌套的</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&gt; <span class="hljs-number">24</span>岁,是学生<br><span class="hljs-meta prompt_">&gt;&gt;</span> 学生特有的无处不在(恼)<br></code></pre></td></tr></table></figure><blockquote><p>24岁,是学生</p><blockquote><p>学生特有的无处不在(恼)</p></blockquote></blockquote><h2 id="9-无序列表">9.无序列表</h2><p>[<code>-</code>或<code>+</code>+空格 前置]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 一颗是枣树<br><span class="hljs-bullet">+</span> 另一棵也是枣树<br><span class="hljs-bullet">*</span> (这种也可以,不过在typora很难单个输入,故不常用)<br></code></pre></td></tr></table></figure><p>敲回车会自动补全,按<code>Tab</code>会自动缩进一级</p><ul><li>一颗是枣树<ul><li>另一棵也是枣树</li></ul></li></ul><h2 id="10-有序列表">10.有序列表</h2><p>数字+<code>.</code>+<code>空格</code> 前置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown">我来这里就为了三件事:<br><span class="hljs-bullet">1.</span> 公平<br><span class="hljs-bullet">2.</span> 公平<br><span class="hljs-bullet">3.</span> 还是™的公平<br></code></pre></td></tr></table></figure><p>我来这里就为了三件事:</p><ol><li>公平</li><li>公平</li><li>还是™的公平</li></ol><h2 id="11-上标">11.*上标</h2><p>用<code>^</code>包围即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2</span>^<span class="hljs-number">31</span>^-<span class="hljs-number">1</span>=<span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><h2 id="12-下标">12.*下标</h2><p>用<code>~</code>包围即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">H</span>~<span class="hljs-number">2</span>~O是剧毒的<br></code></pre></td></tr></table></figure><h2 id="13-注释-标参考文献">13.*注释(标参考文献)</h2><p><code>[^]</code>后置</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"> 滑了天下之大稽[^1]<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">史记·滑稽列传——司马迁</span><br></code></pre></td></tr></table></figure><p>滑了天下之大稽<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="史记·滑稽列传——司马迁">[1]</span></a></sup></p><h2 id="14-链接">14.链接</h2><p>(注意:文内跳转为扩展语法)</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">来看看菜鸡的<span class="hljs-selector-attr">[力扣]</span>(https://leetcode.cn/u/using_namespace_std/)账号罢<br><br><span class="hljs-selector-attr">[点击这里回到梦开始的地方]</span>(#Markdown语法)<br>第三行这个是扩展语法<br></code></pre></td></tr></table></figure><p>来看看菜鸡的<a href="https://leetcode.cn/u/using_namespace_std/">力扣</a>账号罢</p><h2 id="15-任务列表">15.任务列表</h2><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">TodoList</span>:<br><span class="hljs-literal">-</span> [ ] 打王者<br><span class="hljs-literal">-</span> [x] 打王者<br><span class="hljs-literal">-</span> [ ] 打力扣<br></code></pre></td></tr></table></figure><h2 id="16-表格">16.表格</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 学号 </span>|<span class="hljs-string"> 姓名 </span>|<span class="hljs-string"> 年龄 </span>|<br>|<span class="hljs-string"> :--- </span>|<span class="hljs-string">:---: </span>|<span class="hljs-string"> ---: </span>|<br>|<span class="hljs-string">   114514   </span>|<span class="hljs-string"> 田所     </span>|<span class="hljs-string">   24   </span>|<br>|<span class="hljs-string">1919810</span>|<span class="hljs-string">浩二</span>|<span class="hljs-string">25</span>|<br></code></pre></td></tr></table></figure><p>用<code>|</code>绘制表格边框</p><p>第一行为表头,由第二行分割线决定对齐方式与长度,第三行及之后即表格数据</p><table><thead><tr><th style="text-align:left">学号</th><th style="text-align:center">姓名</th><th style="text-align:right">年龄</th></tr></thead><tbody><tr><td style="text-align:left">114514</td><td style="text-align:center">田所</td><td style="text-align:right">24</td></tr><tr><td style="text-align:left">1919810</td><td style="text-align:center">浩二</td><td style="text-align:right">25</td></tr></tbody></table><h2 id="17-图片">17.图片</h2><p>[直接拖进来或复制粘贴]</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片]</span>(图片的位置)<br>!<span class="hljs-selector-attr">[my flag]</span>(Markdown教程.assets\CJL.png)<br></code></pre></td></tr></table></figure><p><img src="Markdown%E6%95%99%E7%A8%8B.assets/CJL.png" alt="my flag"></p><h2 id="18-分割线">18.分割线</h2><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">***</span><br><span class="hljs-section">---</span><br><span class="hljs-emphasis">___</span><br>(三个以上就行)<br></code></pre></td></tr></table></figure><hr><hr><hr><h2 id="19-Emoji">19.Emoji</h2><p>用英文输入Emoji是扩展语法</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">:sweat_smile:</span><br><span class="hljs-meta">:drooling_face:</span><br><span class="hljs-meta">:clown_face:</span><br></code></pre></td></tr></table></figure><p>敲键盘或回车点击,后置的<code>:</code>一般不需要手动输</p><p>要求英语水平够高,记得每个Emoji的英文名</p><p>对于其余普通的Markdown编辑器,可以直接将Emoji表情复制进来,这是直接硬编码的 (<s>刻进DNA里</s>)</p><p>可以复制Emoji的<a href="https://emojipedia.org/apple/">网站</a></p><p>😇😂</p><h2 id="20-自动生成目录">20.*自动生成目录</h2><p>输入<code>[TOC]</code>即可</p><h2 id="21-内联HTML代码">21.内联HTML代码</h2><p>用<code>&lt;&gt;&lt;/&gt;</code>包围</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:red&quot;</span>&gt;</span>我不会 HTML 呜呜呜...浇浇我<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span>简单的文字居中也可以这样<span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure><div style="text-align:center"><font style="color:red">我不会 HTML 呜呜呜...浇浇我</font></div><center>简单的文字居中也可以这样</center><p><u>下划线</u></p><p>只要你会写,你完全可以把Markdown当作<strong>HTML</strong>来写</p><p>同时,<code>.md</code>文件可以直接导出成一个网页</p><h2 id="22-内联-LaTeX公式">22.内联<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8988em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6833em;"><span style="top:-2.905em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4678em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span>公式</h2><p>(部分编译器会不识别某些符号,Typora完全支持)</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-built_in">$</span><span class="hljs-keyword">\LaTeX</span><span class="hljs-built_in">$</span>是最棒的论文排版语言<br><span class="hljs-built_in">$</span>a<span class="hljs-built_in">^</span>n+b<span class="hljs-built_in">^</span>n=c<span class="hljs-built_in">^</span>n<span class="hljs-built_in">$</span><br><span class="hljs-built_in">$</span><span class="hljs-keyword">\int</span><span class="hljs-built_in">_</span>&#123;-<span class="hljs-keyword">\infty</span>&#125;<span class="hljs-built_in">^</span>&#123;+<span class="hljs-keyword">\infty</span>&#125;&#123;f(x)<span class="hljs-keyword">\cdot</span> e<span class="hljs-built_in">^</span>&#123;-2<span class="hljs-keyword">\pi</span> j<span class="hljs-keyword">\cdot</span> x&#125;dx&#125;<span class="hljs-built_in">$</span><br><span class="hljs-built_in">$</span><span class="hljs-keyword">\lim</span><span class="hljs-built_in">_</span>&#123;x<span class="hljs-keyword">\to</span><span class="hljs-keyword">\infty</span>&#125;<span class="hljs-keyword">\sum</span><span class="hljs-built_in">_</span>&#123;i=1&#125;<span class="hljs-built_in">^</span>n&#123;(1+<span class="hljs-keyword">\frac</span>&#123;1&#125;&#123;n&#125;)<span class="hljs-built_in">^</span>n&#125;<span class="hljs-built_in">$</span><br><br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>(公式块)<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br>x<span class="hljs-built_in">_</span>2=a<span class="hljs-built_in">_</span>&#123;11&#125;x<span class="hljs-built_in">_</span>1+a<span class="hljs-built_in">_</span>&#123;12&#125;y<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\\</span><br>y<span class="hljs-built_in">_</span>2=a<span class="hljs-built_in">_</span>&#123;21&#125;x<span class="hljs-built_in">_</span>1+a<span class="hljs-built_in">_</span>&#123;22&#125;y<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\enspace</span><br><span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;x<span class="hljs-built_in">_</span>2<span class="hljs-keyword">\\</span>y<span class="hljs-built_in">_</span>2<span class="hljs-keyword">\end</span>&#123;pmatrix&#125;=<br><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;<br>a<span class="hljs-built_in">_</span>&#123;11&#125;<span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;12&#125;<span class="hljs-keyword">\\</span>a<span class="hljs-built_in">_</span>&#123;21&#125;<span class="hljs-built_in">&amp;</span>a<span class="hljs-built_in">_</span>&#123;22&#125;<br><span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<span class="hljs-keyword">\cdot</span><br><span class="hljs-keyword">\begin</span>&#123;pmatrix&#125;x<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\\</span>y<span class="hljs-built_in">_</span>1<span class="hljs-keyword">\end</span>&#123;pmatrix&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><span class="hljs-keyword">\begin</span>&#123;cases&#125;<br><span class="hljs-keyword">\nabla</span><span class="hljs-keyword">\times</span><span class="hljs-keyword">\vec</span>&#123;E&#125;=-<span class="hljs-keyword">\frac</span>&#123;<span class="hljs-keyword">\partial</span><span class="hljs-keyword">\vec</span>&#123;B&#125;&#125;&#123;<span class="hljs-keyword">\partial</span> t&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\nabla</span><span class="hljs-keyword">\times</span><span class="hljs-keyword">\vec</span>&#123;H&#125;=<span class="hljs-keyword">\vec</span>&#123;J<span class="hljs-built_in">_</span>v&#125;+<span class="hljs-keyword">\frac</span>&#123;<span class="hljs-keyword">\partial</span><span class="hljs-keyword">\vec</span>&#123;D&#125;&#125;&#123;<span class="hljs-keyword">\partial</span> t&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\nabla</span><span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\vec</span>&#123;D&#125;=<span class="hljs-keyword">\rho</span><span class="hljs-built_in">_</span>v<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\nabla</span><span class="hljs-keyword">\cdot</span><span class="hljs-keyword">\vec</span>&#123;B&#125;=0<br><span class="hljs-keyword">\end</span>&#123;cases&#125;<span class="hljs-keyword">\quad</span><br><span class="hljs-keyword">\begin</span>&#123;cases&#125;<br><span class="hljs-keyword">\vec</span>&#123;D&#125;=<span class="hljs-keyword">\epsilon</span><span class="hljs-keyword">\vec</span>&#123;E&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vec</span>&#123;B&#125;=<span class="hljs-keyword">\mu</span><span class="hljs-keyword">\vec</span>&#123;H&#125;<span class="hljs-keyword">\\</span><br><span class="hljs-keyword">\vec</span>&#123;J<span class="hljs-built_in">_</span>v&#125;=<span class="hljs-keyword">\sigma</span><span class="hljs-keyword">\vec</span>&#123;E&#125;<br><span class="hljs-keyword">\end</span>&#123;cases&#125;<br><span class="hljs-built_in">$</span><span class="hljs-built_in">$</span><br><br></code></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8988em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6833em;"><span style="top:-2.905em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4678em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span>是最棒的论文排版语言<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>+</mo><msup><mi>b</mi><mi>n</mi></msup><mo>=</mo><msup><mi>c</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">a^n+b^n=c^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7477em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>⋅</mo><msup><mi>e</mi><mrow><mo>−</mo><mn>2</mn><mi>π</mi><mi>j</mi><mo>⋅</mo><mi>x</mi></mrow></msup><mi>d</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">\int_{-\infty}^{+\infty}{f(x)\cdot e^{-2\pi j\cdot x}dx}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3804em;vertical-align:-0.4142em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0006em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9662em;"><span style="top:-2.3442em;margin-left:-0.1945em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4142em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">πj</span><span class="mbin mtight">⋅</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow><mi>lim</mi><mo>⁡</mo></mrow><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></msub><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mrow><mo stretchy="false">(</mo><mn>1</mn><mo>+</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow></mrow><annotation encoding="application/x-tex">\lim_{x\to\infty}\sum_{i=1}^n{(1+\frac{1}{n})^n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mop"><span class="mop">lim</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub><mo>=</mo><msub><mi>a</mi><mn>11</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>12</mn></msub><msub><mi>y</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><msub><mi>y</mi><mn>2</mn></msub><mo>=</mo><msub><mi>a</mi><mn>21</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>a</mi><mn>22</mn></msub><msub><mi>y</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><mspace width="0.5em"/><mspace linebreak="newline"></mspace><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow><mo>⋅</mo><mrow><mo fence="true">(</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>x</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>y</mi><mn>1</mn></msub></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">x_2=a_{11}x_1+a_{12}y_1\\y_2=a_{21}x_1+a_{22}y_1\\\enspace\\\begin{pmatrix}x_2\\y_2\end{pmatrix}=\begin{pmatrix}a_{11}&amp;a_{12}\\a_{21}&amp;a_{22}\end{pmatrix}\cdot\begin{pmatrix}x_1\\y_1\end{pmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0em;"></span><span class="mspace" style="margin-right:0.5em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">11</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">21</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">12</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">22</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>(麦克斯韦方程组)</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mover accent="true"><mi>E</mi><mo>⃗</mo></mover><mo>=</mo><mo>−</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mover accent="true"><mi>B</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>×</mo><mover accent="true"><mi>H</mi><mo>⃗</mo></mover><mo>=</mo><mover accent="true"><msub><mi>J</mi><mi>v</mi></msub><mo>⃗</mo></mover><mo>+</mo><mfrac><mrow><mi mathvariant="normal">∂</mi><mover accent="true"><mi>D</mi><mo>⃗</mo></mover></mrow><mrow><mi mathvariant="normal">∂</mi><mi>t</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mover accent="true"><mi>D</mi><mo>⃗</mo></mover><mo>=</mo><msub><mi>ρ</mi><mi>v</mi></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∇</mi><mo>⋅</mo><mover accent="true"><mi>B</mi><mo>⃗</mo></mover><mo>=</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow><mspace width="1em"/><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mover accent="true"><mi>D</mi><mo>⃗</mo></mover><mo>=</mo><mi>ϵ</mi><mover accent="true"><mi>E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mover accent="true"><mi>B</mi><mo>⃗</mo></mover><mo>=</mo><mi>μ</mi><mover accent="true"><mi>H</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mover accent="true"><msub><mi>J</mi><mi>v</mi></msub><mo>⃗</mo></mover><mo>=</mo><mi>σ</mi><mover accent="true"><mi>E</mi><mo>⃗</mo></mover></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">\begin{cases}\nabla\times\vec{E}=-\frac{\partial\vec{B}}{\partial t}\\\nabla\times\vec{H}=\vec{J_v}+\frac{\partial\vec{D}}{\partial t}\\\nabla\cdot\vec{D}=\rho_v\\\nabla\cdot\vec{B}=0\end{cases}\quad\begin{cases}\vec{D}=\epsilon\vec{E}\\\vec{B}=\mu\vec{H}\\\vec{J_v}=\sigma\vec{E}\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.8849em;vertical-align:-2.6924em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.95em;"><span style="top:-1.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.592em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.916em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.916em' style='width:0.8889em' viewBox='0 0 888.89 916' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V916 H384z M384 0 H504 V916 H384z'/></svg></span></span><span style="top:-5.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1924em;"><span style="top:-5.1924em;"><span class="pstrut" style="height:3.0704em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0704em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight" style="margin-right:0.05017em;">B</span></span><span style="top:-2.9663em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.69em;"><span class="pstrut" style="height:3.0704em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0704em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal mtight">t</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight" style="margin-right:0.05556em;">∂</span><span class="mord accent mtight"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-2.714em;"><span class="pstrut" style="height:2.714em;"></span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">D</span></span><span style="top:-2.9663em;"><span class="pstrut" style="height:2.714em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay mtight" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.0704em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">ρ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-0.81em;"><span class="pstrut" style="height:3.0704em;"></span><span class="mord"><span class="mord">∇</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.6924em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35em;"><span style="top:-2.2em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.192em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.316em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.8889em' height='0.316em' style='width:0.8889em' viewBox='0 0 888.89 316' preserveAspectRatio='xMinYMin'><path d='M384 0 H504 V316 H384z M384 0 H504 V316 H384z'/></svg></span></span><span style="top:-4.6em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.85em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ϵ</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">μ</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1799em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span><span style="top:-1.53em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.09618em;">J</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0962em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span><span style="top:-3.2523em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1522em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg xmlns="http://www.w3.org/2000/svg" width='0.471em' height='0.714em' style='width:0.471em' viewBox='0 0 471 714' preserveAspectRatio='xMinYMin'><path d='M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 53.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 1110.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359c-16-25.333-24-45-24-59z'/></svg></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.91em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="23-网络图床">23.网络图床</h2><p>分享一个 Typora 搭配腾讯云COS/阿里云OSS图床的<a href="https://blog.csdn.net/guo_ridgepole/article/details/108257277">例子</a>. 新用户免费试用6个月, 另外还可选择七牛云或者路过图床.</p><h2 id="24-常用快捷键">24.常用快捷键</h2><table><thead><tr><th>按键</th><th>效果</th><th>按键</th><th>效果</th></tr></thead><tbody><tr><td><code>Ctrl</code> + <code>D</code></td><td>选中当前词</td><td><code>Ctrl</code> + <code>L</code></td><td>选中当前句/行</td></tr><tr><td><code>Ctrl</code> + <code>E</code></td><td>选中当前区块</td><td><code>Ctrl</code> + <code>F</code></td><td>搜索当前选中</td></tr><tr><td><code>Ctrl</code> + <code>B</code></td><td>加粗当前选中</td><td><code>Ctrl</code> + <code>H</code></td><td>替换当前选中</td></tr><tr><td><code>Ctrl</code> + <code>I</code></td><td>倾斜当前选中</td><td><code>Ctrl</code> + <code>U</code></td><td>下划当前选中</td></tr><tr><td><code>Ctrl</code> + <code>K</code></td><td>将当前选中生成链接</td><td><code>Ctrl</code> + <code>J</code></td><td>滚动屏幕将选中滚至顶部</td></tr><tr><td><code>Ctrl</code> + <code>W</code></td><td>关闭当前窗口</td><td><code>Ctrl</code> + <code>N</code></td><td>打开新窗口</td></tr><tr><td><code>Ctrl</code> + <code>O</code></td><td>打开文件</td><td><code>Ctrl</code> + <code>P</code></td><td>搜索文件并打开</td></tr><tr><td><code>Ctrl</code> + <code>回车</code></td><td>表格下方插入行</td><td><code>Ctrl</code> + <code>,</code></td><td>打开偏好设置</td></tr><tr><td><code>Ctrl</code> + <code>.</code></td><td>切换全角/半角标点</td><td><code>Ctrl</code> + <code>/</code></td><td>切换正常/源代码视图</td></tr><tr><td><code>Ctrl</code> + <code>Shift</code> + <code>-</code></td><td>缩小视图缩放</td><td><code>Ctrl</code> + <code>Shift</code> + <code>+</code></td><td>放大视图缩放</td></tr></tbody></table><p>还有一些不常用的/三键的快捷键不在此列出.</p><h2 id="25-Typora-的主题样式与检查元素">25. *Typora 的主题样式与检查元素</h2><p>Markdown 在编译后约等于 HTML. 而 Typora 的正常视图就是编译后的 Markdown, 故Typora的主题样式本质就是 CSS 文件.</p><p>可以下载各种好看的主题给 Typora换上, 同时也可以自己调整对应的 CSS 文件, 或者自己手搓.</p><p>在 Typora 设置中开启 <code>调试模式</code> 后即可在正常视图右击打开 <code>检查元素</code>, 在其中就可以完全将 Markdown 文件当成 HTML 来编辑.</p><h2 id="26-mermaid语法">26.mermaid语法</h2><p><a href="http://t.csdn.cn/Hgk89">参考文献</a></p><p>流程图:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">```mermaid<br>graph <span class="hljs-selector-tag">TD</span>;<br><span class="hljs-selector-tag">A</span>--&gt;<span class="hljs-selector-tag">B</span>;<br><span class="hljs-selector-tag">A</span>--&gt;C;<br><span class="hljs-selector-tag">B</span>--&gt;D;<br>C--&gt;D;<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">graph TD;A--&gt;B;A--&gt;C;B--&gt;D;C--&gt;D;</code></pre><p>时序图:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xl">```mermaid<br>sequenceDiagram<br>    participant Alice<br>    participant Bob<br>    A<span class="hljs-function"><span class="hljs-title">lice</span>-&gt;</span>&gt;John: Hello John, how are you?<br>    <span class="hljs-keyword">loop</span> Healthcheck<br>        J<span class="hljs-function"><span class="hljs-title">ohn</span>-&gt;</span>&gt;John: Fight against hypochondria<br>    end<br>    Note right of John: Rational thoughts &lt;br/&gt;prevail!<br>    J<span class="hljs-function"><span class="hljs-title">ohn</span>--&gt;</span>&gt;Alice: Great!<br>    J<span class="hljs-function"><span class="hljs-title">ohn</span>-&gt;</span>&gt;Bob: How about you?<br>    B<span class="hljs-function"><span class="hljs-title">ob</span>--&gt;</span>&gt;John: Jolly good! <br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">sequenceDiagram    participant Alice    participant Bob    Alice-&gt;&gt;John: Hello John, how are you?    loop Healthcheck        John-&gt;&gt;John: Fight against hypochondria    end    Note right of John: Rational thoughts &lt;br/&gt;prevail!    John--&gt;&gt;Alice: Great!    John-&gt;&gt;Bob: How about you?    Bob--&gt;&gt;John: Jolly good! </code></pre><p>甘特图:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs subunit">```mermaid<br>gantt<br>dateFormat  YYYY-MM-DD<br>title Adding GANTT diagram to mermaid<br>excludes weekdays 2014<span class="hljs-string">-01</span><span class="hljs-string">-10</span><br><br>section A section<br>Completed task            :done,    des1, 2014<span class="hljs-string">-01</span><span class="hljs-string">-06</span>,2014<span class="hljs-string">-01</span><span class="hljs-string">-08</span><br>Active task               :active,  des2, 2014<span class="hljs-string">-01</span><span class="hljs-string">-09</span>, 3d<br>Future task               :         des3, after des2, 5d<br>Future task2               :         des4, after des3, 5d<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidexcludes weekdays 2014-01-10section A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre><p>类图:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ada">```mermaid<br>classDiagram<br>Class01 &lt;|<span class="hljs-comment">-- AveryLongClass : Cool</span><br>Class03 *<span class="hljs-comment">-- Class04</span><br>Class05 o<span class="hljs-comment">-- Class06</span><br>Class07 .. Class08<br>Class09 <span class="hljs-comment">--&gt; C2 : Where am i?</span><br>Class09 <span class="hljs-comment">--* C3</span><br>Class09 <span class="hljs-comment">--|&gt; Class07</span><br>Class07 : <span class="hljs-type">equals</span>()<br>Class07 : <span class="hljs-type">Object</span>[] elementData<br>Class01 : <span class="hljs-type">size</span>()<br>Class01 : <span class="hljs-type">int</span> chimp<br>Class01 : <span class="hljs-type">int</span> gorilla<br>Class08 &lt;<span class="hljs-comment">--&gt; C2: Cool label</span><br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label</code></pre><p>实体关系图:</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">```mermaid<br>erDiagram<br>    CUSTOMER ||--o&#123; <span class="hljs-keyword">ORDER</span> <span class="hljs-title">: places</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-title">||--|&#123; LINE-ITEM</span> : contains<br>    CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">erDiagram    CUSTOMER ||--o&#123; ORDER : places    ORDER ||--|&#123; LINE-ITEM : contains    CUSTOMER &#125;|..|&#123; DELIVERY-ADDRESS : uses</code></pre><p>用户旅程图:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">```mermaid<br>journey<br>    title My working day<br>    section Go <span class="hljs-keyword">to</span> work<br>      Make tea: <span class="hljs-number">5</span>: <span class="hljs-keyword">Me</span><br>      Go upstairs: <span class="hljs-number">3</span>: <span class="hljs-keyword">Me</span><br>      <span class="hljs-keyword">Do</span> work: <span class="hljs-number">1</span>: <span class="hljs-keyword">Me</span>, Cat<br>    section Go home<br>      Go downstairs: <span class="hljs-number">5</span>: <span class="hljs-keyword">Me</span><br>      Sit down: <span class="hljs-number">5</span>: <span class="hljs-keyword">Me</span><br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 5: Me</code></pre><p>状态图:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">```mermaid<br>stateDiagram-v2<br>[*] --&gt; Still<br>S<span class="hljs-function"><span class="hljs-title">till</span> --&gt;</span> [*]<br>S<span class="hljs-function"><span class="hljs-title">till</span> --&gt;</span> Moving<br>M<span class="hljs-function"><span class="hljs-title">oving</span> --&gt;</span> Still<br>M<span class="hljs-function"><span class="hljs-title">oving</span> --&gt;</span> Crash<br>C<span class="hljs-function"><span class="hljs-title">rash</span> --&gt;</span> [*]<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">stateDiagram-v2[*] --&gt; StillStill --&gt; [*]Still --&gt; MovingMoving --&gt; StillMoving --&gt; CrashCrash --&gt; [*]</code></pre><p>饼图:</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">```mermaid<br>pie<br><span class="hljs-string">&quot;Dogs&quot;</span> : 386<br><span class="hljs-string">&quot;Cats&quot;</span> : 85<br><span class="hljs-string">&quot;Rats&quot;</span> : 15<br>```<br></code></pre></td></tr></table></figure><pre><code class=" mermaid">pie&quot;Dogs&quot; : 386&quot;Cats&quot; : 85&quot;Rats&quot; : 15</code></pre><h2 id="27-markdown注释">27.markdown注释</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&lt;!--<br>Note - Any content mentioned below in <span class="hljs-code">`&lt;!-- -&gt;`</span> blocks are just comments<br>to help you fill-up the issue. It won&#x27;t be visible in the actual issue after<br>you click on submit.<br>--&gt;<br></code></pre></td></tr></table></figure><!--Note - Any content mentioned below in `<!-- ->` blocks are just commentsto help you fill-up the issue. It won't be visible in the actual issue afteryou click on submit.--><p>在typora中,你可以看到注释的内容,但是导出为PDF后,注释的内容就会消失</p><h2 id="💯-总结">💯 总结</h2><p>至此, <strong>Markdown + Typora / VSCode</strong> 的手册教程也告一段落.</p><p>不知你看完这么长的教程/手册, 是否能体会到 Markdown 的精妙简洁之处呢?</p><p>其实 Markdown 只是标记语言的最开始, 我的感受是会了 Markdown 之后对于理解 HTML 也有帮助, 对于用 LATEX 来写论文也有帮助. 标记语言正是为了摆脱 Word 那种虽然&quot;所见即所得&quot;, 但又过于花哨浮华, 很差的兼容性与闭源的编码的缺陷. 当你能掌握这样的&quot;所写即所得&quot;时, 你肯定会感受到用 Markdown 这类语言来处理文本的妙处!</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>史记·滑稽列传——司马迁<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>专业技能</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
